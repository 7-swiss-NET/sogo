{"version":3,"file":"Mailer.services.js","sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","each","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Mailbox","Message","$$resource","baseURL","activeUser","$Mailbox","$Message","module","e","factory","$findAll","data","collection","forEach","o","i","id","prototype","$getMailboxes","options","_this","deferred","defer","$mailboxes","reload","$find","$flattenMailboxes","resolve","promise","allMailboxes","_visit","mailboxes","push","children","length","$$flattenMailboxes","$getMailboxByType","type","mailbox","_find","find","console","specialMailboxes","$getMailboxByPath","path","$newMailbox","name","post","toString","$newMessage","fetch","message","accountId","mailboxPath","$absolutePath","asDraft","editable","$addDelegate","user","param","uid","indexOf","pluck","delegates","users","status","reject","l","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","Preferences","PRELOAD","$$Acl","$Preferences","$query","sort","asc","selectedFolder","$refreshTimeout","ready","settings","Mail","SortingState","parseInt","constant","LOOKAHEAD","SIZE","$unwrapCollection","createMailboxes","level","index","map","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","isUndefined","$shadowData","$omit","getLength","getItemAtIndex","$loadMessage","$selectedCount","count","filter","selected","$filter","sortingAttributes","filters","isDefined","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","messageId","endIndex","uids","futureHeadersData","startIndex","max","loaded","subject","Math","min","loading","$unwrapHeaders","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","flags","operation","msgUIDs","$delete","remove","$deleteMessages","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","invoke","threaded","reduce","msgs","msg","object","isError","j","messageHeaders","futureMessageData","$mailbox","$hasUnsafeContent","$loadUnsafeContent","$showDetailedRecipients","to","cc","bcc","$formatFullAddresses","$tapette","$sce","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","filterTags","query","re","RegExp","keys","tag","search","draftId","$setUID","oldUID","shortname","replace","image","$shortRecipients","result","$shortAddress","address","loadUnsafeContent","showDetailedRecipients","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","attr","removeAttr","trustAs","participants","participant","compile","$editableContent","text","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","response","$send","$futureMessageData","isread"],"mappings":"CAEA,WACE,YAOA,SAASA,SAAQC,mBAEuB,kBAA3BA,mBAAkBC,OAC3BC,QAAQC,OAAOC,KAAMJ,mBACrBK,EAAEC,KAAKF,KAAKG,WAAY,SAASC,UAC3BA,SAASC,SACXD,SAASE,KAAOF,SAASC,SAAW,KAAOD,SAASG,MAAQ,IAE5DH,SAASE,KAAO,IAAMF,SAASG,MAAQ,MAE3CZ,QAAQa,KAAKC,MAAM,YAAcC,KAAKC,UAAUf,kBAAmBgB,OAAW,KAalFjB,QAAQkB,UAAY,KAAM,WAAY,OAAQ,aAAc,WAAY,UAAW,UAAW,SAASC,GAAIC,SAAUP,KAAMQ,SAAUC,SAAUC,QAASC,SAUtJ,MATArB,SAAQC,OAAOJ,SACbmB,GAAIA,GACJC,SAAUA,SACVP,KAAMA,KACNY,WAAY,GAAIH,UAASD,SAASK,UAAWL,SAASM,cACtDC,SAAUL,QACVM,SAAUL,UAGLxB,SAOT,KACEG,QAAQ2B,OAAO,iBAEjB,MAAMC,GACJ5B,QAAQ2B,OAAO,iBAAkB,gBAEnC3B,QAAQ2B,OAAO,iBACZE,QAAQ,UAAWhC,QAAQkB,UAQ9BlB,QAAQiC,SAAW,SAASC,MAC1B,GAAIC,cAQJ,OAPID,OAEF/B,QAAQiC,QAAQF,KAAM,SAASG,EAAGC,GAChCD,EAAEE,GAAKD,EACPH,WAAWG,GAAK,GAAItC,SAAQqC,KAGzBF,YAUTnC,QAAQwC,UAAUC,cAAgB,SAASC,SACzC,GAAIC,OAAQtC,KACRuC,SAAW5C,QAAQmB,GAAG0B,OAa1B,QAXIxC,KAAKyC,YAAgBJ,SAAWA,QAAQK,OAI1C/C,QAAQ4B,SAASoB,MAAM3C,MAAMH,KAAK,SAASgC,MACzCS,MAAMG,WAAaZ,KACnBS,MAAMM,mBAAmBF,QAAQ,IACjCH,SAASM,QAAQP,MAAMG,cANzBF,SAASM,QAAQ7C,KAAKyC,YAUjBF,SAASO,SAUlBnD,QAAQwC,UAAUS,kBAAoB,SAASP,SAC7C,GAAIC,OAAQtC,KACR+C,gBACAC,OAAS,SAASC,WAChBhD,EAAEC,KAAK+C,UAAW,SAASjB,GACzBe,aAAaG,KAAKlB,GACdA,EAAEmB,UAAYnB,EAAEmB,SAASC,OAAS,GACpCJ,OAAOhB,EAAEmB,YAanB,QARInD,KAAKqD,oBAAwBhB,SAAWA,QAAQK,QAIlDM,OAAOhD,KAAKyC,YACZH,MAAMe,mBAAqBN,cAJ3BA,aAAe/C,KAAKqD,mBAOfN,cAGTpD,QAAQwC,UAAUmB,kBAAoB,SAASC,MAC7C,GAAIC,SAEAC,MAAQ,SAASR,WACf,GAAIO,SAAUvD,EAAEyD,KAAKT,UAAW,SAASjB,GACvC,MAAOA,GAAEuB,MAAQA,MASnB,OAPKC,UACH1D,QAAQiC,QAAQkB,UAAW,SAASjB,IAC7BwB,SAAWxB,EAAEmB,UAAYnB,EAAEmB,SAASC,OAAS,IAChDI,QAAUC,MAAMzB,EAAEmB,aAIjBK,QAEbA,SAAUC,MAAMzD,KAAKyC,YAErBkB,QAAQlD,MAAM+C,SACdG,QAAQlD,MAAMT,KAAK4D,mBASrBjE,QAAQwC,UAAU0B,kBAAoB,SAASC,MAC7C,GAAIN,SAAU,KAEVC,MAAQ,SAASR,WACf,GAAIO,SAAUvD,EAAEyD,KAAKT,UAAW,SAASjB,GACvC,MAAOA,GAAE8B,MAAQA,MASnB,OAPKN,UACH1D,QAAQiC,QAAQkB,UAAW,SAASjB,IAC7BwB,SAAWxB,EAAEmB,UAAYnB,EAAEmB,SAASC,OAAS,IAChDI,QAAUC,MAAMzB,EAAEmB,aAIjBK,QAIb,OAFAA,SAAUC,MAAMzD,KAAKyC,aAWvB9C,QAAQwC,UAAU4B,YAAc,SAASD,KAAME,MAC7C,GAAI1B,OAAQtC,IAEZ,OAAOL,SAAQyB,WAAW6C,KAAKH,KAAKI,WAAY,gBAAiBF,KAAMA,OAAOnE,KAAK,WACjFyC,MAAMF,eAAeM,QAAQ,OAUjC/C,QAAQwC,UAAUgC,YAAc,WAC9B,GAAI7B,OAAQtC,IAGZ,OAAOL,SAAQyB,WAAWgD,MAAMpE,KAAKkC,GAAGgC,WAAY,WAAWrE,KAAK,SAASgC,MAC3ElC,QAAQa,KAAKC,MAAM,0BAA4BC,KAAKC,UAAUkB,KAAMjB,OAAW,GAC/E,IAAIyD,SAAU,GAAI1E,SAAQ6B,SAASK,KAAKyC,UAAWhC,MAAMuB,kBAAkBhC,KAAK0C,aAAc1C,KAC9F,OAAOwC,WACNxE,KAAK,SAASwE,SAEf,MAAO1E,SAAQyB,WAAWgD,MAAMC,QAAQG,eAAeC,SAAS,IAAQ,QAAQ5E,KAAK,SAASgC,MAG5F,MAFAlC,SAAQa,KAAKC,MAAM,uBAAyBC,KAAKC,UAAUkB,KAAMjB,OAAW,IAC5Ed,QAAQC,OAAOsE,QAAQK,SAAU7C,MAC1BwC,aAYb1E,QAAQwC,UAAUwC,aAAe,SAASC,MACxC,GAAItC,OAAQtC,KACRuC,SAAW5C,QAAQmB,GAAG0B,QACtBqC,OAASC,IAAKF,KAAKE,IAavB,QAZKF,KAAKE,KAAO7E,EAAE8E,QAAQ9E,EAAE+E,MAAMhF,KAAKiF,UAAW,OAAQL,KAAKE,KAAO,GAErEvC,SAASM,UAGTlD,QAAQyB,WAAWgD,MAAMpE,KAAKkC,GAAGgC,WAAY,cAAeW,OAAOhF,KAAK,WACtEyC,MAAM2C,UAAU/B,KAAK0B,MACrBrC,SAASM,QAAQP,MAAM4C,QACtB,SAASrD,KAAMsD,QAChB5C,SAAS6C,OAAOC,EAAE,yCAGf9C,SAASO,SAUlBnD,QAAQwC,UAAUmD,gBAAkB,SAASR,KAC3C,GAAIxC,OAAQtC,KACR6E,OAASC,IAAKA,IAClB,OAAOnF,SAAQyB,WAAWgD,MAAMpE,KAAKkC,GAAGgC,WAAY,iBAAkBW,OAAOhF,KAAK,WAChF,GAAIoC,GAAIhC,EAAE8E,QAAQ9E,EAAE+E,MAAM1C,MAAM2C,UAAW,OAAQH,IAC/C7C,IAAK,GACPK,MAAM2C,UAAUM,OAAOtD,EAAG,SChQlC,WACE,YAOA,SAASf,SAAQsE,QAASC,mBAGxB,GAFAzF,KAAK0F,SAAWF,QAEsB,kBAA3BC,mBAAkB5F,MAE3B,GADAG,KAAK2F,KAAKF,mBACNzF,KAAKgE,OAAShE,KAAK8D,KAAM,CAE3B,GAAI8B,gBAAiB1E,QAAQE,WAAWyE,OAAO,eAAgB7F,KAAKgE,KACpEhE,MAAK8F,QAAQF,qBAMf5F,MAAK8F,QAAQL,mBASjBvE,QAAQL,UAAY,KAAM,WAAY,OAAQ,aAAc,WAAY,UAAW,MAAO,cAAe,oBAAqB,SAASC,GAAIC,SAAUP,KAAMQ,SAAUC,SAAUE,QAAS4E,IAAKC,YAAaC,SAsBxM,MArBAnG,SAAQC,OAAOmB,SACbJ,GAAIA,GACJC,SAAUA,SACVP,KAAMA,KACNY,WAAY,GAAIH,UAASD,SAASM,WAAW,aAAe,OAAQN,SAASM,cAC7EE,SAAUL,QACV+E,MAAOH,IACPI,aAAcH,YACdI,QAAUC,KAAM,OAAQC,IAAK,GAC7BC,eAAgB,KAChBC,gBAAiB,KACjBP,QAASA,UAGXD,YAAYS,QAAQ5G,KAAK,WACnBmG,YAAYU,SAASC,KAAKC,eAC5B1F,QAAQkF,OAAOC,KAAOL,YAAYU,SAASC,KAAKC,aAAa,GAC7D1F,QAAQkF,OAAOE,IAAMO,SAASb,YAAYU,SAASC,KAAKC,aAAa,OAIlE1F,SAOT,KACEpB,QAAQ2B,OAAO,iBAEjB,MAAMC,GACJ5B,QAAQ2B,OAAO,iBAAkB,gBAEnC3B,QAAQ2B,OAAO,iBACZqF,SAAS,qBACRC,UAAW,GACXC,KAAM,MAEPrF,QAAQ,UAAWT,QAAQL,UAS9BK,QAAQyB,MAAQ,SAAS6C,SACvB,GAAUC,kBAIV,OAFAA,mBAAoBzF,KAAKoB,WAAWgD,MAAMoB,QAAQtD,GAAGgC,WAAY,QAE1DhD,QAAQ+F,kBAAkBzB,QAASC,oBAU5CvE,QAAQ+F,kBAAoB,SAASzB,QAASC,mBAC5C,GAAI3D,eAEAoF,gBAAkB,SAASC,MAAO3D,SAChC,IAAK,GAAIvB,GAAI,EAAGA,EAAIuB,QAAQL,SAASC,OAAQnB,IAC3CuB,QAAQL,SAASlB,GAAGkF,MAAQA,MAC5B3D,QAAQL,SAASlB,GAAK,GAAIf,SAAQsE,QAAShC,QAAQL,SAASlB,IAC5DiF,gBAAgBC,MAAM,EAAG3D,QAAQL,SAASlB,IAKlD,OAAOwD,mBAAkB5F,KAAK,SAASgC,MACrC,MAAOX,SAAQH,SAAS,WAQtB,MANAjB,SAAQiC,QAAQF,KAAKoB,UAAW,SAASpB,KAAMuF,OAC7CvF,KAAKsF,MAAQ,CACb,IAAI3D,SAAU,GAAItC,SAAQsE,QAAS3D,KACnCqF,iBAAgB,EAAG1D,SACnB1B,WAAWoB,KAAKM,WAEX1B,gBAYbZ,QAAQsD,cAAgB,SAASF,UAAWC,aAC1C,GAAIT,QAUJ,OARIS,eACFT,KAAO7D,EAAEoH,IAAI9C,YAAY+C,MAAM,KAAM,SAASC,WAC5C,MAAO,SAAWA,UAAUC,qBAIhC1D,KAAKyB,OAAO,EAAG,EAAGjB,WAEXR,KAAK2D,KAAK,MASnBvG,QAAQiB,UAAUwD,KAAO,SAAS9D,MAEhC7B,KAAK0H,YAAa,EAClB1H,KAAK2H,aACL3H,KAAK4H,WACL9H,QAAQC,OAAOC,KAAM6B,MACjB7B,KAAK8D,OACP9D,KAAKkC,GAAKlC,KAAK6H,MACf7H,KAAK8H,KAAO,GAAI5G,SAAQgF,MAAM,QAAUlG,KAAKkC,KAE3ClC,KAAKuD,OACPvD,KAAK+H,YAAc/H,KAAKgI,cAEtBlI,QAAQmI,YAAYjI,KAAKkI,eAE3BlI,KAAKkI,YAAclI,KAAKmI,UAU5BjH,QAAQiB,UAAUiG,UAAY,WAC5B,MAAOpI,MAAK2H,UAAUvE,QASxBlC,QAAQiB,UAAUkG,eAAiB,SAASjB,OAC1C,GAAI/C,QAEJ,OAAI+C,QAAS,GAAKA,MAAQpH,KAAK2H,UAAUvE,SACvCiB,QAAUrE,KAAK2H,UAAUP,OAErBpH,KAAKsI,aAAajE,QAAQS,MACrBT,QAGJ,MASTnD,QAAQiB,UAAU0F,IAAM,WACtB,MAAO3G,SAAQsD,cAAcxE,KAAK0F,SAASxD,GAAIlC,KAAK8D,OAStD5C,QAAQiB,UAAUoG,eAAiB,WACjC,GAAIC,MAMJ,OAJAA,OAAQ,EACJxI,KAAK2H,YACPa,MAASvI,EAAEwI,OAAOzI,KAAK2H,UAAW,SAAStD,SAAW,MAAOA,SAAQqE,WAActF,QAE9EoF,OAiBTtH,QAAQiB,UAAUwG,QAAU,SAASC,kBAAmBC,SACtD,GAAIvG,OAAQtC,KAAMqC,UAOlB,OALKvC,SAAQgJ,UAAU9I,KAAK+I,eAC1B/I,KAAK+I,YAAc,GAErB/I,KAAK0H,YAAa,EAEXxG,QAAQiF,aAAaM,QAAQ5G,KAAK,WAEnCqB,QAAQsF,iBACVtF,QAAQH,SAASiI,OAAO9H,QAAQsF,iBAE9BoC,mBAEF9I,QAAQC,OAAOmB,QAAQkF,OAAQwC,mBAEjC9I,QAAQC,OAAOsC,SAAWuG,kBAAmB1H,QAAQkF,SACjDtG,QAAQgJ,UAAUD,WACpBxG,QAAQwG,QAAU5I,EAAEmF,OAAOyD,QAAS,SAASJ,QAC3C,MAAO3I,SAAQmI,YAAYQ,OAAOQ,cAA8C,IAA9BR,OAAOQ,YAAY7F,SAEvEnD,EAAEC,KAAKmC,QAAQwG,QAAS,SAASJ,QAC/B,GAAIS,cACAC,MAAQV,OAAOW,SAASD,MAAM,iBAC9BA,SACF9G,QAAQuG,kBAAkBO,MAAQ,KAClCV,OAAOW,SAAWD,MAAM,GACxBD,aAAepJ,QAAQuJ,KAAKZ,QAC5BS,aAAaE,SAAWD,MAAM,GAC9B9G,QAAQwG,QAAQ3F,KAAKgG,iBAM3B,IAAII,kBAAmBpI,QAAQiF,aAAaoD,SAASC,oBACrD,IAAIF,kBAAwC,YAApBA,iBAAgC,CACtD,GAAIG,GAAI3J,QAAQ4J,KAAKpH,MAAOpB,QAAQiB,UAAUwG,QAC9CzH,SAAQsF,gBAAkBtF,QAAQH,SAAS0I,EAAmC,IAAhCH,iBAAiBK,gBAGjE,GAAIlE,mBAAoBvE,QAAQE,WAAW6C,KAAK3B,MAAMJ,GAAI,OAAQG,QAClE,OAAOC,OAAMwD,QAAQL,sBAUzBvE,QAAQiB,UAAUmG,aAAe,SAASsB,WACxC,GACIC,UAGAC,KACAC,kBALAC,WAAahK,KAAK4H,QAAQgC,WAE1BK,IAAMjK,KAAK2H,UAAUvE,OACrB8G,QAAS,CAGb,IAAIpK,QAAQgJ,UAAU9I,KAAK4H,QAAQgC,aAAeI,WAAahK,KAAK2H,UAAUvE,SAExEtD,QAAQgJ,UAAU9I,KAAK2H,UAAUqC,YAAYG,WAE/CD,QAAS,GAIXL,SAAWO,KAAKC,IAAIL,WAAa9I,QAAQ+E,QAAQc,UAAWkD,IAAM,IAC7DnK,QAAQgJ,UAAU9I,KAAK2H,UAAUkC,UAAUM,WAC3CrK,QAAQgJ,UAAU9I,KAAK2H,UAAUkC,UAAUS,UAAU,CAExD,IADAT,SAAWO,KAAKC,IAAIL,WAAa9I,QAAQ+E,QAAQe,KAAMiD,KAClDH,QAAwBD,SAAbG,YAAsCC,IAAbD,WAAkBA,aACrDlK,QAAQgJ,UAAU9I,KAAK2H,UAAUqC,YAAYG,UAAYnK,KAAK2H,UAAUqC,YAAYM,QAEtFT,YAIAC,KAAK5G,KAAKlD,KAAK2H,UAAUqC,YAAYlF,KACrC9E,KAAK2H,UAAUqC,YAAYM,SAAU,EAIzCpJ,SAAQV,KAAKC,MAAM,gBAAkBqJ,KAAKrC,KAAK,MAC/CsC,kBAAoB7I,QAAQE,WAAW6C,KAAKjE,KAAKkC,GAAI,WAAY4H,KAAMA,OACvE9J,KAAKuK,eAAeR,mBAGxB,MAAOG,SASThJ,QAAQiB,UAAU6F,WAAa,WAC7B,MAAoB,UAAbhI,KAAKuD,MAUdrC,QAAQiB,UAAUqI,QAAU,WAC1B,GACIC,YAEAC,OACAvH,SACAlB,EALAK,MAAQtC,KAERuC,SAAWrB,QAAQJ,GAAG0B,OAK1B,OAAIxC,MAAKgE,MAAQhE,KAAKkI,YAAYlE,MAEhCzB,SAASM,UACFN,SAASO,UAIlB2H,WAAa,SAASC,OAAQvH,UAC5B,GAAIwH,eAAgB,KAChBnH,QAAUvD,EAAEyD,KAAKP,SAAU,SAASnB,GAClC,MAAOA,GAAE8B,MAAQxB,MAAMwB,MAY7B,OAVIN,SACFmH,cAAgBD,OAGhB5K,QAAQiC,QAAQoB,SAAU,SAASnB,IAC5B2I,eAAiB3I,EAAEmB,UAAYnB,EAAEmB,SAASC,OAAS,IACtDuH,cAAgBF,WAAWzI,EAAGA,EAAEmB,aAI/BwH,eAITD,OAASD,WAAW,KAAMzK,KAAK0F,SAASjD,YAEtCU,SADa,OAAXuH,OACS1K,KAAK0F,SAASjD,WAEdiI,OAAOvH,SAGpBlB,EAAIhC,EAAE8E,QAAQ9E,EAAE+E,MAAM7B,SAAU,MAAOnD,KAAKkC,IAE5ClC,KAAK4K,QAAQ/K,KAAK,SAASgC,MACzB,GAAIgJ,QACJ/K,SAAQC,OAAOuC,MAAOT,MACtBS,MAAMJ,GAAKI,MAAMuF,MAGjB1E,SAASoC,OAAOtD,EAAG,GACnB4I,QAAU5K,EAAEyD,KAAKP,SAAU,SAASnB,GAElC,MADAd,SAAQV,KAAKC,MAAMuB,EAAEgC,KAAO,MAAQ1B,MAAM0B,MACxB,UAAVhC,EAAEuB,MAAoBvB,EAAEgC,KAAK8G,cAAcxI,MAAM0B,MAAQ,IAGjE/B,EADE4I,QACE5K,EAAE8E,QAAQ9E,EAAE+E,MAAM7B,SAAU,MAAO0H,QAAQ3I,IAG3CiB,SAASC,OAEfD,SAASoC,OAAOtD,EAAG,EAAGK,OAEtBC,SAASM,WACR,SAAShB,MACVU,SAAS6C,OAAOvD,QAGXU,SAASO,UASlB5B,QAAQiB,UAAU4I,SAAW,WAC3B,MAAO7J,SAAQE,WAAW6C,KAAKjE,KAAKkC,GAAI,YAS1ChB,QAAQiB,UAAU6I,aAAe,SAASzH,MACxC,MAAOrC,SAAQE,WAAW6C,KAAKjE,KAAKkC,GAAI,QAAUqB,KAAO,WAS3DrC,QAAQiB,UAAU8I,YAAc,WAC9B,GAAI3I,OAAQtC,IAEZ,OAAOkB,SAAQE,WAAW6C,KAAKjE,KAAKkC,GAAI,cAAcrC,KAAK,WAEzDyC,MAAMqF,aACNrF,MAAMsF,WACNtF,MAAMyG,YAAc,EAGhBjJ,QAAQgJ,UAAUxG,MAAMa,WAAab,MAAMa,SAASC,QACtDd,MAAMoD,SAAStD,eAAeM,QAAQ,OAU5CxB,QAAQiB,UAAU+I,YAAc,WAC9B,MAAOhK,SAAQE,WAAW6C,KAAKjE,KAAKkC,GAAI,aAS1ChB,QAAQiB,UAAUgJ,cAAgB,SAASrB,KAAMsB,MAAOC,WACtD,GAAIxJ,OAAQyJ,QAASxB,KACTsB,MAAOA,MACPC,UAAWA,UAEvB,OAAOnK,SAAQE,WAAW6C,KAAKjE,KAAKkC,GAAI,mBAAoBL,OAS9DX,QAAQiB,UAAUoJ,QAAU,WAC1B,GAEIzI,SAFAR,MAAQtC,KACRuC,SAAWrB,QAAQJ,GAAG0B,OAW1B,OARAM,SAAU5B,QAAQE,WAAWoK,OAAOxL,KAAKkC,IAEzCY,QAAQjD,KAAK,WACXyC,MAAMoD,SAAStD,eAAeM,QAAQ,IACtCH,SAASM,SAAQ,IAChB,SAAShB,KAAMsD,QAChB5C,SAAS6C,OAAOvD,QAEXU,SAASO,SASlB5B,QAAQiB,UAAUsJ,gBAAkB,SAAS3B,MAC3C,MAAO5I,SAAQE,WAAW6C,KAAKjE,KAAKkC,GAAI,eAAgB4H,KAAMA,QAShE5I,QAAQiB,UAAUuJ,cAAgB,SAAS5B,KAAM6B,QAC/C,MAAOzK,SAAQE,WAAW6C,KAAKjE,KAAKkC,GAAI,gBAAiB4H,KAAMA,KAAM6B,OAAQA,UAS/EzK,QAAQiB,UAAUyJ,cAAgB,SAAS9B,KAAM6B,QAC/C,MAAOzK,SAAQE,WAAW6C,KAAKjE,KAAKkC,GAAI,gBAAiB4H,KAAMA,KAAM6B,OAAQA,UAQ/EzK,QAAQiB,UAAU0J,OAAS,WACzB,GAAIvJ,OAAQtC,IACZF,SAAQiC,QAAQ/B,KAAM,SAAS8L,MAAOC,KACzB,eAAPA,KAA+B,YAAPA,KAA+B,KAAVA,IAAI,UAC5CzJ,OAAMyJ,OAGjBjM,QAAQC,OAAOC,KAAMA,KAAKkI,aAC1BlI,KAAKkI,YAAclI,KAAKmI,SAS1BjH,QAAQiB,UAAUyI,MAAQ,WACxB,GAAItI,OAAQtC,IAEZ,OAAOkB,SAAQE,WAAW4K,KAAKhM,KAAKkC,GAAIlC,KAAKmI,SAAStI,KAAK,SAASgC,MAIlE,MAFAS,OAAM4F,YAAc5F,MAAM6F,QAC1BjH,QAAQV,KAAKC,MAAMC,KAAKC,UAAUkB,KAAMjB,OAAW,IAC5CiB,MACN,SAASA,MACVX,QAAQV,KAAKyL,MAAMvL,KAAKC,UAAUkB,KAAMjB,OAAW,IAEnD0B,MAAMuJ,YAUV3K,QAAQiB,UAAU4B,YAAc,SAASD,KAAME,MAC7C,MAAOhE,MAAK0F,SAAS3B,YAAYD,KAAME,OASzC9C,QAAQiB,UAAUgG,MAAQ,WACxB,GAAI3E,WAQJ,OAPA1D,SAAQiC,QAAQ/B,KAAM,SAAS8L,MAAOC,KACzB,eAAPA,KACO,YAAPA,KACU,KAAVA,IAAI,KACNvI,QAAQuI,KAAOD,SAGZtI,SAUTtC,QAAQiB,UAAU2D,QAAU,SAASL,mBACnC,GAAInD,OAAQtC,KACRuC,SAAWrB,QAAQJ,GAAG0B,OAuD1B,OArDAxC,MAAKkM,mBAAqBzG,kBAC1BzF,KAAKkM,mBAAmBrM,KAAK,SAASgC,MACpCX,QAAQH,SAAS,WACf,GAAI+I,MAAMqC,OAEV7J,OAAMqD,KAAK9D,MAEPS,MAAMwH,OACR5I,QAAQV,KAAKC,MAAM,cAAgBoB,KAAKiI,KAAK1G,OAAS,aAGtD+I,QAAUlM,EAAEmM,OAAO9J,MAAM6J,QAAQ,GAAI,eACrC7J,MAAM6J,QAAQ5G,OAAO,EAAG,GAGpBjD,MAAM+J,WACRvC,KAAOxH,MAAMwH,KAAK,GAClBxH,MAAMwH,KAAKvE,OAAO,EAAG,IAIvBtF,EAAEqM,OAAOhK,MAAMwH,KAAM,SAASyC,KAAMC,IAAKvK,GACvC,GAAIJ,KAWJ,OATEA,MADES,MAAM+J,SACDpM,EAAEwM,OAAO3C,KAAM0C,MAEd1H,IAAK0H,IAAItI,YAGnB5B,MAAMsF,QAAQ/F,KAAKiD,KAAO7C,EAE1BsK,KAAKrJ,KAAK,GAAIhC,SAAQM,SAASc,MAAMoD,SAASxD,GAAII,MAAOT,OAElD0K,MACNjK,MAAMqF,WAGT1H,EAAEC,KAAKoC,MAAM6J,QAAS,SAAStK,MAC7B,GAAI2K,KAAMvM,EAAEwM,OAAON,QAAStK,MACxBI,EAAIK,MAAMsF,QAAQ4E,IAAI1H,IAAIZ,WAC9BjE,GAAEF,OAAOuC,MAAMqF,UAAU1F,GAAIuK,QAGjCtL,QAAQV,KAAKC,MAAM,WAAa6B,MAAMJ,GAAK,UAC3CI,MAAMoF,YAAa,EACnBnF,SAASM,QAAQP,MAAMqF,cAExB,SAAS9F,MACV/B,QAAQC,OAAOuC,MAAOT,MACtBS,MAAMoK,SAAU,EAChBnK,SAAS6C,WAGJ7C,SAASO,SASlB5B,QAAQiB,UAAUoI,eAAiB,SAASR,mBAC1C,GAAIzH,OAAQtC,IAEZ+J,mBAAkBlK,KAAK,SAASgC,MAC9BX,QAAQH,SAAS,WACf,GAAIoL,SAASQ,CACT9K,MAAKuB,OAAS,IAEhB+I,QAAUlM,EAAEmM,OAAOvK,KAAK,GAAI,eAC5BA,KAAK0D,OAAO,EAAG,GACftF,EAAEC,KAAK2B,KAAM,SAAS+K,gBACpBA,eAAiB3M,EAAEwM,OAAON,QAASS,gBACnCD,EAAIrK,MAAMsF,QAAQgF,eAAe9H,IAAIZ,YACjCpE,QAAQgJ,UAAU6D,IACpB1M,EAAEF,OAAOuC,MAAMqF,UAAUgF,GAAIC,2BC5qB3C,WACE,YASA,SAASzL,SAAQmD,UAAWd,QAASqJ,mBACnC7M,KAAKsE,UAAYA,UACjBtE,KAAK8M,SAAWtJ,QAChBxD,KAAK+M,mBAAoB,EACzB/M,KAAKgN,oBAAqB,EAC1BhN,KAAKiN,yBAA0B,EAC/BjN,KAAK0E,UAAYwI,MAAQC,MAAQC,QAEK,kBAA3BP,mBAAkBhN,MAE3BC,QAAQC,OAAOC,KAAM6M,mBACrB7M,KAAKkC,GAAKlC,KAAKwE,gBACfxE,KAAKqN,wBAILrN,KAAK8F,QAAQ+G,mBAEf7M,KAAK0I,UAAW,EAGhB1I,KAAKsN,UAAY,EAQnBnM,QAAQN,UAAY,KAAM,WAAY,OAAQ,OAAQ,aAAc,WAAY,WAAY,cAAe,SAASC,GAAIC,SAAUP,KAAM+M,KAAMvM,SAAUwM,SAAUvM,SAAU+E,aAiB1K,MAhBAlG,SAAQC,OAAOoB,SACbL,GAAIA,GACJC,SAAUA,SACVP,KAAMA,KACN+M,KAAMA,KACNE,UAAWD,SACXpM,WAAY,GAAIH,UAASD,SAASM,WAAW,aAAe,OAAQN,SAASM,cAC7EgM,SAAU,IAGZtH,YAAYS,QAAQ5G,KAAK,WACnBmG,YAAYuD,SAASmE,uBACvBvM,QAAQwM,MAAQ3H,YAAYuD,SAASmE,wBAIlCvM,SAOT,KACErB,QAAQ2B,OAAO,iBAEjB,MAAMC,GACJ5B,QAAQ2B,OAAO,iBAAkB,gBAEnC3B,QAAQ2B,OAAO,iBACZE,QAAQ,UAAWR,QAAQN,UAS9BM,QAAQyM,WAAa,SAASC,OAC5B,GAAIC,IAAK,GAAIC,QAAOF,MAAO,IAC3B,OAAO5N,GAAEwI,OAAOxI,EAAE+N,KAAK7M,QAAQwM,OAAQ,SAASM,KAC9C,GAAInC,OAAQ3K,QAAQwM,MAAMM,IAC1B,OAA8B,IAAvBnC,MAAM,GAAGoC,OAAOJ,OAU3B3M,QAAQgB,UAAUqC,cAAgB,SAASnC,SACzC,GAAIyB,KAaJ,OAXAA,MAAO7D,EAAEoH,IAAIrH,KAAK8M,SAAShJ,KAAKwD,MAAM,KAAM,SAASC,WACnD,MAAO,SAAWA,UAAUC,oBAE9B1D,KAAKyB,OAAO,EAAG,EAAGvF,KAAKsE,WACnBjC,SAAWA,QAAQoC,SAAWzE,KAAKmO,QACrCrK,KAAKZ,KAAKlD,KAAKmO,SAGfrK,KAAKZ,KAAKlD,KAAK8E,KAGVhB,KAAK2D,KAAK,MASnBtG,QAAQgB,UAAUiM,QAAU,SAAStJ,KACnC,GAAIuJ,QAASrO,KAAK8E,KAAO,EAErBuJ,SAAUvJ,MACZ9E,KAAK8E,IAAMA,IACX9E,KAAKkC,GAAKlC,KAAKwE,gBACX6J,OAAS,IAAMrO,KAAK8M,SAASlF,QAAQyG,UACvCrO,KAAK8M,SAASlF,QAAQ9C,KAAO9E,KAAK8M,SAASlF,QAAQyG,QACnDrO,KAAK8M,SAASlF,QAAQyG,QAAU,QAWtClN,QAAQgB,UAAUkL,qBAAuB,WACvC,GAAI/K,OAAQtC,KACRG,WAAaF,EAAE+E,MAAM1C,MAAMwK,SAASpH,SAASvF,WAAY,QAG7DF,GAAEC,MAAM,OAAQ,KAAM,KAAM,MAAO,YAAa,SAASqD,MACvDtD,EAAEC,KAAKoC,MAAMiB,MAAO,SAAS1B,KAAMI,GAC7BJ,KAAKmC,MAAQnC,KAAKmC,MAAQnC,KAAKtB,OACjCsB,KAAKvB,KAAOuB,KAAKmC,KAAO,KAAOnC,KAAKtB,MAAQ,IAGxCsB,KAAKmC,KAAKsD,MAAM,KAAKlE,SACvBvB,KAAKyM,UAAYzM,KAAKmC,KAAKsD,MAAM,KAAK,GAAGiH,QAAQ,IAAK,OAGxD1M,KAAKvB,KAAO,IAAMuB,KAAKtB,MAAQ,IAC/BsB,KAAKyM,UAAYzM,KAAKtB,MAAM+G,MAAM,KAAK,IAIzCzF,KAAK2M,MAAQrN,QAAQsM,UAAU5L,KAAKtB,MAAO,IAIvCN,EAAE8E,QAAQ5E,WAAY0B,KAAKtB,QAAU,IACvCsB,KAAKyM,UAAYjJ,EAAE,YAW3BlE,QAAQgB,UAAUsM,iBAAmB,WACnC,GAAInM,OAAQtC,KACR0O,SASJ,OANAzO,GAAEC,MAAM,KAAM,KAAM,OAAQ,SAASqD,MACnCtD,EAAEC,KAAKoC,MAAMiB,MAAO,SAAS1B,KAAMI,GACjCyM,OAAOxL,KAAKrB,KAAKyM,eAIdI,OAAOjH,KAAK,OASrBtG,QAAQgB,UAAUwM,cAAgB,SAASpL,MACzC,GAAIqL,SAAU,EAKd,OAJI5O,MAAKuD,OAASvD,KAAKuD,MAAMH,OAAS,IACpCwL,QAAU5O,KAAKuD,MAAM,GAAGS,MAAQhE,KAAKuD,MAAM,GAAGhD,OAAS,IAGlDqO,SAQTzN,QAAQgB,UAAU0M,kBAAoB,WACpC7O,KAAKgN,oBAAqB,GAQ5B7L,QAAQgB,UAAU2M,uBAAyB,WACzC9O,KAAKiN,yBAA0B,GASjC9L,QAAQgB,UAAU4M,SAAW,WAC3B,GAAIzM,OAAQtC,KACRgP,SACAhM,OAAS,SAASiM,MAChBA,KAAKC,SAAW,uBACC,gCAAbD,KAAK1L,KACPP,OAAO/C,EAAEyD,KAAKuL,KAAKE,QAAS,SAASC,eACnC,MAAOH,MAAKI,eAAiBD,cAAcE,eAItCxP,QAAQyP,QAAQN,KAAKE,SAC5BlP,EAAEC,KAAK+O,KAAKE,QAAS,SAASK,WAC5BxM,OAAOwM,cAIL1P,QAAQmI,YAAYgH,KAAKQ,eAE3BR,KAAKQ,YAAcR,KAAKE,QACxB7M,MAAMyK,kBAAqBkC,KAAKQ,YAAY1K,QAAQ,YAAc,IAEnD,yBAAbkK,KAAK1L,MACP0L,KAAKS,MAAO,EACRpN,MAAM0K,oBACJlN,QAAQmI,YAAYgH,KAAKU,iBAC3BV,KAAKU,cAAgBC,SAASC,cAAc,OAC5CZ,KAAKU,cAAcG,UAAYb,KAAKQ,YACpC3P,QAAQiC,SAAS,MAAO,OAAQ,UAAW,aAAc,SAAU,SAASgO,QAC1E,GACIC,SACAlE,MACA7J,EAHAgO,SAAWhB,KAAKU,cAAcO,iBAAiB,WAAaH,OAAS,IAIzE,KAAK9N,EAAI,EAAGA,EAAIgO,SAAS7M,OAAQnB,IAC/B+N,QAAUlQ,QAAQkQ,QAAQC,SAAShO,IACnC6J,MAAQkE,QAAQG,KAAK,UAAYJ,QACjCC,QAAQG,KAAKJ,OAAQjE,OACrBkE,QAAQI,WAAW,UAAYL,WAIrCd,KAAKE,QAAUhO,QAAQoM,KAAK8C,QAAQ,OAAQpB,KAAKU,cAAcG,YAG/Db,KAAKE,QAAUhO,QAAQoM,KAAK8C,QAAQ,OAAQpB,KAAKQ,aAEnDT,MAAM9L,KAAK+L,OAES,yBAAbA,KAAK1L,MACQ,0BAAb0L,KAAK1L,MACQ,yBAAb0L,KAAK1L,MAGR0L,KAAKqB,cACPrQ,EAAEC,KAAK+O,KAAKqB,aAAc,SAASC,aACjCA,YAAY/B,MAAQrN,QAAQsM,UAAU8C,YAAYhQ,MAAO,MAI5C,0BAAb0O,KAAK1L,OACP0L,KAAKC,SAAW,wBAGlBD,KAAKuB,SAAU,EACfxB,MAAM9L,KAAK+L,QAGXA,KAAKS,MAAO,EACZT,KAAKE,QAAUhO,QAAQoM,KAAK8C,QAAQ,OAAQpB,KAAKQ,aACjDT,MAAM9L,KAAK+L,QAMrB,OAFAjM,QAAOhD,KAAKgP,OAELA,OAUT7N,QAAQgB,UAAUsO,iBAAmB,WACnC,GAAInO,OAAQtC,IAEZ,OAAOmB,SAAQC,WAAWgD,MAAMpE,KAAKkC,GAAI,QAAQrC,KAAK,SAASgC,MAE7D,MADA/B,SAAQC,OAAOuC,MAAOT,MACfV,QAAQC,WAAWgD,MAAM9B,MAAMkC,eAAeC,SAAS,IAAQ,QAAQ5E,KAAK,SAASgC,MAG1F,MAFAV,SAAQX,KAAKC,MAAM,cAAgBC,KAAKC,UAAUkB,KAAMjB,OAAW,IACnEd,QAAQC,OAAOuC,MAAMoC,SAAU7C,MACxBA,KAAK6O,UAYlBvP,QAAQgB,UAAUwO,OAAS,SAAS1C,KAClC,MAAOjO,MAAK4Q,gBAAgB,MAAO3C,MAUrC9M,QAAQgB,UAAU0O,UAAY,SAAS5C,KACrC,MAAOjO,MAAK4Q,gBAAgB,SAAU3C,MAWxC9M,QAAQgB,UAAUyO,gBAAkB,SAASvF,UAAW4C,KACtD,GAAIpM,OACFwJ,UAAWA,UACXC,SAAUtL,KAAK8E,KACfsG,MAAO6C,IAGT,OAAIA,KACK9M,QAAQC,WAAW6C,KAAKjE,KAAK8M,SAASjF,MAAO,mBAAoBhG,MAD1E,QAYFV,QAAQgB,UAAU2O,YAAc,SAAShN,KAAMiN,OAAQlP,MACrD,GAAIS,OAAQtC,IACZmB,SAAQC,WAAW6C,MAAMjE,KAAKkC,GAAI4B,MAAM2D,KAAK,KAAMsJ,OAAQlP,MAAMhC,KAAK,SAASgC,MAC7EV,QAAQJ,SAAS,WACfuB,MAAM0O,WACL,iBAWP7P,QAAQgB,UAAU8O,SAAW,WAE3B,MADAjR,MAAKkR,iBAAmB,EACjB/P,QAAQC,WAAW6C,KAAKjE,KAAKkC,GAAI,YAS1Cf,QAAQgB,UAAUgP,kBAAoB,SAASC,UAC7C,GAAIL,QAAS,6BAA+BK,SACxC9O,MAAQtC,IACZmB,SAAQC,WAAW6C,KAAKjE,KAAKwE,eAAeC,SAAS,IAAQsM,QAAQlR,KAAK,SAASgC,MACjFV,QAAQJ,SAAS,WACfuB,MAAMoC,SAAS2M,gBAAkBpR,EAAEwI,OAAOnG,MAAMoC,SAAS2M,gBAAiB,SAASC,YACjF,MAAOA,YAAWF,UAAYA,YAE/B,iBAYPjQ,QAAQgB,UAAUoP,WAAa,WAC7B,GAAIjP,OAAQtC,KACR+Q,OAAS,oBAKb,OAHI/Q,MAAKwR,YACPT,OAAS,wBAEJ5P,QAAQC,WAAW6C,KAAKjE,KAAKkC,GAAI6O,QAAQlR,KAAK,SAASgC,MAC5DV,QAAQJ,SAAS,WACfuB,MAAMkP,WAAalP,MAAMkP,eAW/BrQ,QAAQgB,UAAU6O,QAAU,WAC1B,GAAInE,kBAIJ,OAFAA,mBAAoB1L,QAAQC,WAAWgD,MAAMpE,KAAKkC,GAAI,QAE/ClC,KAAK8F,QAAQ+G,oBAStB1L,QAAQgB,UAAUsP,OAAS,WACzB,MAAOzR,MAAK0R,UAAU,UASxBvQ,QAAQgB,UAAUwP,UAAY,WAC5B,MAAO3R,MAAK0R,UAAU,aASxBvQ,QAAQgB,UAAUyP,SAAW,WAC3B,MAAO5R,MAAK0R,UAAU,YAgBxBvQ,QAAQgB,UAAUuP,UAAY,SAASX,QACrC,GAAIzO,OAAQtC,IAGZ,OAAOmB,SAAQC,WAAWgD,MAAMpE,KAAKkC,GAAI6O,QAAQlR,KAAK,SAASgC,MAC7D,GAAI2B,SAASa,OAKb,OAJAlD,SAAQX,KAAKC,MAAM,OAASsQ,OAAS,KAAOrQ,KAAKC,UAAUkB,KAAMjB,OAAW,IAC5E4C,QAAUlB,MAAMwK,SAASpH,SAAS7B,kBAAkBhC,KAAK0C,aACzDF,QAAU,GAAIlD,SAAQU,KAAKyC,UAAWd,QAAS3B,MAExCV,QAAQC,WAAWgD,MAAMC,QAAQG,eAAeC,SAAS,IAAQ,QAAQ5E,KAAK,SAASgC,MAG5F,MAFAV,SAAQX,KAAKC,MAAM,OAASsQ,OAAS,KAAOrQ,KAAKC,UAAUkB,KAAMjB,OAAW,IAC5Ed,QAAQC,OAAOsE,QAAQK,SAAU7C,MAC1BwC,aAWblD,QAAQgB,UAAUyI,MAAQ,WACxB,GAAItI,OAAQtC,KACR6B,KAAO7B,KAAK0E,QAIhB,OAFAvD,SAAQX,KAAKC,MAAM,UAAYC,KAAKC,UAAUkB,KAAMjB,OAAW,IAExDO,QAAQC,WAAW4K,KAAKhM,KAAKwE,eAAeC,SAAS,IAAQ5C,MAAMhC,KAAK,SAASgS,UACtF1Q,QAAQX,KAAKC,MAAM,UAAYC,KAAKC,UAAUkR,SAAUjR,OAAW,IACnE0B,MAAM8L,QAAQyD,SAAS/M,KACvBxC,MAAM0O,aAUV7P,QAAQgB,UAAU2P,MAAQ,WACxB,GAAIjQ,MAAO/B,QAAQuJ,KAAKrJ,KAAK0E,UACzBnC,SAAWpB,QAAQL,GAAG0B,OAa1B,OAXArB,SAAQX,KAAKC,MAAM,UAAYC,KAAKC,UAAUkB,KAAMjB,OAAW,IAE/DO,QAAQC,WAAW6C,KAAKjE,KAAKwE,eAAeC,SAAS,IAAQ,OAAQ5C,MAAMhC,KAAK,SAASgC,MACpE,WAAfA,KAAKsD,OACP5C,SAASM,QAAQhB,MAGjBU,SAAS6C,OAAOvD,QAIbU,SAASO,SASlB3B,QAAQgB,UAAU2D,QAAU,SAAS+G,mBACnC,GAAIvK,OAAQtC,KACRuC,SAAWpB,QAAQL,GAAG0B,OA8B1B,OA3BAxC,MAAK+R,mBAAqBlF,kBAG1B7M,KAAK+R,mBAAmBlS,KAAK,SAASgC,MAEpCV,QAAQJ,SAAS,WACfjB,QAAQC,OAAOuC,MAAOT,MACtBS,MAAMJ,GAAKI,MAAMkC,gBACjBlC,MAAM+K,uBACN/K,MAAM0K,oBAAqB,EAC3BzK,SAASM,QAAQP,SAEdA,MAAM0P,QACT7Q,QAAQC,WAAWgD,MAAM9B,MAAMJ,GAAI,mBAAmBrC,KAAK,WACzDsB,QAAQJ,SAAS,WACfuB,MAAM0P,QAAS,EACf1P,MAAMwK,SAAS/D,mBAIpB,SAASlH,MACV/B,QAAQC,OAAOuC,MAAOT,MACtBS,MAAMoK,SAAU,EAChBvL,QAAQX,KAAKyL,MAAM3J,MAAM2J,OACzB1J,SAAS6C,WAGJ7C,SAASO,SASlB3B,QAAQgB,UAAUgG,MAAQ,WACxB,GAAI9D,WAcJ,OAbAvE,SAAQiC,QAAQ/B,KAAM,SAAS8L,MAAOC,KACzB,eAAPA,KAAkC,KAAVA,IAAI,KAC9B1H,QAAQ0H,KAAOD,SAKnB7L,EAAEC,MAAM,OAAQ,KAAM,KAAM,MAAO,YAAa,SAASqD,MACnDc,QAAQd,QACVc,QAAQd,MAAQtD,EAAEmM,OAAO/H,QAAQd,MAAM+D,MAAM,KAAM,WAIhDjD","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.each(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.baseURL(), Settings.activeUser()),\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    var collection = [];\n    if (data) {\n      // Each entry is spun up as an Account instance\n      angular.forEach(data, function(o, i) {\n        o.id = i;\n        collection[i] = new Account(o);\n      });\n    }\n    return collection;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this,\n        deferred = Account.$q.defer();\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      deferred.resolve(this.$mailboxes);\n    }\n    else {\n      Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$flattenMailboxes({reload: true});\n        deferred.resolve(_this.$mailboxes);\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        _visit = function(mailboxes) {\n          _.each(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if (o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && options.reload)) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      _this.$$flattenMailboxes = allMailboxes;\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    console.debug(mailbox);\n    console.debug(this.specialMailboxes);\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.pluck(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.pluck(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = false;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      \n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    this.$isLoading = true;\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return angular.isUndefined(filter.searchInput) || filter.searchInput.length === 0;\n        });\n        _.each(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually') {\n        var f = angular.bind(_this, Mailbox.prototype.$filter);\n        Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (!angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max);\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        deferred = Mailbox.$q.defer(),\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      deferred.resolve();\n      return deferred.promise;\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.pluck(children, 'id'), this.id);\n\n    this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.pluck(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n\n      deferred.resolve();\n    }, function(data) {\n      deferred.reject(data);\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    return Mailbox.$$resource.post(this.id, 'expunge');\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function() {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this,\n        deferred = Mailbox.$q.defer(),\n        promise;\n\n    promise = Mailbox.$$resource.remove(this.id);\n\n    promise.then(function() {\n      _this.$account.$getMailboxes({reload: true});\n      deferred.resolve(true);\n    }, function(data, status) {\n      deferred.reject(data);\n    });\n    return deferred.promise;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(uids) {\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invoke(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.object(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.each(_this.headers, function(data) {\n            var msg = _.object(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invoke(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.each(data, function(messageHeaders) {\n            messageHeaders = _.object(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   */\n  function Message(accountId, mailbox, futureMessageData) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.$showDetailedRecipients = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      angular.extend(this, futureMessageData);\n      this.id = this.$absolutePath();\n      this.$formatFullAddresses();\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n    this.selected = false;\n\n    //console.log(\"new message instance! \" + this.$tapette);\n    this.$tapette += 1;\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', '$sce', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, $sce, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $sce: $sce,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $tapette: 0\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query) {\n    var re = new RegExp(query, 'i');\n    return _.filter(_.keys(Message.$tags), function(tag) {\n      var value = Message.$tags[tag];\n      return value[0].search(re) != -1;\n    });\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    var path;\n\n    path = _.map(this.$mailbox.path.split('/'), function(component) {\n      return 'folder' + component.asCSSIdentifier();\n    });\n    path.splice(0, 0, this.accountId); // insert account ID\n    if (options && options.asDraft && this.draftId) {\n      path.push(this.draftId); // add draft ID\n    }\n    else {\n      path.push(this.uid); // add message UID\n    }\n\n    return path.join('/');\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = this.uid || -1;\n\n    if (oldUID != uid) {\n      this.uid = uid;\n      this.id = this.$absolutePath();\n      if (oldUID > -1 && this.$mailbox.uidsMap[oldUID]) {\n        this.$mailbox.uidsMap[uid] = this.$mailbox.uidsMap[oldUID];\n        this.$mailbox.uidsMap[oldUID] = null;\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.pluck(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.each(_this[type], function(data, i) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          // If we have \"Alice Foo\" as name, we grab \"Alice\"\n          if (data.name.split(' ').length)\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function() {\n    var _this = this;\n    var result = [];\n\n    // Build long representation of email addresses\n    _.each(['to', 'cc', 'bcc'], function(type) {\n      _.each(_this[type], function(data, i) {\n        result.push(data.shortname);\n      });\n    });\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function showDetailedRecipients\n   * @memberof Message.prototype\n   * @desc Mark the message to show all to/cc recipients.\n   */\n  Message.prototype.showDetailedRecipients = function() {\n    this.$showDetailedRecipients = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer and UIxMailPartMessageViewer\n          else if (angular.isArray(part.content)) {\n            _.each(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent = (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                }\n                part.content = Message.$sce.trustAs('html', part.unsafeContent.innerHTML);\n              }\n              else {\n                part.content = Message.$sce.trustAs('html', part.safeContent);\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.each(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = Message.$sce.trustAs('html', part.safeContent);\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.id, 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.id, path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.id, 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.id, action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function() {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.id, 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.id, action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var data = angular.copy(this.editable),\n        deferred = Message.$q.defer();\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        deferred.resolve(data);\n      }\n      else {\n        deferred.reject(data);\n      }\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this,\n        deferred = Message.$q.defer();\n\n    // Expose the promise\n    this.$futureMessageData = futureMessageData;\n\n    // Resolve the promise\n    this.$futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.id = _this.$absolutePath();\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        deferred.resolve(_this);\n      });\n      if (!_this.isread) {\n        Message.$$resource.fetch(_this.id, 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      Message.$log.error(_this.error);\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function() {\n    var message = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        message[key] = value;\n      }\n    });\n\n    // Format addresses as arrays\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      if (message[type])\n        message[type] = _.invoke(message[type].split(','), 'trim');\n    });\n\n    //Message.$log.debug(JSON.stringify(message, undefined, 2));\n    return message;\n  };\n\n})();\n"]}