{"version":3,"file":"Mailer.services.js","sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","each","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Mailbox","Message","$$resource","activeUser","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","forEach","i","id","prototype","$getMailboxes","options","_this","deferred","defer","$mailboxes","reload","$find","$flattenMailboxes","resolve","promise","allMailboxes","_visit","mailboxes","push","children","length","$$flattenMailboxes","$getMailboxByType","type","mailbox","_find","find","console","specialMailboxes","$getMailboxByPath","path","$newMailbox","name","post","toString","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","$addDelegate","user","param","uid","indexOf","pluck","delegates","users","status","reject","l","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","Preferences","PRELOAD","$$Acl","$Preferences","$query","sort","asc","selectedFolder","$refreshTimeout","ready","settings","Mail","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","index","map","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","isUndefined","$shadowData","$omit","getLength","getItemAtIndex","$loadMessage","$selectedCount","count","filter","selected","$filter","sortingAttributes","filters","isDefined","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","messageId","endIndex","uids","futureHeadersData","startIndex","max","loaded","subject","Math","min","loading","$unwrapHeaders","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","flags","operation","msgUIDs","$delete","remove","$deleteMessages","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","invoke","threaded","reduce","msgs","msg","object","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","$showDetailedRecipients","to","cc","bcc","$formatFullAddresses","$sce","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","filterTags","query","re","RegExp","keys","tag","search","draftId","$setUID","oldUID","shortname","replace","image","$shortRecipients","result","$shortAddress","address","loadUnsafeContent","showDetailedRecipients","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","attr","removeAttr","trustAs","participants","participant","compile","$editableContent","text","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","response","$send","$futureMessageData","isread","MailboxController","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","focus","Dialog","selectMessage","go","mailboxId","unselectMessages","vm","confirmDeleteSelectedMessages","confirm","selectedMessages","selectedUIDs","difference","alert","copySelectedMessages","saveSelectedMessages","window","location","href","ApplicationBaseURL","selectAll","markSelectedMessagesAsFlagged","d","markSelectedMessagesAsUnread","field","sortedBy","cancelSearch","mode","newMessage","$event","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","accounts","stateMessage","stateRecipients","service","$inject","MailboxesController","User","newFolder","parentFolder","prompt","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","selectFolder","saveFolder","compactFolder","emptyTrashFolder","exportMails","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","includes","current","MessageController","doDelete","findIndex","showMailEditor","recipients","close","selectedMessage","reply","replyAll","forward","edit","recipient","saveMessage","viewRawSource","MessageRawSourceDialogController","scope","template","tags","$watchCollection","oldTags","newTags","MessageEditorController","$stateParams","FileUploader","AddressBook","autosave","send","contactFilter","$filterAll","addRecipient","isString","$$fullname","$$email","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideCc","hideBcc","flatten","uploader","url","autoUpload","alias","onProgressItem","item","progress","onSuccessItem","onCancelItem","file","removeFromQueue","onErrorItem","actionName","msgObject","union","localeCode","LocaleCode"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.each(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    return collection;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this,\n        deferred = Account.$q.defer();\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      deferred.resolve(this.$mailboxes);\n    }\n    else {\n      Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$flattenMailboxes({reload: true});\n        deferred.resolve(_this.$mailboxes);\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        _visit = function(mailboxes) {\n          _.each(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if (o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && options.reload)) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      _this.$$flattenMailboxes = allMailboxes;\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    console.debug(mailbox);\n    console.debug(this.specialMailboxes);\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.pluck(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.pluck(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    this.$isLoading = true;\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return angular.isUndefined(filter.searchInput) || filter.searchInput.length === 0;\n        });\n        _.each(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually') {\n        var f = angular.bind(_this, Mailbox.prototype.$filter);\n        Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (!angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max);\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        deferred = Mailbox.$q.defer(),\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      deferred.resolve();\n      return deferred.promise;\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.pluck(children, 'id'), this.id);\n\n    this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.pluck(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n\n      deferred.resolve();\n    }, function(data) {\n      deferred.reject(data);\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    return Mailbox.$$resource.post(this.id, 'expunge');\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function() {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this,\n        deferred = Mailbox.$q.defer(),\n        promise;\n\n    promise = Mailbox.$$resource.remove(this.id);\n\n    promise.then(function() {\n      _this.$account.$getMailboxes({reload: true});\n      deferred.resolve(true);\n    }, function(data, status) {\n      deferred.reject(data);\n    });\n    return deferred.promise;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(uids) {\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invoke(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.object(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.each(_this.headers, function(data) {\n            var msg = _.object(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invoke(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.each(data, function(messageHeaders) {\n            messageHeaders = _.object(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.$showDetailedRecipients = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isDefined(lazy) && lazy) {\n        this.uid = futureMessageData.uid;\n      }\n      else {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', '$sce', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, $sce, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $sce: $sce,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser())\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query) {\n    var re = new RegExp(query, 'i');\n    return _.filter(_.keys(Message.$tags), function(tag) {\n      var value = Message.$tags[tag];\n      return value[0].search(re) != -1;\n    });\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    if (angular.isUndefined(this.id)) {\n      var path;\n      path = _.map(this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, this.accountId); // insert account ID\n      if (options && options.asDraft && this.draftId) {\n        path.push(this.draftId); // add draft ID\n      }\n      else {\n        path.push(this.uid); // add message UID\n      }\n\n      this.id = path.join('/');\n    }\n\n    return this.id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = this.uid || -1;\n\n    if (oldUID != uid) {\n      this.uid = uid;\n      if (oldUID > -1 && this.$mailbox.uidsMap[oldUID]) {\n        this.$mailbox.uidsMap[uid] = this.$mailbox.uidsMap[oldUID];\n        this.$mailbox.uidsMap[oldUID] = null;\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.pluck(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.each(_this[type], function(data, i) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          // If we have \"Alice Foo\" as name, we grab \"Alice\"\n          if (data.name.split(' ').length)\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function() {\n    var _this = this;\n    var result = [];\n\n    // Build long representation of email addresses\n    _.each(['to', 'cc', 'bcc'], function(type) {\n      _.each(_this[type], function(data, i) {\n        result.push(data.shortname);\n      });\n    });\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function showDetailedRecipients\n   * @memberof Message.prototype\n   * @desc Mark the message to show all to/cc recipients.\n   */\n  Message.prototype.showDetailedRecipients = function() {\n    this.$showDetailedRecipients = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer and UIxMailPartMessageViewer\n          else if (angular.isArray(part.content)) {\n            _.each(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent = (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                }\n                part.content = Message.$sce.trustAs('html', part.unsafeContent.innerHTML);\n              }\n              else {\n                part.content = Message.$sce.trustAs('html', part.safeContent);\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.each(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = Message.$sce.trustAs('html', part.safeContent);\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function() {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var data = angular.copy(this.editable),\n        deferred = Message.$q.defer();\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        deferred.resolve(data);\n      }\n      else {\n        deferred.reject(data);\n      }\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this,\n        deferred = Message.$q.defer();\n\n    // Expose the promise\n    this.$futureMessageData = futureMessageData;\n\n    // Resolve the promise\n    this.$futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        deferred.resolve(_this);\n      });\n      if (!_this.isread) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      Message.$log.error(_this.error);\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function() {\n    var message = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        message[key] = value;\n      }\n    });\n\n    // Format addresses as arrays\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      if (message[type])\n        message[type] = _.invoke(message[type].split(','), 'trim');\n    });\n\n    //Message.$log.debug(JSON.stringify(message, undefined, 2));\n    return message;\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$state', '$timeout', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($state, $timeout, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, focus, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    Mailbox.selectedFolder = stateMailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.unselectMessages = unselectMessages;\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.copySelectedMessages = copySelectedMessages;\n    // vm.moveSelectedMessages = moveSelectedMessages;\n    vm.saveSelectedMessages = saveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false };\n\n    function selectMessage(message) {\n      $state.go('mail.account.mailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path), messageId: message.uid});\n    }\n\n    function unselectMessages() {\n      _.each(vm.selectedFolder.$messages, function(message) { message.selected = false; });\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'))\n        .then(function() {\n          // User confirmed the deletion\n          var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n          var selectedUIDs = _.pluck(selectedMessages, 'uid');\n          vm.selectedFolder.$deleteMessages(selectedUIDs).then(function() {\n            // Decrement the unseenCount accordingly\n            var unseenCount = _.filter(selectedMessages, function(message) { return !message.isread; });\n            vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n            vm.selectedFolder.unseenCount =- unseenCount;\n          },  function(error) {\n            Dialog.alert(l('Error'), error);\n          });\n        });\n    }\n\n    function copySelectedMessages(folder) {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      vm.selectedFolder.$copyMessages(selectedUIDs, '/' + folder).then(function() {\n        // TODO: refresh target mailbox?\n      }, function(error) {\n        Dialog.alert(l('Error'), error);\n      });\n    }\n\n    // function moveSelectedMessages(folder) {\n    //   var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected });\n    //   var selectedUIDs = _.pluck(selectedMessages, 'uid');\n    //   vm.selectedFolder.$moveMessages(selectedUIDs, '/' + folder).then(function() {\n    //     // TODO: refresh target mailbox?\n    //     vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n    //   });\n    // }\n\n    function saveSelectedMessages() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      window.location.href = ApplicationBaseURL + '/' + vm.selectedFolder.id + '/saveMessages?uid=' + selectedUIDs.join(\",\");\n    }\n\n    function selectAll() {\n      _.each(vm.selectedFolder.$messages, function(message) {\n        message.selected = true;\n      });\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, '\\\\Flagged', 'add').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isflagged = true;\n        });\n      });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, 'seen', 'remove').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isread = false;\n          vm.selectedFolder.unseenCount++;\n        });\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter();\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxController', MailboxController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$mdDialog', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $mdDialog, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.exportMails = exportMails;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    if ($state.current.name == 'mail' && vm.accounts.length > 0 && vm.accounts[0].$mailboxes.length > 0) {\n      // Redirect to first mailbox of first account if no mailbox is selected\n      account = vm.accounts[0];\n      mailbox = account.$mailboxes[0];\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder(account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n    }\n\n    function saveFolder(folder) {\n      folder.$rename();\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        // Success\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        // Success\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function exportMails(folder) {\n      window.location.href = ApplicationBaseURL + '/' + folder.id + '/exportFolder';\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      //if ($rootScope.currentFolder == folder)\n      //  return 'folder_open';\n\n      return {name: folder.name, icon: 'folder'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$scope', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox', 'Message'];\n  function MessageController($scope, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, focus, Dialog, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null;\n\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.doDelete = doDelete;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.newMessage = newMessage;\n    vm.saveMessage = saveMessage;\n    vm.viewRawSource = viewRawSource;\n\n    // Watch the message model \"flags\" attribute to remove on-the-fly a tag from the IMAP message\n    // when removed from the message viewer.\n    // TODO: this approach should be reviewed once md-chips supports ng-change.\n    $scope.$watchCollection('viewer.message.flags', function(oldTags, newTags) {\n      _.each(_.difference(newTags, oldTags), function(tag) {\n        vm.message.removeTag(tag);\n      });\n    });\n\n    function doDelete() {\n      stateMailbox.$deleteMessages([stateMessage.uid]).then(function() {\n        // Remove message from list of messages\n        var index = _.findIndex(stateMailbox.$messages, function(o) {\n          return o.uid == stateMessage.uid;\n        });\n        if (index != -1)\n          stateMailbox.$messages.splice(index, 1);\n        // Remove message object from scope\n        vm.message = null;\n        $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) });\n      });\n    }\n\n    function showMailEditor($event, message, recipients) {\n      if (messageDialog === null) {\n        if (!angular.isDefined(recipients))\n          recipients = [];\n\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: recipients\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) }).then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function newMessage($event, recipient) {\n      var message = vm.account.$newMessage();\n      showMailEditor($event, message, [recipient]);\n    }\n\n    function saveMessage() {\n      window.location.href = ApplicationBaseURL + '/' + vm.mailbox.id + '/saveMessages?uid=' + vm.message.uid;\n    }\n\n    function viewRawSource($event) {\n      Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n        $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          template: [\n            '<md-dialog flex=\"80\" flex-sm=\"100\" aria-label=\"' + l('View Message Source') + '\">',\n            '  <md-dialog-content>',\n            '    <pre>',\n            data,\n            '    </pre>',\n            '  </md-dialog-content>',\n            '  <div class=\"md-actions\">',\n            '    <md-button ng-click=\"close()\">' + l('Close') + '</md-button>',\n            '  </div>',\n            '</md-dialog>'\n          ].join(''),\n          controller: MessageRawSourceDialogController\n        });\n\n        /**\n         * @ngInject\n         */\n        MessageRawSourceDialogController.$inject = ['scope', '$mdDialog'];\n        function MessageRawSourceDialogController(scope, $mdDialog) {\n          scope.close = function() {\n            $mdDialog.hide();\n          };\n        }\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$stateParams', '$state', '$q', '$mdDialog', 'FileUploader', 'stateAccounts', 'stateMessage', 'stateRecipients', '$timeout', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox', 'AddressBook', 'Preferences'];\n  function MessageEditorController($stateParams, $state, $q, $mdDialog, FileUploader, stateAccounts, stateMessage, stateRecipients, $timeout, encodeUriFilter, focus, Dialog, Account, Mailbox, AddressBook, Preferences) {\n    var vm = this;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = true;\n    vm.hideBcc = true;\n    vm.cancel = cancel;\n    vm.send = send;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.pluck(_.flatten(_.pluck(stateAccounts, 'identities')), 'full');\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      onProgressItem: function(item, progress) {\n        console.debug(item); console.debug(progress);\n      },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload();\n        console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n    }\n\n    if (angular.isDefined(stateRecipients)) {\n      vm.message.editable.to = _.union(vm.message.editable.to, _.pluck(stateRecipients, 'full'));\n    }\n\n    function cancel() {\n      // TODO: delete draft?\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      $mdDialog.cancel();\n    }\n\n    function send() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        $mdDialog.hide();\n      }, function(data) {\n        Dialog.alert(l(data.status), l(data.message));\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query);\n    }\n\n    function addRecipient(user) {\n      var recipient = [];\n\n      if (angular.isString(user))\n        return user;\n      if (user.$$fullname)\n        recipient.push(user.$$fullname);\n      if (user.$$email)\n        recipient.push('<' + user.$$email + '>');\n\n      return recipient.join(' ');\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Select list based on user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageEditorController', MessageEditorController);                                    \n})();\n"]}