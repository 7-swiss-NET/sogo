{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","fetchAll","then","angular","extend","this","_","forEach","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","isDefined","$getMailboxes","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","i","id","$accounts","prototype","getLength","$flattenMailboxes","length","getItemAtIndex","index","expandedMailboxes","options","_this","$mailboxes","reload","$find","$expanded","ready","expandedFolders","_visit","mailboxes","indexOf","children","settings","Mail","ExpandedFolders","isString","fromJson","when","allMailboxes","push","all","$$flattenMailboxes","saveState","account","reduce","mailbox","post","$getMailboxByType","type","_find","find","$getMailboxByPath","path","$newMailbox","name","toString","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","isNew","$addDelegate","user","deferred","defer","param","uid","map","delegates","resolve","users","status","reject","promise","$removeDelegate","splice","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","quotas","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","$isNoInferiors","isNoInferiors","isUndefined","$shadowData","$omit","selectFolder","$lastVisibleIndex","max","$loadMessage","$selectedMessages","filter","selected","$selectedCount","isSelectedMessage","messageId","selectedMessage","$selectedMessage","$selectedMessageIndex","hasSelectedMessage","$filter","sortingAttributes","filters","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","loaded","subject","min","loading","$unwrapHeaders","flags","isNoSelect","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","messages","operation","msgUIDs","saveSelectedMessages","selectedMessages","selectedUIDs","download","exportFolder","$delete","remove","$_deleteMessages","unseen","firstIndex","isread","forEachRight","selectedIndex","findIndex","$deleteMessages","$markOrUnMarkMessagesAsJunk","method","$copyMessages","folder","$moveMessages","$reset","value","key","save","response","error","$futureMailboxData","headers","$topIndex","invokeMap","threaded","msgs","msg","zipObject","isError","j","messageHeaders","$toggleSubscribe","subscribed","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Message_STATUS","STATUS","$avatar","avatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","NOT_LOADED","DELAYED_LOADING","LOADING","LOADED","DELAYED_MS","filterTags","query","excludedTags","re","RegExp","results","keys","tag","pair","search","includes","color","buildPath","nocache","draftId","$setUID","oldUID","attr","constructor","shortname","first","last","replace","image","$shortRecipients","result","count","total","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","removeAttr","compile","$editableContent","from","toLowerCase","text","$plainContent","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$loaded","useCache","$futureMessageData","$reply","$newDraft","$replyAll","$forward","origin","$send","startsWith","isanswered","isforwarded","privateAttributes","saveMessage","VirtualMailbox","setMailboxes","startSearch","params","finally","stopSearch","resetSelectedMessage","len","k","transform","messagesMap","sum","allMessages","promises","assign","flatten","MailboxController","$window","$scope","$state","$mdDialog","$mdToast","stateAccounts","stateAccount","stateMailbox","sgHotkeys","encodeUriFilter","focus","Dialog","_registerHotkeys","createHotkey","callback","newMessage","toggleMessageSelection","_nextMessage","preventInClass","_previousMessage","_addNextMessageToSelection","_addPreviousMessageToSelection","confirmDeleteSelectedMessages","hotkeys","registerHotkey","_compactBeforeUnload","event","vm","field","sortedBy","searchMode","mode","cancelSearch","$event","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","stateMessage","stateRecipients","selectMessage","preventDefault","go","mailboxId","multiple","stopPropagation","_currentMailboxes","_unselectMessage","nextMessage","previousMessage","nextIndex","console","warn","size","confirm","ok","deleteSelectedMessage","markOrUnMarkMessagesAsJunk","moveSelectedMessage","dstFolder","copySelectedMessages","simple","position","hideDelay","moveSelectedMessages","selectAll","unselectMessages","markSelectedMessagesAsFlagged","markSelectedMessagesAsUnread","defaultWindowTitle","$mailboxController","service","accounts","on","$on","off","deregisterHotkey","$watch","title","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","$inject","decorator","MailboxesController","$mdMedia","$mdSidenav","sgConstant","User","showAdvancedSearch","showingAdvancedSearch","close","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","toggleAccountState","triggerHandler","subscribe","SubscriptionsDialogController","srcApp","srcAccount","app","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","userFilter","closeModal","hide","removeUser","catch","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","saveFolder","compactFolder","emptyTrashFolder","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","special","setFolderAs","refreshUnseenCount","unseenCountFolders","isDroppableFolder","srcFolder","dragSelectedMessages","dstId","clearMessageView","success","","showSubscribedOnly","SOGoMailShowSubscribedFoldersOnly","MessageController","sgSettings","Calendar","Component","deleteMessage","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","toggleDetailedRecipients","$showDetailedRecipients","filterMailtoLinks","href","target","tagName","attributes","exec","decodeURIComponent","state","parentCtrls","closePopup","showMailEditor","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","editableContent","toggleRawSource","showRawSource","$rawSource","print","convertToEvent","convertToComponent","convertToTask","componentData","pid","$defaultCalendar","summary","comment","capitalize","stateComponent","tags","showFlags","$watchCollection","newTags","oldTags","wasflagged","_newTags","_oldTags","isObject","difference","MessageEditorController","$stateParams","$mdConstant","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","addAttachments","fileItem","attrs","mimetype","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","autosave","send","sendState","errorMessage","statusText","contactFilter","$filterAll","cards","explodedCards","manyCards","card","uniqBy","$$fullname","$$email","addRecipient","contact","recipients","recipient","list","$isList","expandable","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideCc","hideBcc","recipientSeparatorKeys","KEY_CODE","ENTER","TAB","COMMA","SEMICOLON","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","destroy","actionName","msgObject","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode"],"mappings":"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","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n    function Account(futureAccountData, fetchAll) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.forEach(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n\n    this.fetchAll = false;\n\n    // Check if we're displaying the IMAP subscription management dialog\n    if (angular.isDefined(fetchAll) && fetchAll) {\n      this.fetchAll = true;\n      this.$getMailboxes();\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    Account.$accounts = collection;\n\n    return collection;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of mailboxes in the account\n   */\n  Account.prototype.getLength = function() {\n    return this.$flattenMailboxes().length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the mailbox at the specified index\n   */\n  Account.prototype.getItemAtIndex = function(index) {\n    var expandedMailboxes;\n\n    expandedMailboxes = this.$flattenMailboxes();\n    if (index >= 0 && index < expandedMailboxes.length)\n      return expandedMailboxes[index];\n\n    return null;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$expanded = false;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            _this.$expanded = (expandedFolders.indexOf('/' + _this.id) >= 0);\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          if (Account.$accounts)\n            _this.$expanded |= (Account.$accounts.length == 1); // Always expand single account\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - the following boolean attributes are available:\n   *   - reload: rebuild the flatten array of mailboxes from the original tree representation (this.$mailboxes)\n   *   - all: return all mailboxes, ignoring their expanstion state\n   *   - saveState: save expansion state of mailboxes to the server\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.forEach(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          // Save expansion state of mailboxes to the server\n          _.forEach(Account.$accounts, function(account) {\n            if (account.$expanded) {\n              expandedMailboxes.push('/' + account.id);\n            }\n            _.reduce(account.$$flattenMailboxes, function(expandedFolders, mailbox) {\n              if (mailbox.$expanded) {\n                expandedFolders.push('/' + mailbox.id);\n              }\n              return expandedFolders;\n            }, expandedMailboxes);\n          });\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        message.isNew = true;\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.map(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.map(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    if (account.fetchAll)\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'viewAll');\n    else\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    this.$isNoInferiors = this.isNoInferiors();\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof Mailbox.prototype\n   * @desc Mark the folder as selected in the constructor unless virtual mode is active\n   */\n  Mailbox.prototype.selectFolder = function() {\n    if (!Mailbox.$virtualMode)\n      Mailbox.selectedFolder = this;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Return the messages selected by the user.\n   * @returns Message instances\n   */\n  Mailbox.prototype.$selectedMessages = function() {\n    return _.filter(this.$messages, function(message) { return message.selected; });\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    return this.$selectedMessages().length;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is displayed in the detailed view.\n   * @param {string} messageId\n   * @returns true if the specified message is displayed\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function $selectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Return the currently visible message.\n   * @returns a Message instance or undefined if no message is displayed\n   */\n  Mailbox.prototype.$selectedMessage = function() {\n    var _this = this;\n\n    return _.find(this.$messages, function(message) { return message.uid == _this.selectedMessage; });\n  };\n\n  /**\n   * @function $selectedMessageIndex\n   * @memberof Mailbox.prototype\n   * @desc Return the index of the currently visible message.\n   * @returns a number or undefined if no message is selected\n   */\n  Mailbox.prototype.$selectedMessageIndex = function() {\n    return this.uidsMap[this.selectedMessage];\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if a message is selected.\n   * @returns true if the a message is selected\n   */\n  Mailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(this.selectedMessage);\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return !filter.searchInput || filter.searchInput.length === 0;\n        });\n        // Decompose filters that match two fields\n        _.forEach(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter, null, filters);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        index,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (angular.isDefined(this.$messages[endIndex].subject) ||\n          angular.isDefined(this.$messages[endIndex].loading)) {\n        index = Math.max(startIndex - Mailbox.PRELOAD.LOOKAHEAD, 0);\n        if (!angular.isDefined(this.$messages[index].subject) &&\n            !angular.isDefined(this.$messages[index].loading)) {\n          // Previous messages not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - Mailbox.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next messages not load; preload more headers further down\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max - 1);\n\n      if (!angular.isDefined(this.$messages[startIndex].subject) &&\n          !angular.isDefined(this.$messages[startIndex].loading) ||\n          !angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function isNoInferiors\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can contain submailboxes\n   * @returns true if the mailbox can not contain submailboxes\n   */\n  Mailbox.prototype.isNoInferiors = function() {\n    return this.flags.indexOf('noinferiors') >= 0;\n  };\n\n  /**\n   * @function isNoSelect\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can be selected\n   * @returns true if the mailbox can not be selected\n   */\n  Mailbox.prototype.isNoSelect = function() {\n    return this.flags.indexOf('noselect') >= 0;\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.map(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.map(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(messages, flags, operation) {\n    var data = {msgUIDs: _.map(messages, 'uid'),\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data).then(function() {\n      return messages;\n    });\n  };\n\n  /**\n   * @function saveSelectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Download the selected messages\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.saveSelectedMessages = function() {\n    var selectedMessages, selectedUIDs;\n\n    selectedMessages = _.filter(this.$messages, function(message) { return message.selected; });\n    selectedUIDs = _.map(selectedMessages, 'uid');\n\n    return Mailbox.$$resource.download(this.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n  /**\n   * @function exportFolder\n   * @memberof Mailbox.prototype\n   * @desc Export this mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.exportFolder = function() {\n    return Mailbox.$$resource.download(this.id, 'exportFolder');\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.remove(this.id)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $_deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from Mailbox object.\n   * @param {string[]} uids - the messages uids\n   * @param {object[]} messages - the Message instances\n   * @return the index of the first deleted message\n   */\n  Mailbox.prototype.$_deleteMessages = function(uids, messages) {\n    var _this = this, selectedUIDs, _$messages, unseen, firstIndex = this.$messages.length;\n\n    // Decrement the unseen count\n    unseen = _.filter(messages, function(message, i) { return !message.isread; });\n    this.unseenCount -= unseen.length;\n\n    // Remove messages from $messages and uidsMap\n    _.forEachRight(this.$messages, function(message, index) {\n      var selectedIndex = _.findIndex(uids, function(uid) {\n        return message.uid == uid;\n      });\n      if (selectedIndex > -1) {\n        uids.splice(selectedIndex, 1);\n        delete _this.uidsMap[message.uid];\n        if (message.uid == _this.selectedMessage)\n          delete _this.selectedMessage;\n        _this.$messages.splice(index, 1);\n        if (index < firstIndex)\n          firstIndex = index;\n      }\n      else {\n        _this.uidsMap[message.uid] -= uids.length;\n      }\n    });\n\n    // Return the index of the first deleted message\n    return firstIndex;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof Mailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messages) {\n    var _this = this,\n        uids = _.map(messages, 'uid'),\n        method = (this.type == 'junk' ? 'markMessagesAsNotJunk' : 'markMessagesAsJunk');\n\n    return Mailbox.$$resource.post(this.id, method, {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(messages, folder) {\n    var _this = this,\n        uids = _.map(messages, 'uid');\n\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(messages, folder) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder})\n      .then(function() {\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this.$shadowData, function(value, key) {\n      delete _this[key];\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(response) {\n      Mailbox.$log.error(JSON.stringify(response.data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n      return response.data;\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key != 'headers' &&\n          key != 'uids' &&\n          key != 'uidsMap' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        if (!data.uids || _this.$topIndex > data.uids.length - 1)\n          _this.$topIndex = 0;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.zipObject(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.forEach(_this.headers, function(data) {\n            var msg = _.zipObject(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(messageHeaders) {\n            messageHeaders = _.zipObject(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n  /**\n   * @function $toggleSubscribe\n   * @memberof Mailbox.prototype\n   * @desc Subscribe or unsubscribe to a mailbox\n   */\n  Mailbox.prototype.$toggleSubscribe = function() {\n    if (this.subscribed)\n      return Mailbox.$$resource.post(this.id, 'subscribe');\n\n    return Mailbox.$$resource.post(this.id, 'unsubscribe');\n    };\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'sgMessage_STATUS', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Message_STATUS, Resource, Preferences) {\n    angular.extend(Message, {\n      STATUS: Message_STATUS,\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $avatar: angular.bind(Preferences, Preferences.avatar)\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMessage_STATUS', {\n      NOT_LOADED:      0,\n      DELAYED_LOADING: 1,\n      LOADING:         2,\n      LOADED:          3,\n      DELAYED_MS:      300\n    })\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query, excludedTags) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        if (!_.includes(excludedTags, tag))\n          results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    var _this = this, id = this.id;\n\n    function buildPath() {\n      var path;\n      path = _.map(_this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, _this.accountId); // insert account ID\n      return path.join('/');\n    }\n\n    if (angular.isUndefined(this.id) || options && options.nocache) {\n      this.id = buildPath() + '/' + this.uid; // add message UID\n      id = this.id;\n    }\n    if (options && options.asDraft && this.draftId) {\n      id = buildPath() + '/' + this.draftId; // add draft ID\n    }\n\n    return id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1), _this = this, index;\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      this.$absolutePath({nocache: true});\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          index = this.$mailbox.uidsMap[oldUID];\n          this.$mailbox.uidsMap[uid] = index;\n          delete this.$mailbox.uidsMap[oldUID];\n\n          // Update messages list of mailbox\n          _.forEach(['from', 'to', 'subject'], function(attr) {\n            _this.$mailbox.$messages[index][attr] = _this[attr];\n          });\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates the avatar URL for each email address and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.map(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.forEach(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.forEach(_this[type], function(data) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          if (data.name.length < 10)\n            // Name is already short\n            data.shortname = data.name;\n          else if (data.name.split(' ').length)\n            // If we have \"Alice Foo\" or \"Foo, Alice\" as name, we grab \"Alice\"\n            data.shortname = _.first(_.last(data.name.split(/, */)).split(/ +/)).replace('\\'','');\n        }\n        else if (data.email) {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        data.image = Message.$avatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function(max) {\n    var _this = this, result = [], count = 0, total = 0;\n\n    // Build short representation of email addresses\n    _.forEach(['to', 'cc', 'bcc'], function(type) {\n      total += _this[type]? _this[type].length : 0;\n      _.forEach(_this[type], function(data, i) {\n        if (count < max)\n          result.push(data.shortname);\n        count++;\n      });\n    });\n\n    if (total > max)\n      result.push(l('and %{0} more...', (total - max)));\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], _.bind(function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, this), recipientsCount);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.forEach(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n\n    if (this.parts)\n      _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        // Try to match a known account identity from the specified \"from\" address\n        var identity = _.find(_this.$mailbox.$account.identities, function(identity) {\n          return data.from.toLowerCase().indexOf(identity.email) !== -1;\n        });\n        if (identity)\n          data.from = identity.full;\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function $plainContent\n   * @memberof Message.prototype\n   * @returns the a plain text representation of the subject and body\n   */\n  Message.prototype.$plainContent = function() {\n    return Message.$$resource.fetch(this.$absolutePath(), 'viewplain');\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $isLoading\n   * @memberof Message.prototype\n   * @returns true if the Message content is still being retrieved from server after a specific delay\n   * @see sgMessage_STATUS\n   */\n  Message.prototype.$isLoading = function() {\n    return this.$loaded == Message.STATUS.LOADING;\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @param {object} [options] - set {useCache: true} to use already fetched data\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var _this = this, futureMessageData;\n\n    if (options && options.useCache && this.$futureMessageData) {\n      if (!this.isread) {\n        Message.$$resource.fetch(this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return this;\n    }\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n      _this.isNew = false;\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable);\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(response) {\n      if (response.status == 'success') {\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n        return response;\n      }\n      else {\n        return Message.$q.reject(response.data);\n      }\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Message is not loaded yet\n    this.$loaded = Message.STATUS.DELAYED_LOADING;\n    Message.$timeout(function() {\n      if (_this.$loaded != Message.STATUS.LOADED)\n        _this.$loaded = Message.STATUS.LOADING;\n    }, Message.STATUS.DELAYED_MS);\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        _this.isread = true;\n        _this.$mailbox.unseenCount--;\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        _this.$loaded = Message.STATUS.LOADED;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function(options) {\n    var message = {},\n        privateAttributes = options && options.privateAttributes;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$' || privateAttributes) {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n  /**\n   * @function saveMessage\n   * @memberof Message.prototype\n   * @desc Download the current message\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.saveMessage = function() {\n    var selectedUIDs;\n\n    selectedUIDs = [ this.uid ];\n\n    return Message.$$resource.download(this.$mailbox.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() {\n      _this.$isLoading = false;\n    });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof VirtualMailbox.prototype\n   * @desc A no-op for virtual mailbox\n   */\n  VirtualMailbox.prototype.selectFolder = function() {\n    return;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.forEach(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if a message is selected among the resulting mailboxes\n   * @returns true if one message is selected\n   */\n  VirtualMailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return angular.isDefined(mailbox.selectedMessage);\n    }));\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Return an associative array of the selected messages for each mailbox. Keys are the mailboxes ids.\n   * @returns an associative array\n   */\n  VirtualMailbox.prototype.$selectedMessages = function() {\n    var messagesMap = {};\n    return _.transform(this.$mailboxes, function(messagesMap, mailbox) {\n      messagesMap[mailbox.id] = mailbox.$selectedMessages();\n    }, {});\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    return _.sum(_.invokeMap(this.$mailboxes, '$selectedCount'));\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @param {object} messagesMap\n   * @param {array} flags\n   * @param {string} operation\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(messagesMap, flags, operation) {\n    var data = {\n      flags: flags,\n      operation: operation\n    };\n    var allMessages = [];\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var uids = _.map(messages, 'uid');\n        allMessages.push(messages);\n        var promise = VirtualMailbox.$$resource.post(id, 'addOrRemoveLabel', _.assign(data, {msgUIDs: uids}));\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises).then(function() {\n      return _.flatten(allMessages);\n    });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$deleteMessages(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof VirtualMailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$markOrUnMarkMessagesAsJunk(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$copyMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$moveMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$scope', '$timeout', '$q', '$state', '$mdDialog', '$mdToast', 'stateAccounts', 'stateAccount', 'stateMailbox', 'sgHotkeys', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($window, $scope, $timeout, $q, $state, $mdDialog, $mdToast, stateAccounts, stateAccount, stateMailbox, sgHotkeys, encodeUriFilter, focus, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null,\n        defaultWindowTitle = angular.element($window.document).find('title').attr('sg-default') || \"SOGo\",\n        hotkeys = [];\n\n    // Expose controller for eventual popup windows\n    $window.$mailboxController = vm;\n\n    stateMailbox.selectFolder();\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.searchMode = searchMode;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false, multiple: 0 };\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.markOrUnMarkMessagesAsJunk = markOrUnMarkMessagesAsJunk;\n    vm.copySelectedMessages = copySelectedMessages;\n    vm.moveSelectedMessages = moveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.unselectMessages = unselectMessages;\n\n    // Expunge mailbox when leaving the Mail module\n    angular.element($window).on('beforeunload', _compactBeforeUnload);\n    $scope.$on('$destroy', function() {\n      angular.element($window).off('beforeunload', _compactBeforeUnload);\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n    // Update window's title with unseen messages count of selected mailbox\n    $scope.$watch(function() { return vm.selectedFolder.unseenCount; }, function(unseenCount) {\n      var title = defaultWindowTitle + ' - ';\n      if (unseenCount)\n        title += '(' + unseenCount + ') ';\n      title += vm.selectedFolder.name;\n      $window.document.title = title;\n    });\n\n    _registerHotkeys(hotkeys);\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: 'c',\n        callback: newMessage\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'space',\n        callback: toggleMessageSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'up',\n        callback: _nextMessage,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'down',\n        callback: _previousMessage,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+up',\n        callback: _addNextMessageToSelection,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+down',\n        callback: _addPreviousMessageToSelection,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        callback: confirmDeleteSelectedMessages\n      }));\n\n      // Register the hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function _compactBeforeUnload(event) {\n      return vm.selectedFolder.$compact();\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function searchMode() {\n      vm.mode.search = true;\n      focus('search');\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter().then(function() {\n        if (vm.selectedFolder.selectedMessage) {\n          $timeout(function() {\n            vm.selectedFolder.$topIndex = vm.selectedFolder.uidsMap[vm.selectedFolder.selectedMessage];\n          });\n        }\n      });\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n\n    /**\n     * User has pressed up arrow key\n     */\n    function _nextMessage($event) {\n      var index = vm.selectedFolder.$selectedMessageIndex();\n\n      if (angular.isDefined(index))\n        index--;\n      else\n        // No message is selected, show oldest message\n        index = vm.selectedFolder.getLength() - 1;\n\n      if (index > -1)\n        selectMessage(vm.selectedFolder.$messages[index]);\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    /**\n     * User has pressed the down arrow key\n     */\n    function _previousMessage($event) {\n      var index = vm.selectedFolder.$selectedMessageIndex();\n\n      if (angular.isDefined(index))\n        index++;\n      else\n        // No message is selected, show newest\n        index = 0;\n\n      if (index < vm.selectedFolder.getLength())\n        selectMessage(vm.selectedFolder.$messages[index]);\n      else\n        index = -1;\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    function _addNextMessageToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedMessage()) {\n        index = _nextMessage($event);\n        if (index >= 0)\n          toggleMessageSelection($event, vm.selectedFolder.$messages[index]);\n      }\n    }\n\n    function _addPreviousMessageToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedMessage()) {\n        index = _previousMessage($event);\n        if (index >= 0)\n          toggleMessageSelection($event, vm.selectedFolder.$messages[index]);\n      }\n    }\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      if (!message) message = vm.selectedFolder.$selectedMessage();\n      message.selected = !message.selected;\n      vm.mode.multiple += message.selected? 1 : -1;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    /**\n     * Batch operations\n     */\n\n    function _currentMailboxes() {\n      if (Mailbox.$virtualMode)\n        return vm.selectedFolder.$mailboxes;\n      else\n        return [vm.selectedFolder];\n    }\n\n    function _unselectMessage(message, index) {\n      // Unselect current message and cleverly load the next message.\n      // This function must not be called in virtual mode.\n      var nextMessage, previousMessage, nextIndex = index;\n      vm.mode.multiple = vm.selectedFolder.$selectedCount();\n      if (message) {\n        // Select either the next or previous message\n        if (index > 0) {\n          nextIndex -= 1;\n          nextMessage = vm.selectedFolder.$messages[nextIndex];\n        }\n        if (index < vm.selectedFolder.$messages.length)\n          previousMessage = vm.selectedFolder.$messages[index];\n        if (nextMessage) {\n          if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n        }\n        else if (previousMessage) {\n          nextIndex = index;\n          nextMessage = previousMessage;\n        }\n        if (nextMessage) {\n          vm.selectedFolder.$topIndex = nextIndex;\n          $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n        }\n        else {\n          $state.go('mail.account.mailbox');\n        }\n      }\n      else {\n        $timeout(function() {\n          console.warn('go to mailbox');\n          $state.go('mail.account.mailbox');\n        });\n      }\n    }\n\n    function confirmDeleteSelectedMessages($event) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n\n      if (_.size(selectedMessages) > 0)\n        Dialog.confirm(l('Warning'),\n                       l('Are you sure you want to delete the selected messages?'),\n                       { ok: l('Delete') })\n        .then(function() {\n          var deleteSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n          vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (deleteSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(deleteSelectedMessage, index);\n            }\n          });\n        });\n\n      $event.preventDefault();\n    }\n\n    function markOrUnMarkMessagesAsJunk() {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$markOrUnMarkMessagesAsJunk(selectedMessages).then(function() {\n          var dstFolder = '/' + vm.account.id + '/folderINBOX';\n          if (vm.selectedFolder.type != 'junk') {\n            dstFolder = '/' + vm.account.$getMailboxByType('junk').id;\n          }\n          vm.selectedFolder.$moveMessages(selectedMessages, dstFolder).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (moveSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(moveSelectedMessage, index);\n            }\n          });\n        });\n    }\n\n    function copySelectedMessages(dstFolder) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$copyMessages(selectedMessages, '/' + dstFolder).then(function() {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) copied', vm.selectedFolder.$selectedCount()))\n              .position('top right')\n              .hideDelay(2000));\n        });\n    }\n\n    function moveSelectedMessages(dstFolder) {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      var count = vm.selectedFolder.$selectedCount();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$moveMessages(selectedMessages, '/' + dstFolder).then(function(index) {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) moved', count))\n              .position('top right')\n              .hideDelay(2000));\n          if (Mailbox.$virtualMode) {\n            // When performing an advanced search, we refresh the view if the selected message\n            // was moved, but only once all promises have completed.\n            if (moveSelectedMessage)\n              $state.go('mail.account.virtualMailbox');\n          }\n          else {\n            // In normal mode, we immediately unselect the selected message.\n            _unselectMessage(moveSelectedMessage, index);\n          }\n        });\n    }\n\n    function selectAll() {\n      var count = 0;\n      _.forEach(_currentMailboxes(), function(folder) {\n        var i = 0, length = folder.$messages.length;\n        for (; i < length; i++)\n          folder.$messages[i].selected = true;\n        count += length;\n      });\n      vm.mode.multiple = count;\n    }\n\n    function unselectMessages() {\n      _.forEach(_currentMailboxes(), function(folder) {\n        _.forEach(folder.$messages, function(message) {\n          message.selected = false;\n        });\n      });\n      vm.mode.multiple = 0;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$flagMessages(selectedMessages, '\\\\Flagged', 'add').then(function(messages) {\n          _.forEach(messages, function(message) {\n            message.isflagged = true;\n          });\n        });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$flagMessages(selectedMessages, 'seen', 'remove').then(function(messages) {\n          _.forEach(messages, function(message) {\n            message.isread = false;\n            message.$mailbox.unseenCount++;\n          });\n        });\n    }\n\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: js; indent-tabs-mode: nil; js-indent-level: 2; -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgConstant', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, sgConstant, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.toggleAccountState = toggleAccountState;\n    vm.subscribe = subscribe;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n    vm.isDroppableFolder = isDroppableFolder;\n    vm.dragSelectedMessages = dragSelectedMessages;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    Preferences.ready().then(function() {\n      vm.showSubscribedOnly = Preferences.defaults.SOGoMailShowSubscribedFoldersOnly;\n    });\n\n    vm.refreshUnseenCount();\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.forEach(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function toggleAccountState(account) {\n      account.$expanded = !account.$expanded;\n      account.$flattenMailboxes({ reload: true, saveState: true });\n      // Fire a window resize to recompute the virtual-repeater.\n      // This is a fix until the following issue is officially resolved:\n      // https://github.com/angular/material/issues/7309\n      $timeout(function() {\n        angular.element($window).triggerHandler('resize');\n      }, 150);\n    }\n\n    function subscribe(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/subscribe',\n        controller: SubscriptionsDialogController,\n        controllerAs: 'subscriptions',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          srcApp: vm,\n          srcAccount: account\n        }\n      }).finally(function() {\n          account.$getMailboxes({reload: true});\n      });\n\n      /**\n       * @ngInject\n       */\n      SubscriptionsDialogController.$inject = ['$scope', '$mdDialog', 'srcApp', 'srcAccount'];\n      function SubscriptionsDialogController($scope, $mdDialog, srcApp, srcAccount) {\n        var vm = this;\n\n        vm.app = srcApp;\n        vm.account = new Account({id: srcAccount.id,\n                                  name: srcAccount.name},\n                                 true);\n        vm.close = close;\n\n        function close() {\n          $mdDialog.cancel();\n        }\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder($event, account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Trash emptied'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail.account.inbox');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox', special: true};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts', special: true};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send', special: true};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete', special: true};\n      else if (folder.type == 'junk')\n        return {name: l('JunkFolderName'), icon: 'thumb_down', special: true};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared', special: true};\n\n      return {name: folder.name, icon: 'folder_open', special: false};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = $window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    function isDroppableFolder(srcFolder, dstFolder) {\n      return (dstFolder.id != srcFolder.id) && !dstFolder.isNoSelect();\n    }\n\n    function dragSelectedMessages(srcFolder, dstFolder, mode) {\n      var dstId, messages, uids, clearMessageView, promise, success;\n\n      dstId = '/' + dstFolder.id;\n      messages = srcFolder.$selectedMessages();\n      if (messages.length === 0)\n        messages = [srcFolder.$selectedMessage()];\n      uids = _.map(messages, 'uid');\n      clearMessageView = (srcFolder.selectedMessage && uids.indexOf(srcFolder.selectedMessage) >= 0);\n\n      if (mode == 'copy') {\n        promise = srcFolder.$copyMessages(messages, dstId);\n        success = l('%{0} message(s) copied', messages.length);\n      }\n      else {\n        promise = srcFolder.$moveMessages(messages, dstId);\n        success = l('%{0} message(s) moved', messages.length);\n      }\n\n      promise.then(function() {\n        if (clearMessageView)\n          $state.go('mail.account.mailbox');\n        $mdToast.show(\n          $mdToast.simple()\n            .content(success)\n            .position('top right')\n            .hideDelay(2000));\n      });\n    }\n\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxesController', MailboxesController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdMedia', '$mdDialog', 'sgConstant', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'sgHotkeys', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Calendar', 'Component', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdMedia, $mdDialog, sgConstant, stateAccounts, stateAccount, stateMailbox, stateMessage, sgHotkeys, encodeUriFilter, sgSettings, focus, Dialog, Calendar, Component, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null, hotkeys = [];\n\n    // Expose controller\n    $window.$messageController = vm;\n\n    vm.$state = $state;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.toggleDetailedRecipients = toggleDetailedRecipients;\n    vm.filterMailtoLinks = filterMailtoLinks;\n    vm.deleteMessage = deleteMessage;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n    vm.print = print;\n    vm.convertToEvent = convertToEvent;\n    vm.convertToTask = convertToTask;\n\n    // One-way refresh of the parent window when modifying the message from a popup window.\n    if ($window.opener) {\n      // Update the message flags. The message must be displayed in the parent window.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(newTags, oldTags) {\n        var ctrls;\n        if (newTags || oldTags) {\n          ctrls = $parentControllers();\n          if (ctrls.messageCtrl) {\n            ctrls.messageCtrl.service.$timeout(function() {\n              ctrls.messageCtrl.showFlags = true;\n              ctrls.messageCtrl.message.flags = newTags;\n            });\n          }\n        }\n      });\n      // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n      $scope.$watch(function() { return vm.message.isflagged; }, function(isflagged, wasflagged) {\n        var ctrls = $parentControllers();\n        if (ctrls.mailboxCtrl) {\n          ctrls.mailboxCtrl.service.$timeout(function() {\n            var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n            message.isflagged = isflagged;\n          });\n        }\n      });\n    }\n    else {\n      // Flatten new tags when coming from the predefined list of tags (Message.$tags) and\n      // sync tags with server when adding or removing a tag.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(_newTags, _oldTags) {\n        var newTags, oldTags, tags;\n        if (_newTags || _oldTags) {\n          newTags = _newTags || [];\n          oldTags = _oldTags || [];\n          _.forEach(newTags, function(tag, i) {\n            if (angular.isObject(tag))\n              newTags[i] = tag.name;\n          });\n          if (newTags.length > oldTags.length) {\n            tags = _.difference(newTags, oldTags);\n            _.forEach(tags, function(tag) {\n              vm.message.addTag(tag);\n            });\n          }\n          else if (newTags.length < oldTags.length) {\n            tags = _.difference(oldTags, newTags);\n            _.forEach(tags, function(tag) {\n              vm.message.removeTag(tag);\n            });\n          }\n        }\n      });\n    }\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n    _registerHotkeys(hotkeys);\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        callback: function($event) {\n          if (vm.mailbox.$selectedCount() === 0)\n            deleteMessage();\n          $event.preventDefault();\n        }\n      }));\n\n      // Register the hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    function toggleDetailedRecipients($event) {\n      vm.$showDetailedRecipients = !vm.$showDetailedRecipients;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function filterMailtoLinks($event) {\n      var href, match, to, cc, bcc, subject, body, data;\n      if ($event.target.tagName == 'A' && 'href' in $event.target.attributes) {\n        href = $event.target.attributes.href.value;\n        match = /^mailto:([^\\?]+)/.exec(href);\n        if (match) {\n          // Recipients\n          to = _.map(decodeURIComponent(match[1]).split(','), function(email) {\n            return '<' + email + '>';\n          });\n          data = { to: to };\n          // Subject & body\n          _.forEach(['subject', 'body'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            param = (param == 'body')? 'text' : param;\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          // Recipients\n          _.forEach(['cc', 'bcc'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          newMessage($event, data); // will stop event propagation\n        }\n      }\n    }\n\n    function deleteMessage() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage && $mdMedia(sgConstant['gt-md'])) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              if (nextIndex < mailbox.$topIndex)\n                mailbox.$topIndex = nextIndex;\n              else if (nextIndex > mailbox.$lastVisibleIndex)\n                mailbox.$topIndex = nextIndex - (mailbox.$lastVisibleIndex - mailbox.$topIndex);\n            }\n            else {\n              state.go('mail.account.mailbox').then(function() {\n                message = null;\n                delete mailbox.selectedMessage;\n              });\n            }\n          }\n          catch (error) {}\n        }\n        closePopup();\n      });\n    }\n\n    function showMailEditor($event, message) {\n      if (messageDialog === null) {\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n            closePopup();\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      if ($window.opener)\n        $window.close();\n    }\n\n    function newMessage($event, editableContent) {\n      vm.account.$newMessage().then(function(message) {\n        angular.extend(message.editable, editableContent);\n        showMailEditor($event, message);\n      });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.message.$rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.message.$rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n\n    function print($event) {\n      $window.print();\n    }\n\n    function convertToEvent($event) {\n      return convertToComponent($event, 'appointment');\n    }\n\n    function convertToTask($event) {\n      return convertToComponent($event, 'task');\n    }\n\n    function convertToComponent($event, type) {\n      vm.message.$plainContent().then(function(data) {\n        var componentData = {\n          pid: Calendar.$defaultCalendar(),\n          type: type,\n          summary: data.subject,\n          comment: data.content\n        };\n        var component = new Component(componentData);\n        // UI/Templates/SchedulerUI/UIxAppointmentEditorTemplate.wox or\n        // UI/Templates/SchedulerUI/UIxTaskEditorTemplate.wox\n        var templateUrl = [\n          sgSettings.activeUser('folderURL'),\n          'Calendar',\n          'UIx' + type.capitalize() + 'EditorTemplate'\n        ].join('/');\n        return $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: templateUrl,\n          controller: 'ComponentEditorController',\n          controllerAs: 'editor',\n          locals: {\n            stateComponent: component\n          }\n        });\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$scope', '$window', '$stateParams', '$mdConstant', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccount', 'stateMessage', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($scope, $window, $stateParams, $mdConstant, $mdDialog, $mdToast, FileUploader, stateAccount, stateMessage, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = (stateMessage.editable.cc.length === 0);\n    vm.hideBcc = (stateMessage.editable.bcc.length === 0);\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.send = send;\n    vm.sendState = false;\n    vm.removeAttachment = removeAttachment;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.map(stateAccount.identities, 'full');\n    vm.recipientSeparatorKeys = [\n      $mdConstant.KEY_CODE.ENTER,\n      $mdConstant.KEY_CODE.TAB,\n      $mdConstant.KEY_CODE.COMMA,\n      $mdConstant.KEY_CODE.SEMICOLON\n    ];\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Error while uploading the file \\\"%{0}\\\":', item.file.name))\n            .position('top right')\n            .hideDelay(3000));\n        this.removeFromQueue(item);\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    // Destroy file uploader when the controller is being deactivated\n    $scope.$on('$destroy', function() { vm.uploader.destroy(); });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n      if ($window.opener) {\n        if ($window.opener.$mailboxController) {\n          if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n            ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The draft is opened in the parent window\n              ctrls.draftMessageCtrl = $window.opener.$messageController;\n            }\n          }\n          else if (stateMessage.origin) {\n            originMessage = stateMessage.origin.message;\n            if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n              // The message mailbox is opened in the parent window\n              ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n            }\n          }\n        }\n      }\n      return ctrls;\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem, attrs = vm.message.editable.attachmentAttrs;\n      if (attrs)\n        for (i = 0; i < attrs.length; i++) {\n          data = {\n            name: attrs[i].filename,\n            type: attrs[i].mimetype,\n            size: parseInt(attrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = attrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n    }\n\n    function cancel() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      if (vm.message.isNew && vm.message.attachmentAttrs)\n        vm.message.$mailbox.$deleteMessages([vm.message]);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        vm.message.$rawSource = null;\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      var ctrls = $parentControllers();\n\n      vm.sendState = 'sending';\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        vm.sendState = 'sent';\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n\n        // Let the user see the succesfull message before closing the dialog\n        $timeout($mdDialog.hide, 1000);\n      }, function(response) {\n        vm.sendState = 'error';\n        vm.errorMessage = response.data? response.data.message : response.statusText;\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query).then(function(cards) {\n        // Divide the matching cards by email addresses so the user can select\n        // the recipient address of her choice\n        var explodedCards = [];\n        _.forEach(_.invokeMap(cards, 'explode'), function(manyCards) {\n          _.forEach(manyCards, function(card) {\n            explodedCards.push(card);\n          });\n        });\n        // Remove duplicates\n        return _.uniqBy(explodedCards, function(card) {\n          return card.$$fullname + ' ' + card.$$email;\n        });\n      });\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list;\n\n      if (angular.isString(contact))\n        return contact;\n\n      recipients = vm.message.editable[field];\n\n      if (contact.$isList({expandable: true})) {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.forEach(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}