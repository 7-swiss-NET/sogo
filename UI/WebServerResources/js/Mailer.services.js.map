{"version":3,"file":"Mailer.services.js","sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","each","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Mailbox","Message","$$resource","activeUser","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","forEach","i","id","prototype","$getMailboxes","options","_this","$mailboxes","reload","$find","$flattenMailboxes","when","allMailboxes","_visit","mailboxes","push","children","length","$$flattenMailboxes","$getMailboxByType","type","mailbox","_find","find","console","specialMailboxes","$getMailboxByPath","path","$newMailbox","name","post","toString","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","$addDelegate","user","deferred","defer","param","uid","indexOf","pluck","delegates","resolve","users","status","reject","l","promise","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","Preferences","PRELOAD","$$Acl","$Preferences","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","ready","settings","Mail","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","index","map","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","isUndefined","$shadowData","$omit","getLength","getItemAtIndex","$loadMessage","$selectedCount","count","filter","selected","$filter","sortingAttributes","filters","isDefined","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","messageId","endIndex","uids","futureHeadersData","startIndex","max","loaded","subject","Math","min","loading","$unwrapHeaders","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","flags","operation","msgUIDs","$delete","remove","$deleteMessages","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","invoke","threaded","reduce","msgs","msg","object","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","$showDetailedRecipients","to","cc","bcc","$formatFullAddresses","$sce","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","filterTags","query","re","RegExp","results","keys","tag","pair","search","description","color","draftId","$setUID","oldUID","shortname","replace","image","$shortRecipients","result","$shortAddress","address","loadUnsafeContent","showDetailedRecipients","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","attr","removeAttr","trustAs","participants","participant","compile","$editableContent","text","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","origin","response","$send","startsWith","isanswered","isforwarded","$futureMessageData","isread","VirtualMailbox","setMailboxes","startSearch","params","stopSearch","len","k","MailboxController","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","focus","Dialog","selectMessage","go","mailboxId","toggleMessageSelection","$event","preventDefault","stopPropagation","unselectMessages","vm","confirmDeleteSelectedMessages","confirm","selectedMessages","selectedUIDs","difference","alert","copySelectedMessages","saveSelectedMessages","window","location","href","ApplicationBaseURL","selectAll","markSelectedMessagesAsFlagged","d","markSelectedMessagesAsUnread","field","sortedBy","cancelSearch","mode","newMessage","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","accounts","stateMessage","stateRecipients","service","$inject","MailboxesController","User","showAdvancedSearch","showingAdvancedSearch","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","n","substring","trim","negative","newFolder","parentFolder","prompt","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","selectFolder","saveFolder","compactFolder","emptyTrashFolder","exportMails","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","includes","from","current","MessageController","$window","sgSettings","doDelete","findIndex","showMailEditor","recipients","close","selectedMessage","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","closePopup","recipient","saveMessage","viewRawSource","MessageRawSourceDialogController","scope","template","tags","$watchCollection","oldTags","newTags","MessageEditorController","$stateParams","FileUploader","AddressBook","autosave","send","contactFilter","$filterAll","addRecipient","isString","$$fullname","$$email","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideCc","hideBcc","flatten","uploader","autoUpload","alias","onProgressItem","item","progress","onSuccessItem","onCancelItem","file","removeFromQueue","onErrorItem","actionName","msgObject","union","localeCode","LocaleCode","sgImip","link","iElement","attrs","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.each(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    return collection;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$flattenMailboxes({reload: true});\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        _visit = function(mailboxes) {\n          _.each(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if (o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && options.reload)) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      _this.$$flattenMailboxes = allMailboxes;\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    console.debug(mailbox);\n    console.debug(this.specialMailboxes);\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.pluck(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.pluck(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    this.$isLoading = true;\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return angular.isUndefined(filter.searchInput) || filter.searchInput.length === 0;\n        });\n        _.each(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (!angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max);\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.pluck(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.pluck(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    return Mailbox.$$resource.post(this.id, 'expunge');\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function() {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this,\n        deferred = Mailbox.$q.defer(),\n        promise;\n\n    promise = Mailbox.$$resource.remove(this.id);\n\n    promise.then(function() {\n      _this.$account.$getMailboxes({reload: true});\n      deferred.resolve(true);\n    }, function(data, status) {\n      deferred.reject(data);\n    });\n    return deferred.promise;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(uids) {\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invoke(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.object(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.each(_this.headers, function(data) {\n            var msg = _.object(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invoke(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.each(data, function(messageHeaders) {\n            messageHeaders = _.object(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.$showDetailedRecipients = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isDefined(lazy) && lazy) {\n        this.uid = futureMessageData.uid;\n      }\n      else {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', '$sce', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, $sce, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $sce: $sce,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser())\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    if (angular.isUndefined(this.id) || options) {\n      var path;\n      path = _.map(this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, this.accountId); // insert account ID\n      if (options && options.asDraft && this.draftId) {\n        path.push(this.draftId); // add draft ID\n      }\n      else {\n        path.push(this.uid); // add message UID\n      }\n\n      this.id = path.join('/');\n    }\n\n    return this.id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = this.uid || -1;\n\n    if (oldUID != uid) {\n      this.uid = uid;\n      if (oldUID > -1 && this.$mailbox.uidsMap[oldUID]) {\n        this.$mailbox.uidsMap[uid] = this.$mailbox.uidsMap[oldUID];\n        this.$mailbox.uidsMap[oldUID] = null;\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.pluck(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.each(_this[type], function(data, i) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          // If we have \"Alice Foo\" as name, we grab \"Alice\"\n          if (data.name.split(' ').length)\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function() {\n    var _this = this;\n    var result = [];\n\n    // Build long representation of email addresses\n    _.each(['to', 'cc', 'bcc'], function(type) {\n      _.each(_this[type], function(data, i) {\n        result.push(data.shortname);\n      });\n    });\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function showDetailedRecipients\n   * @memberof Message.prototype\n   * @desc Mark the message to show all to/cc recipients.\n   */\n  Message.prototype.showDetailedRecipients = function() {\n    this.$showDetailedRecipients = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer and UIxMailPartMessageViewer\n          else if (angular.isArray(part.content)) {\n            _.each(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = Message.$sce.trustAs('html', part.unsafeContent.innerHTML);\n              }\n              else {\n                part.content = Message.$sce.trustAs('html', part.safeContent);\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.each(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = Message.$sce.trustAs('html', part.safeContent);\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload({asDraft: false}); // fetch a new viewable version of the message\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable),\n        deferred = Message.$q.defer();\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        deferred.resolve(data);\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n      }\n      else {\n        deferred.reject(data);\n      }\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function() {\n    var message = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        message[key] = value;\n      }\n    });\n\n    // Format addresses as arrays\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      if (message[type])\n        message[type] = _.invoke(message[type].split(','), 'trim');\n    });\n\n    //Message.$log.debug(JSON.stringify(message, undefined, 2));\n    return message;\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() { _this.$isLoading = false; });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    // TODO\n    return 0;\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    // TODO\n    // var data = {msgUIDs: uids,\n    //             flags: flags,\n    //             operation: operation};\n\n    // return VirtualMailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(uids) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$state', '$timeout', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($state, $timeout, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, focus, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    Mailbox.selectedFolder = stateMailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.unselectMessages = unselectMessages;\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.copySelectedMessages = copySelectedMessages;\n    // vm.moveSelectedMessages = moveSelectedMessages;\n    vm.saveSelectedMessages = saveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false };\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      message.selected = !message.selected;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function unselectMessages() {\n      _.each(vm.selectedFolder.$messages, function(message) { message.selected = false; });\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'))\n        .then(function() {\n          // User confirmed the deletion\n          var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n          var selectedUIDs = _.pluck(selectedMessages, 'uid');\n          vm.selectedFolder.$deleteMessages(selectedUIDs).then(function() {\n            // Decrement the unseenCount accordingly\n            var unseenCount = _.filter(selectedMessages, function(message) { return !message.isread; });\n            vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n            vm.selectedFolder.unseenCount =- unseenCount;\n          },  function(error) {\n            Dialog.alert(l('Error'), error);\n          });\n        });\n    }\n\n    function copySelectedMessages(folder) {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      vm.selectedFolder.$copyMessages(selectedUIDs, '/' + folder).then(function() {\n        // TODO: refresh target mailbox?\n      }, function(error) {\n        Dialog.alert(l('Error'), error);\n      });\n    }\n\n    // function moveSelectedMessages(folder) {\n    //   var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected });\n    //   var selectedUIDs = _.pluck(selectedMessages, 'uid');\n    //   vm.selectedFolder.$moveMessages(selectedUIDs, '/' + folder).then(function() {\n    //     // TODO: refresh target mailbox?\n    //     vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n    //   });\n    // }\n\n    function saveSelectedMessages() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      window.location.href = ApplicationBaseURL + '/' + vm.selectedFolder.id + '/saveMessages?uid=' + selectedUIDs.join(\",\");\n    }\n\n    function selectAll() {\n      _.each(vm.selectedFolder.$messages, function(message) {\n        message.selected = true;\n      });\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, '\\\\Flagged', 'add').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isflagged = true;\n        });\n      });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, 'seen', 'remove').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isread = false;\n          vm.selectedFolder.unseenCount++;\n        });\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter();\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$mdDialog', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $mdDialog, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.exportMails = exportMails;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.each(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n    }\n\n    function newSearchParam(v) {\n      if (v.length && vm.currentSearchParam.length) {\n        var n = 0;\n        if (v.startsWith(\"!\")) {\n          n = 1;\n          v = v.substring(1).trim();\n        }\n        vm.search.params.push({searchBy:vm.currentSearchParam, searchInput: v, negative: n});\n        vm.currentSearchParam = '';\n      }\n    }\n\n    if ($state.current.name == 'mail' && vm.accounts.length > 0 && vm.accounts[0].$mailboxes.length > 0) {\n      // Redirect to first mailbox of first account if no mailbox is selected\n      account = vm.accounts[0];\n      mailbox = account.$mailboxes[0];\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder(account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        }, function(data, status) {\n          Dialog.alert(l('Warning'), data);\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        // Success\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        // Success\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function exportMails(folder) {\n      window.location.href = ApplicationBaseURL + '/' + folder.id + '/exportFolder';\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      //if ($rootScope.currentFolder == folder)\n      //  return 'folder_open';\n\n      return {name: folder.name, icon: 'folder'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, sgSettings, focus, Dialog, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null;\n\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.doDelete = doDelete;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.saveMessage = saveMessage;\n    vm.viewRawSource = viewRawSource;\n\n    // Watch the message model \"flags\" attribute to remove on-the-fly a tag from the IMAP message\n    // when removed from the message viewer.\n    // TODO: this approach should be reviewed once md-chips supports ng-change.\n    $scope.$watchCollection('viewer.message.flags', function(oldTags, newTags) {\n      _.each(_.difference(newTags, oldTags), function(tag) {\n        vm.message.removeTag(tag);\n      });\n    });\n\n    function doDelete() {\n      stateMailbox.$deleteMessages([stateMessage.uid]).then(function() {\n        // Remove message from list of messages\n        var index = _.findIndex(stateMailbox.$messages, function(o) {\n          return o.uid == stateMessage.uid;\n        });\n        if (index != -1)\n          stateMailbox.$messages.splice(index, 1);\n        // Remove message object from scope\n        vm.message = null;\n        $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) });\n      });\n    }\n\n    function showMailEditor($event, message, recipients) {\n      if (messageDialog === null) {\n        if (!angular.isDefined(recipients))\n          recipients = [];\n\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: recipients\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) }).then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      $window.close();\n    }\n\n    function newMessage($event, recipient) {\n      var message = vm.account.$newMessage();\n      showMailEditor($event, message, [recipient]);\n    }\n\n    function saveMessage() {\n      window.location.href = ApplicationBaseURL + '/' + vm.mailbox.id + '/saveMessages?uid=' + vm.message.uid;\n    }\n\n    function viewRawSource($event) {\n      Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n        $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          template: [\n            '<md-dialog flex=\"80\" flex-sm=\"100\" aria-label=\"' + l('View Message Source') + '\">',\n            '  <md-dialog-content>',\n            '    <pre>',\n            data,\n            '    </pre>',\n            '  </md-dialog-content>',\n            '  <div class=\"md-actions\">',\n            '    <md-button ng-click=\"close()\">' + l('Close') + '</md-button>',\n            '  </div>',\n            '</md-dialog>'\n          ].join(''),\n          controller: MessageRawSourceDialogController\n        });\n\n        /**\n         * @ngInject\n         */\n        MessageRawSourceDialogController.$inject = ['scope', '$mdDialog'];\n        function MessageRawSourceDialogController(scope, $mdDialog) {\n          scope.close = function() {\n            $mdDialog.hide();\n          };\n        }\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$stateParams', '$mdDialog', 'FileUploader', 'stateAccounts', 'stateMessage', 'stateRecipients', '$timeout', 'sgFocus', 'Dialog', 'AddressBook', 'Preferences'];\n  function MessageEditorController($stateParams, $mdDialog, FileUploader, stateAccounts, stateMessage, stateRecipients, $timeout, focus, Dialog, AddressBook, Preferences) {\n    var vm = this;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = true;\n    vm.hideBcc = true;\n    vm.cancel = cancel;\n    vm.send = send;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.pluck(_.flatten(_.pluck(stateAccounts, 'identities')), 'full');\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      onProgressItem: function(item, progress) {\n        console.debug(item); console.debug(progress);\n      },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload();\n        console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n    }\n\n    if (angular.isDefined(stateRecipients)) {\n      vm.message.editable.to = _.union(vm.message.editable.to, _.pluck(stateRecipients, 'full'));\n    }\n\n    function cancel() {\n      // TODO: delete draft?\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      $mdDialog.cancel();\n    }\n\n    function send() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        $mdDialog.hide();\n      }, function(data) {\n        Dialog.alert(l(data.status), l(data.message));\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query);\n    }\n\n    function addRecipient(user) {\n      var recipient = [];\n\n      if (angular.isString(user))\n        return user;\n      if (user.$$fullname)\n        recipient.push(user.$$fullname);\n      if (user.$$email)\n        recipient.push('<' + user.$$email + '>');\n\n      return recipient.join(' ');\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Select list based on user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageEditorController', MessageEditorController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n"]}