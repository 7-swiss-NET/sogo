{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/sgImageGallery.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgAccountSection.directive.js","Mailer/sgImageGallery.directive.js","Mailer/sgIMIP.directive.js","Mailer/sgMailboxListItem.directive.js","Mailer/sgMessageListItem.directive.js","Mailer/sgMessageListItemMain.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","forEach","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","i","id","$accounts","prototype","getLength","$flattenMailboxes","length","getItemAtIndex","index","expandedMailboxes","$getMailboxes","options","_this","$mailboxes","reload","$find","$expanded","expandedFolders","_visit","mailboxes","indexOf","children","settings","Mail","ExpandedFolders","isString","fromJson","warn","when","allMailboxes","push","all","$$flattenMailboxes","saveState","account","reduce","mailbox","post","$getMailboxByType","type","_find","find","$getMailboxByPath","path","$newMailbox","name","toString","$certificate","security","hasCertificate","$$certificate","reject","$removeCertificate","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","accountDefaults","defaults","AuxiliaryMailAccounts","alwaysSign","sign","alwaysEncrypt","encrypt","editable","isNew","mailto","isObject","$parseMailto","$addDelegate","user","deferred","defer","param","uid","map","delegates","resolve","users","status","promise","$removeDelegate","splice","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","$virtualPath","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","quotas","split","component","asCSSIdentifier","join","isUndefined","uidsMap","headers","$isLoading","$messages","$id","$acl","$displayName","$isEditable","isEditable","$isSpecial","$icon","$isNoInferiors","isNoInferiors","$shadowData","$omit","selectFolder","$lastVisibleIndex","max","$loadMessage","$selectedMessages","filter","selected","$selectedCount","isSelectedMessage","messageId","selectedMessage","$selectedMessage","$selectedMessageIndex","hasSelectedMessage","isDefined","$filter","sortingAttributes","filters","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","loaded","subject","min","loading","$unwrapHeaders","flags","isNoSelect","getClassName","base","$rename","findParent","parent","parentMailbox","$save","sibling","oldPath","localeCompare","pathRE","RegExp","_updateChildren","child","replace","$compact","$canFolderAs","$setFolderAs","$emptyTrash","$markAsRead","isread","$flagMessages","messages","operation","msgUIDs","saveSelectedMessages","selectedMessages","selectedUIDs","filename","download","exportFolder","$delete","$_deleteMessages","unseen","firstIndex","forEachRight","selectedIndex","findIndex","$deleteMessages","$markOrUnMarkMessagesAsJunk","method","$copyMessages","folder","$moveMessages","$reset","value","key","save","response","error","$futureMailboxData","$topIndex","invokeMap","threaded","msgs","msg","msgObject","zipObject","isError","j","messageHeaders","$updateSubscribe","action","subscribed","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Message_STATUS","STATUS","$avatar","avatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","NOT_LOADED","DELAYED_LOADING","LOADING","LOADED","DELAYED_MS","filterTags","query","excludedTags","re","results","keys","tag","pair","search","includes","color","buildPath","nocache","draftId","withResourcePath","$setUID","oldUID","attr","constructor","shortname","first","last","image","$shortRecipients","result","count","total","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$parts","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","signed","valid","certificate","certificates","encrypted","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","removeAttr","compile","$editableContent","from","toLowerCase","text","$plainContent","addTag","$addOrRemoveTag","removeTag","$imipAction","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","attachmentAttrs","attachment","toggleFlag","isflagged","$loaded","useCache","$futureMessageData","exec","decodeURIComponent","trim","$reply","$newDraft","$replyAll","$forward","origin","$send","startsWith","isanswered","isforwarded","privateAttributes","downloadAttachments","ImageGallery","show","$document","$mdPanel","sgHotkeys","setMessage","registerImage","registerHotkeys","$ctrl","createHotkey","callback","previousImage","nextImage","registerHotkey","showGallery","$event","partIndex","PanelController","mdPanelRef","close","selectImage","selectedImage","images","lastIndex","partSrc","src","attrs","mimetype","url","body","addClass","panelPosition","newPanelPosition","absolute","panelAnimation","newPanelAnimation","openFrom","target","duration","withAnimation","animation","FADE","config","attachTo","locals","bindToController","controller","controllerAs","position","targetEvent","fullscreen","hasBackdrop","template","trapFocus","clickOutsideToClose","escapeToClose","focusOnOpen","onOpenComplete","getElementsByClassName","imgContainer","imgEl","one","naturalWidth","naturalHeight","classList","add","remove","onDomRemoved","removeClass","hotkeys","deregisterHotkey","open","$inject","VirtualMailbox","setMailboxes","startSearch","params","finally","stopSearch","resetSelectedMessage","len","k","transform","messagesMap","sum","allMessages","promises","assign","flatten","MailboxController","$window","$scope","$state","$mdDialog","$mdToast","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","sgSettings","focus","Dialog","_registerHotkeys","vm","searchMode","messageDialog","newMessage","markOrUnMarkMessagesAsJunk","toggleMessageSelection","_nextMessage","preventInClass","_previousMessage","_addNextMessageToSelection","_addPreviousMessageToSelection","hotkey","confirmDeleteSelectedMessages","_compactBeforeUnload","event","_newMessageInPopup","baseURL","wId","random","console","selectMessage","preventDefault","_currentMailboxes","_unselectMessage","nextMessage","previousMessage","nextIndex","mode","multiple","go","defaultWindowTitle","$onInit","$mailboxController","service","accounts","on","$on","off","$watch","title","centerIsClose","navController_centerIsClose","field","sortedBy","cancelSearch","composeWindowEnabled","SOGoMailComposeWindowEnabled","inPopup","SOGoMailComposeWindow","templateUrl","stateMessage","catch","noop","mailboxId","nextSelectedIndex","shiftKey","stopPropagation","size","confirm","ok","deleteSelectedMessage","withoutTrash","moveSelectedMessage","dstFolder","copySelectedMessages","simple","hideDelay","moveSelectedMessages","selectAll","unselectMessages","markSelectedMessagesAsFlagged","markSelectedMessagesAsUnread","markSelectedMessagesAsRead","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","decorator","MailboxesController","$transitions","User","selectedFolderController","confirmDelete","currentSearchParam","","subfolders","showSubscribedOnly","SOGoMailShowSubscribedFoldersOnly","refreshUnseenCount","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","$current","addSearchParam","v","newSearchParam","pattern","n","searchParam","substring","negative","toggleAccountState","triggerHandler","subscribe","SubscriptionsDialogController","srcAccount","hide","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","userFilter","closeModal","removeUser","addUser","userToAdd","searchText","unseenCountFolders","isDroppableFolder","srcFolder","dragSelectedMessages","dstId","clearMessageView","success","MessageController","$mdMedia","sgConstant","Calendar","Component","_messageDialog","arguments","_unlessInDialog","apply","reply","replyAll","forward","deleteMessage","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","_showMailEditor","closePopup","_convertToComponent","componentData","pid","$defaultCalendar","summary","comment","capitalize","stateComponent","popupWindow","tags","showFlags","$showDetailedRecipients","showRawSource","$watchCollection","newTags","oldTags","wasflagged","_newTags","_oldTags","difference","addFlags","toggleDetailedRecipients","filterMailtoLinks","href","tagName","attributes","state","parentCtrls","_showMailEditorInPopup","isPopup","openInPopup","edit","contains","toggleRawSource","$rawSource","print","convertToEvent","convertToTask","MessageEditorController","$stateParams","$mdConstant","$mdUtil","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","_initFileUploader","uploader","autoUpload","alias","removeAfterUpload","onSuccessItem","item","inlineUrl","lastAttachmentAttrs","onCancelItem","file","removeFromQueue","onErrorItem","_updateFileUploader","_addAttachments","fileItem","FileItem","progress","isUploaded","isSuccess","queue","removeAttachment","isUploading","cancelItem","getElementById","prop","autosave","send","sendState","errorMessage","statusText","toggleFullscreen","isFullscreen","contactFilter","$filterAll","cards","explodedCards","manyCards","card","uniqBy","$$fullname","$$email","addRecipient","contact","recipients","recipient","list","emailRE","charCodeAt","test","charAt","$isList","expandable","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideBcc","hideCc","uniq","recipientSeparatorKeys","KEY_CODE","ENTER","TAB","COMMA","SEMICOLON","localeCode","LocaleCode","destroy","actionName","SendMessageToastController","closeToast","sgAccountSection","restrict","scope","sgAccountController","$mdSidenav","$postLink","quotaElement","div","addMailboxController","mailboxController","selectedMailboxCtrl","ctrl","unselectFolder","directive","sgImageGalleryController","addImage","imgSrc","relativeTo","addPanelPosition","xPosition","ALIGN_START","yPosition","ALIGN_TOPS","panelRef","panelEl","sgImip","link","iElement","pathToAttachment","sgImipPath","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","sgMailboxListItem","require","accountController","sgMailboxListItemController","editMode","selectableElement","clickableElement","inputContainer","inputElement","moreOptionsButton","childLevel","editFolder","select","saveFolder","disabled","revertEditing","showMenu","MenuController","$menuCtrl","markFolderRead","itemCtrl","compactFolder","emptyTrashFolder","showAdvancedSearch","share","$users","usersWithACL","setFolderAs","sgMessageListItem","sgMessageListItemController","watchedAttrs","MailboxService","pick","newId","oldId","onUpdate","setVisibility","visible","sgMessageListItemMain","postLink","parentController","sgMessageListItemMainController","$parse","contentDivElement","iconsDivElement","parentControllerOnUpdate","priorityIconElement","mailboxNameElement","senderElement","subjectElement","sizeElement","dateElement","textContent","flagIconElement","answerIconElement","forwardIconElement","attachmentIconElement","flagElements","nodesToArray","flagElement","removeChild","css","prepend","encodeEntities","priority","relativedate","hasattachment","sgZoomableImage","sgZoomableImageController","showImage"],"mappings":"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","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n    function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.forEach(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    Account.$accounts = collection;\n\n    return collection;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of mailboxes in the account\n   */\n  Account.prototype.getLength = function() {\n    return this.$flattenMailboxes().length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the mailbox at the specified index\n   */\n  Account.prototype.getItemAtIndex = function(index) {\n    var expandedMailboxes;\n\n    expandedMailboxes = this.$flattenMailboxes();\n    if (index >= 0 && index < expandedMailboxes.length)\n      return expandedMailboxes[index];\n\n    return null;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this, options).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$expanded = false;\n\n        // Set expanded folders from user's settings\n        var expandedFolders,\n            _visit = function(mailboxes) {\n              _.forEach(mailboxes, function(o) {\n                o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n        if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n          if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders)) {\n            // Backward compatibility support\n            try {\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            }\n            catch (e) {\n              Account.$log.warn(\"Can't parse list of expanded folders. String was: \" +\n                                Account.$Preferences.settings.Mail.ExpandedFolders);\n              expandedFolders = [];\n            }\n          }\n          else {\n            expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n          }\n          _this.$expanded = (expandedFolders.indexOf('/' + _this.id) >= 0);\n          if (expandedFolders.length > 0) {\n            _visit(_this.$mailboxes);\n          }\n        }\n        if (Account.$accounts)\n          _this.$expanded |= (Account.$accounts.length == 1); // Always expand single account\n        _this.$flattenMailboxes({reload: true});\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - the following boolean attributes are available:\n   *   - reload: rebuild the flatten array of mailboxes from the original tree representation (this.$mailboxes)\n   *   - all: return all mailboxes, ignoring their expanstion state\n   *   - saveState: save expansion state of mailboxes to the server\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.forEach(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          // Save expansion state of mailboxes to the server\n          _.forEach(Account.$accounts, function(account) {\n            if (account.$expanded) {\n              expandedMailboxes.push('/' + account.id);\n            }\n            _.reduce(account.$$flattenMailboxes, function(expandedFolders, mailbox) {\n              if (mailbox.$expanded) {\n                expandedFolders.push('/' + mailbox.id);\n              }\n              return expandedFolders;\n            }, expandedMailboxes);\n          });\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $certificate\n   * @memberof Account.prototype\n   * @desc View the S/MIME certificate details associated to the account.\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$certificate = function() {\n    var _this = this;\n\n    if (this.security && this.security.hasCertificate) {\n      if (this.$$certificate)\n        return Account.$q.when(this.$$certificate);\n      else {\n        return Account.$$resource.fetch(this.id.toString(), 'certificate').then(function(data) {\n          _this.$$certificate = data;\n          return data;\n        });\n      }\n    }\n    else {\n      return Account.$q.reject();\n    }\n  };\n\n  /**\n   * @function $removeCertificate\n   * @memberof Account.prototype\n   * @desc Remove any S/MIME certificate associated with the account.\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$removeCertificate = function() {\n    var _this = this;\n\n    return Account.$$resource.fetch(this.id.toString(), 'removeCertificate').then(function() {\n      _this.security.hasCertificate = false;\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function(options) {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        var accountDefaults = Account.$Preferences.defaults.AuxiliaryMailAccounts[_this.id];\n        if (accountDefaults.security) {\n          if (accountDefaults.security.alwaysSign)\n            data.sign = true;\n          if (accountDefaults.security.alwaysEncrypt)\n            data.encrypt = true;\n        }\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        message.isNew = true;\n        if (options && options.mailto) {\n          if (angular.isObject(options.mailto))\n            angular.extend(message.editable, options.mailto);\n          else\n            message.$parseMailto(options.mailto);\n        }\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.map(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.map(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'arrival', asc: 0 }, // The default sort must match [UIxMailListActions defaultSortKey]\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      $virtualPath: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    if (Preferences.settings.Mail.SortingState) {\n      Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n      Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n    }\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account, options) {\n    var path, futureMailboxData;\n\n    if (options && options.all)\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'viewAll');\n    else\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    if (angular.isUndefined(this.uidsMap) || data.headers) {\n      this.$isLoading = true;\n      this.$messages = [];\n      this.uidsMap = {};\n    }\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    this.$displayName = this.name;\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n      this.$isSpecial = true;\n      if (this.type == 'inbox') {\n        this.$displayName = l('InboxFolderName');\n        this.$icon = 'inbox';\n      }\n      else if (this.type == 'draft') {\n        this.$displayName = l('DraftsFolderName');\n        this.$icon = 'drafts';\n      }\n      else if (this.type == 'sent') {\n        this.$displayName = l('SentFolderName');\n        this.$icon = 'send';\n      }\n      else if (this.type == 'trash') {\n        this.$displayName = l('TrashFolderName');\n        this.$icon = 'delete';\n      }\n      else if (this.type == 'junk') {\n        this.$displayName = l('JunkFolderName');\n        this.$icon = 'thumb_down';\n      }\n      else if (this.type == 'additional') {\n        this.$icon = 'folder_shared';\n      }\n      else {\n        this.$isSpecial = false;\n        this.$icon = 'folder_open';\n      }\n    }\n    this.$isNoInferiors = this.isNoInferiors();\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof Mailbox.prototype\n   * @desc Mark the folder as selected in the constructor unless virtual mode is active\n   */\n  Mailbox.prototype.selectFolder = function() {\n    if (!Mailbox.$virtualMode)\n      Mailbox.selectedFolder = this;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Return the messages selected by the user.\n   * @returns Message instances\n   */\n  Mailbox.prototype.$selectedMessages = function() {\n    return _.filter(this.$messages, function(message) { return message.selected; });\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    return this.$selectedMessages().length;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is displayed in the detailed view.\n   * @param {string} messageId\n   * @returns true if the specified message is displayed\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function $selectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Return the currently visible message.\n   * @returns a Message instance or undefined if no message is displayed\n   */\n  Mailbox.prototype.$selectedMessage = function() {\n    var _this = this;\n\n    return _.find(this.$messages, function(message) { return message.uid == _this.selectedMessage; });\n  };\n\n  /**\n   * @function $selectedMessageIndex\n   * @memberof Mailbox.prototype\n   * @desc Return the index of the currently visible message.\n   * @returns a number or undefined if no message is selected\n   */\n  Mailbox.prototype.$selectedMessageIndex = function() {\n    return this.uidsMap[this.selectedMessage];\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if a message is selected.\n   * @returns true if the a message is selected\n   */\n  Mailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(this.selectedMessage);\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    if (Mailbox.$refreshTimeout)\n      Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n    if (sortingAttributes)\n      // Sorting preferences are common to all mailboxes\n      angular.extend(Mailbox.$query, sortingAttributes);\n\n    angular.extend(options, { sortingAttributes: Mailbox.$query });\n    if (angular.isDefined(filters)) {\n      options.filters = _.reject(filters, function(filter) {\n        return !filter.searchInput || filter.searchInput.length === 0;\n      });\n      // Decompose filters that match two fields\n      _.forEach(options.filters, function(filter) {\n        var secondFilter,\n            match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n        if (match) {\n          options.sortingAttributes.match = 'OR';\n          filter.searchBy = match[1];\n          secondFilter = angular.copy(filter);\n          secondFilter.searchBy = match[2];\n          options.filters.push(secondFilter);\n        }\n      });\n    }\n\n    // Restart the refresh timer, if needed\n    if (!Mailbox.$virtualMode) {\n      var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually') {\n        var f = angular.bind(this, Mailbox.prototype.$filter, null, filters);\n        Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n      }\n    }\n\n    var futureMailboxData = Mailbox.$$resource.post(this.id, 'view', options);\n    return this.$unwrap(futureMailboxData);\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        index,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (angular.isDefined(this.$messages[endIndex].subject) ||\n          angular.isDefined(this.$messages[endIndex].loading)) {\n        index = Math.max(startIndex - Mailbox.PRELOAD.LOOKAHEAD, 0);\n        if (!angular.isDefined(this.$messages[index].subject) &&\n            !angular.isDefined(this.$messages[index].loading)) {\n          // Previous messages not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - Mailbox.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next messages not load; preload more headers further down\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max - 1);\n\n      if (!angular.isDefined(this.$messages[startIndex].subject) &&\n          !angular.isDefined(this.$messages[startIndex].loading) ||\n          !angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function isNoInferiors\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can contain submailboxes\n   * @returns true if the mailbox can not contain submailboxes\n   */\n  Mailbox.prototype.isNoInferiors = function() {\n    return this.flags.indexOf('noinferiors') >= 0;\n  };\n\n  /**\n   * @function isNoSelect\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can be selected\n   * @returns true if the mailbox can not be selected\n   */\n  Mailbox.prototype.isNoSelect = function() {\n    return this.flags.indexOf('noselect') >= 0;\n  };\n\n  /**\n   * @function getClassName\n   * @memberof Mailbox.prototype\n   * @desc Not used but defined because it is called from UIxAclEditor.wox.\n   * @returns a string representing the foreground CSS class name\n   */\n  Mailbox.prototype.getClassName = function(base) {\n    return false;\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.map(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling, oldPath = _this.path;\n      _this.init(data); // update the path and id\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.map(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n\n      // Update the path and id of children\n      var pathRE = new RegExp('^' + oldPath);\n      var _updateChildren = function(mailbox) {\n        _.forEach(mailbox.children, function(child) {\n          child.path = child.path.replace(pathRE, _this.path);\n          child.id = child.$id();\n          _updateChildren(child);\n        });\n      };\n      _updateChildren(_this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $canFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Check if the folder can be set as Drafts/Sent/Trash\n   * @returns true if folder is eligible\n   */\n  Mailbox.prototype.$canFolderAs = function() {\n    return this.type == 'folder' && this.level === 0;\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'markRead').then(function() {\n      _this.unseenCount = 0;\n      _.forEach(_this.$messages, function(message) {\n        message.isread = true;\n      });\n    });\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(messages, flags, operation) {\n    var data = {msgUIDs: _.map(messages, 'uid'),\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data).then(function() {\n      return messages;\n    });\n  };\n\n  /**\n   * @function saveSelectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Download the selected messages\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.saveSelectedMessages = function() {\n    var data, options, selectedMessages, selectedUIDs;\n\n    selectedMessages = _.filter(this.$messages, function(message) { return message.selected; });\n    selectedUIDs = _.map(selectedMessages, 'uid');\n    data = { uids: selectedUIDs };\n    options = { filename: l('Saved Messages.zip') };\n\n    return Mailbox.$$resource.download(this.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n  /**\n   * @function exportFolder\n   * @memberof Mailbox.prototype\n   * @desc Export this mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.exportFolder = function() {\n    var options;\n\n    options = { filename: this.name + '.zip' };\n\n    return Mailbox.$$resource.download(this.id, 'exportFolder', null, options);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @param {object} [options] - additional options (use {withoutTrash: true} to delete immediately)\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function(options) {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'delete', options)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $_deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from Mailbox object.\n   * @param {string[]} uids - the messages uids\n   * @param {object[]} messages - the Message instances\n   * @return the index of the first deleted message\n   */\n  Mailbox.prototype.$_deleteMessages = function(uids, messages) {\n    var _this = this, selectedUIDs, _$messages, unseen, firstIndex = this.$messages.length;\n\n    // Decrement the unseen count\n    unseen = _.filter(messages, function(message, i) { return !message.isread; });\n    this.unseenCount -= unseen.length;\n\n    // Remove messages from $messages and uidsMap\n    _.forEachRight(this.$messages, function(message, index) {\n      var selectedIndex = _.findIndex(uids, function(uid) {\n        return message.uid == uid;\n      });\n      if (selectedIndex > -1) {\n        uids.splice(selectedIndex, 1);\n        delete _this.uidsMap[message.uid];\n        if (message.uid == _this.selectedMessage)\n          delete _this.selectedMessage;\n        _this.$messages.splice(index, 1);\n        if (index < firstIndex)\n          firstIndex = index;\n      }\n      else {\n        _this.uidsMap[message.uid] -= uids.length;\n      }\n    });\n\n    // Return the index of the first deleted message\n    return firstIndex;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @param {object} [options] - additional options (use {withoutTrash: true} to delete immediately)\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages, options) {\n    var _this = this, uids, data;\n\n    uids = _.map(messages, 'uid');\n    data = { uids: uids };\n    if (options) angular.extend(data, options);\n\n    return Mailbox.$$resource.post(this.id, 'batchDelete', data)\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof Mailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messages) {\n    var _this = this,\n        uids = _.map(messages, 'uid'),\n        method = (this.type == 'junk' ? 'markMessagesAsNotJunk' : 'markMessagesAsJunk');\n\n    return Mailbox.$$resource.post(this.id, method, {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(messages, folder) {\n    var _this = this,\n        uids = _.map(messages, 'uid');\n\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(messages, folder) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder})\n      .then(function() {\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this.$shadowData, function(value, key) {\n      delete _this[key];\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(response) {\n      Mailbox.$log.error(JSON.stringify(response.data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n      return response.data;\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key != 'headers' &&\n          key != 'uids' &&\n          key != 'uidsMap' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      var selectedMessages = _.map(_this.$selectedMessages(), 'uid');\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        if (!data.uids || _this.$topIndex > data.uids.length - 1)\n          _this.$topIndex = 0;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + _this.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data, msgObject;\n            if (_this.threaded)\n              data = _.zipObject(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgObject = new Mailbox.$Message(_this.$account.id, _this, data, true);\n\n            // Restore selection\n            msgObject.selected = selectedMessages.indexOf(msgObject.uid) > -1;\n\n            msgs.push(msgObject);\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.forEach(_this.headers, function(data) {\n            var msg = _.zipObject(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      _this.$isLoading = false;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(messageHeaders) {\n            messageHeaders = _.zipObject(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n  /**\n   * @function $updateSubscribe\n   * @memberof Mailbox.prototype\n   * @desc Update mailbox subscription state with server.\n   */\n  Mailbox.prototype.$updateSubscribe = function() {\n    var action = this.subscribed? 'subscribe' : 'unsubscribe';\n\n    Mailbox.$$resource.post(this.id, action);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'sgMessage_STATUS', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Message_STATUS, Resource, Preferences) {\n    angular.extend(Message, {\n      STATUS: Message_STATUS,\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $avatar: angular.bind(Preferences, Preferences.avatar)\n    });\n\n    // Initialize tags form user's defaults\n    if (Preferences.defaults.SOGoMailLabelsColors) {\n      Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n    }\n    if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n        Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n      Message.$displayRemoteInlineImages = true;\n    }\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMessage_STATUS', {\n      NOT_LOADED:      0,\n      DELAYED_LOADING: 1,\n      LOADING:         2,\n      LOADED:          3,\n      DELAYED_MS:      300\n    })\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query, excludedTags) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        if (!_.includes(excludedTags, tag))\n          results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    var _this = this, id = this.id;\n\n    function buildPath() {\n      var path;\n      path = _.map(_this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, _this.accountId); // insert account ID\n      return path.join('/');\n    }\n\n    if (angular.isUndefined(this.id) || options && options.nocache) {\n      this.id = buildPath() + '/' + this.uid; // add message UID\n      id = this.id;\n    }\n    if (options && options.asDraft && this.draftId) {\n      id = buildPath() + '/' + this.draftId; // add draft ID\n    }\n    if (options && options.withResourcePath) {\n      id = Message.$$resource.path(id); // return absolute URL\n    }\n\n    return id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1), _this = this, index;\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      this.$absolutePath({nocache: true});\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          index = this.$mailbox.uidsMap[oldUID];\n          this.$mailbox.uidsMap[uid] = index;\n          delete this.$mailbox.uidsMap[oldUID];\n\n          // Update messages list of mailbox\n          _.forEach(['from', 'to', 'subject'], function(attr) {\n            _this.$mailbox.$messages[index][attr] = _this[attr];\n          });\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates the avatar URL for each email address and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.map(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.forEach(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.forEach(_this[type], function(data) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          if (data.name.length < 10)\n            // Name is already short\n            data.shortname = data.name;\n          else if (data.name.split(' ').length)\n            // If we have \"Alice Foo\" or \"Foo, Alice\" as name, we grab \"Alice\"\n            data.shortname = _.first(_.last(data.name.split(/, */)).split(/ +/)).replace('\\'','');\n        }\n        else if (data.email) {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        data.image = Message.$avatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function(max) {\n    var _this = this, result = [], count = 0, total = 0;\n\n    // Build short representation of email addresses\n    _.forEach(['to', 'cc', 'bcc'], function(type) {\n      total += _this[type]? _this[type].length : 0;\n      _.forEach(_this[type], function(data, i) {\n        if (count < max)\n          result.push(data.shortname);\n        count++;\n      });\n    });\n\n    if (total > max)\n      result.push(l('and %{0} more...', (total - max)));\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], _.bind(function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, this), recipientsCount);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n    delete this.$parts;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              _this.signed = {\n                valid: part.valid,\n                certificate: part.certificates[part.certificates.length - 1],\n                message: part.message\n              };\n            }\n            else if (part.type == 'UIxMailPartEncryptedViewer') {\n              _this.encrypted = {\n                valid: part.valid\n              };\n              if (part.valid)\n                _this.encrypted.message = l(\"This message is encrypted\");\n              else\n                _this.encrypted.message = l(\"This message can't be decrypted. Please make sure you have uploaded your S/MIME certificate from the mail preferences module.\");\n            }\n            _.forEach(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n\n    if (this.$parts)\n      // Use the cache\n      return this.$parts;\n\n    else if (this.parts)\n      _visit(this.parts);\n\n    // Cache result\n    this.$parts = parts;\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        // Try to match a known account identity from the specified \"from\" address\n        var identity = _.find(_this.$mailbox.$account.identities, function(identity) {\n          return data.from.toLowerCase().indexOf(identity.email) !== -1;\n        });\n        if (identity)\n          data.from = identity.full;\n        var accountDefaults = Message.$Preferences.defaults.AuxiliaryMailAccounts[_this.$mailbox.$account.id];\n        if (accountDefaults.security) {\n          if (accountDefaults.security.alwaysSign)\n            data.sign = true;\n          if (accountDefaults.security.alwaysEncrypt)\n            data.encrypt = true;\n        }\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function $plainContent\n   * @memberof Message.prototype\n   * @returns the a plain text representation of the subject and body\n   */\n  Message.prototype.$plainContent = function() {\n    return Message.$$resource.fetch(this.$absolutePath(), 'viewplain');\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part\n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info\n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var data = { 'filename': filename };\n    var _this = this;\n    Message.$$resource.fetch(this.$absolutePath({asDraft: true}), 'deleteAttachment', data).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $isLoading\n   * @memberof Message.prototype\n   * @returns true if the Message content is still being retrieved from server after a specific delay\n   * @see sgMessage_STATUS\n   */\n  Message.prototype.$isLoading = function() {\n    return this.$loaded == Message.STATUS.LOADING;\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @param {object} [options] - set {useCache: true} to use already fetched data\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var _this = this, futureMessageData;\n\n    if (options && options.useCache && this.$futureMessageData) {\n      if (!this.isread) {\n        Message.$$resource.fetch(this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return this;\n    }\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $parseMailto\n   * @memberof Message.prototype\n   * @desc Extend the editable content of the message with the\n   * information parsed from the specified \"mailto:\" link.\n   */\n  Message.prototype.$parseMailto = function(mailto) {\n    var to, data, match = /^mailto:([^\\?]+)/.exec(mailto);\n    if (match) {\n      // Recipients\n      to = _.map(decodeURIComponent(match[1]).split(','), function(email) {\n        return '<' + email.trim() + '>';\n      });\n      data = { to: to };\n      // Subject & body\n      _.forEach(['subject', 'body'], function(param) {\n        var re = new RegExp(param + '=([^&]+)');\n        param = (param == 'body')? 'text' : param;\n        match = re.exec(mailto);\n        if (match)\n          data[param] = decodeURIComponent(match[1]);\n      });\n      // Other Recipients\n      _.forEach(['cc', 'bcc'], function(param) {\n        var re = new RegExp(param + '=([^&]+)');\n        match = re.exec(mailto);\n        if (match)\n          data[param] = _.map(decodeURIComponent(match[1]).split(','), function(email) {\n            return '<' + email.trim() + '>';\n          });\n      });\n      angular.extend(this.editable, data);\n    }\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        var accountDefaults = Message.$Preferences.defaults.AuxiliaryMailAccounts[_this.$mailbox.$account.id];\n        if (accountDefaults.security) {\n          if (accountDefaults.security.alwaysSign)\n            data.sign = true;\n          if (accountDefaults.security.alwaysEncrypt)\n            data.encrypt = true;\n        }\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n      _this.isNew = false;\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable);\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(response) {\n      if (response.status == 'success') {\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n        return response;\n      }\n      else {\n        return Message.$q.reject(response.data);\n      }\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise.\n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Message is not loaded yet\n    this.$loaded = Message.STATUS.DELAYED_LOADING;\n    Message.$timeout(function() {\n      if (_this.$loaded != Message.STATUS.LOADED)\n        _this.$loaded = Message.STATUS.LOADING;\n    }, Message.STATUS.DELAYED_MS);\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        _this.isread = true;\n        _this.$mailbox.unseenCount--;\n      }\n      return Message.$timeout(function() {\n        delete _this.$parts;\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        _this.$loaded = Message.STATUS.LOADED;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function(options) {\n    var message = {},\n        privateAttributes = options && options.privateAttributes;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$' || privateAttributes) {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n  /**\n   * @function download\n   * @memberof Message.prototype\n   * @desc Download the current message\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.download = function() {\n    var data, options;\n\n    data = { uids: [this.uid] };\n    options = { filename: this.subject + '.zip' };\n\n    return Message.$$resource.download(this.$mailbox.id, 'saveMessages', data, options);\n  };\n\n  /**\n   * @function downloadAttachments\n   * @memberof Message.prototype\n   * @desc Download an archive of all attachments\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.downloadAttachments = function() {\n    var options;\n\n    options = { filename: l('attachments') + \"-\" + this.uid + \".zip\" };\n\n    return Message.$$resource.download(this.$absolutePath(), 'archiveAttachments', null, options);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name ImageGallery\n   * @constructor\n   */\n  function ImageGallery() {\n    this.show = false;\n    this.message = null;\n    this.elements = [];\n  }\n\n  /**\n   * @memberof ImageGallery\n   * @desc The factory we'll use to register with Angular\n   * @returns an ImageGallery instance\n   */\n  ImageGallery.$factory = ['$document', '$timeout', '$mdPanel', 'sgHotkeys', function($document, $timeout, $mdPanel, sgHotkeys) {\n    angular.extend(ImageGallery, {\n      $document: $document,\n      $timeout: $timeout,\n      $mdPanel: $mdPanel,\n      sgHotkeys: sgHotkeys\n    });\n\n    return new ImageGallery(); // return unique instance\n  }];\n\n  /**\n   * @function setMessage\n   * @memberof ImageGallery.prototype\n   * @desc Set current message object of gallery\n   */\n  ImageGallery.prototype.setMessage = function(message) {\n    this.message = message;\n  };\n\n  /**\n   * @function registerImage\n   * @memberof ImageGallery.prototype\n   * @desc Add an image to the gallery. Called from sgZoomableImage directive.\n   */\n  ImageGallery.prototype.registerImage = function(element) {\n    this.elements.push(element);\n  };\n\n  /**\n   * @function registerHotkeys\n   * @memberof ImageGallery.prototype\n   * @desc Allow keyboard navigation\n   */\n  ImageGallery.prototype.registerHotkeys = function($ctrl) {\n    this.keys = [\n      ImageGallery.sgHotkeys.createHotkey({\n        key: 'left',\n        description: l('View previous item'),\n        callback: angular.bind($ctrl, $ctrl.previousImage)\n      }),\n      ImageGallery.sgHotkeys.createHotkey({\n        key: 'right',\n        description: l('View next item'),\n        callback: angular.bind($ctrl, $ctrl.nextImage)\n      })\n    ];\n    _.forEach(this.keys, function(key) {\n      ImageGallery.sgHotkeys.registerHotkey(key);\n    });\n  };\n\n  /**\n   * @function showGallery\n   * @memberof ImageGallery.prototype\n   * @desc Build and show the md-panel\n   */\n  ImageGallery.prototype.showGallery = function($event, partIndex) {\n    var _this = this,\n        $mdPanel = ImageGallery.$mdPanel,\n        partSrc = angular.element(this.message.$content()[partIndex].content).find('img')[0].src;\n\n    var images = _.filter(this.message.attachmentAttrs, function(attrs) {\n      return attrs.mimetype.indexOf('image/') === 0;\n    });\n\n    var selectedIndex = _.findIndex(images, function(image) {\n      return image.url.indexOf(partSrc) >= 0;\n    });\n\n    // Add a class to the body in order to modify the panel backdrop opacity\n    angular.element(ImageGallery.$document[0].body).addClass('sg-image-gallery-backdrop');\n\n    // Fullscreen panel\n    var panelPosition = $mdPanel.newPanelPosition()\n        .absolute();\n\n    var panelAnimation = $mdPanel.newPanelAnimation()\n        .openFrom($event.target)\n        .duration(100)\n        .withAnimation($mdPanel.animation.FADE);\n\n    var config = {\n      attachTo: angular.element(document.body),\n      locals: {\n        lastIndex: images.length -1,\n        images: images,\n        selectedIndex: selectedIndex,\n        selectedImage: images[selectedIndex]\n      },\n      bindToController: true,\n      controller: PanelController,\n      controllerAs: '$panelCtrl',\n      position: panelPosition,\n      animation: panelAnimation,\n      targetEvent: $event,\n      fullscreen: true,\n      hasBackdrop: true,\n      template: [\n        '<sg-image-gallery layout=\"column\">',\n        '  <div class=\"md-toolbar-tools\" layout=\"row\" layout-align=\"space-between center\">',\n        '    <md-button class=\"md-icon-button\"',\n        '                aria-label=\"' + l('Close') + '\"',\n        '                ng-click=\"$panelCtrl.close()\">',\n        '      <md-icon>arrow_back</md-icon>',\n        '    </md-button>',\n        '    <md-icon class=\"md-primary\">image</md-icon>',\n        '    <div md-truncate class=\"md-flex\" ng-bind=\"$panelCtrl.selectedImage.filename\"></div>',\n        '    <md-button class=\"md-icon-button\"',\n        '                aria-label=\"' + l('Save Attachment') + '\"',\n        '                ng-href=\"{{$panelCtrl.selectedImage.urlAsAttachment}}\">',\n        '      <md-icon>file_download</md-icon>',\n        '    </md-button>',\n        '  </div>',\n        '  <div class=\"md-flex\" layout=\"row\" layout-align=\"space-between center\">',\n        '      <md-button class=\"md-icon-button\" ng-click=\"$panelCtrl.previousImage()\"',\n        '                 ng-disabled=\"$panelCtrl.selectedIndex == 0\">',\n        '        <md-icon>navigate_before</md-icon>',\n        '      </md-button>',\n        '      <img class=\"sg-image\" ng-src=\"{{$panelCtrl.selectedImage.url}}\">',\n        '      <md-button class=\"md-icon-button\" ng-click=\"$panelCtrl.nextImage()\"',\n        '                 ng-disabled=\"$panelCtrl.selectedIndex == $panelCtrl.lastIndex\">',\n        '        <md-icon>navigate_next</md-icon>',\n        '      </md-button>',\n        '  </div>',\n        '    <div class=\"sg-image-thumbnails\">',\n        '      <div class=\"sg-image-thumbnail\" ng-repeat=\"image in ::$panelCtrl.images\">',\n        '        <img class=\"sg-hide\" ng-src=\"{{::image.url}}\" ng-click=\"$panelCtrl.selectImage($index)\">',\n        '      </div>',\n        '    </div>',\n        '</sg-image-gallery>'\n      ].join(''),\n      trapFocus: true,\n      clickOutsideToClose: true,\n      escapeToClose: true,\n      focusOnOpen: true,\n      onOpenComplete: function() {\n        _this.show = true;\n        _.forEach(ImageGallery.$document.find('sg-image-gallery')[0].getElementsByClassName('sg-image-thumbnail'),\n                  function(imgContainer) {\n                    var imgEl = imgContainer.children[0];\n                    angular.element(imgEl).one('load', function() {\n                      if (imgEl.naturalWidth < imgEl.naturalHeight)\n                        imgEl.classList.add('portrait');\n                    });\n                    // Display thumbnail\n                    ImageGallery.$timeout(function() {\n                      imgEl.classList.remove('sg-hide');\n                    }, 1000);\n                  });\n      },\n      onDomRemoved: function() {\n        angular.element(ImageGallery.$document[0].body).removeClass('sg-image-gallery-backdrop');\n        _this.show = false;\n        // Deregister hotkeys\n        _.forEach(_this.hotkeys, function(key) {\n          ImageGallery.sgHotkeys.deregisterHotkey(key);\n        });\n      }\n    };\n\n    $mdPanel.open(config).then(function(mdPanelRef) {\n      _this.registerHotkeys(mdPanelRef.$ctrl);\n    });\n\n    PanelController.$inject = ['mdPanelRef'];\n    function PanelController(mdPanelRef) {\n      var $menuCtrl = this;\n\n      mdPanelRef.$ctrl = this;\n\n      this.close = function() {\n        mdPanelRef.close();\n      };\n\n      this.selectImage = function(index) {\n        this.selectedIndex = index;\n        this.selectedImage = this.images[index];\n      };\n\n      this.nextImage = function() {\n        if (this.selectedIndex != this.lastIndex)\n          this.selectImage(this.selectedIndex + 1);\n      };\n\n      this.previousImage = function() {\n        if (this.selectedIndex > 0)\n          this.selectImage(this.selectedIndex - 1);\n      };\n\n    } // PanelController\n\n  };\n\n  /* Factory registration in Angular module */\n  angular.module('SOGo.MailerUI')\n    .factory('ImageGallery', ImageGallery.$factory);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() {\n      _this.$isLoading = false;\n    });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof VirtualMailbox.prototype\n   * @desc A no-op for virtual mailbox\n   */\n  VirtualMailbox.prototype.selectFolder = function() {\n    return;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.forEach(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if a message is selected among the resulting mailboxes\n   * @returns true if one message is selected\n   */\n  VirtualMailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return angular.isDefined(mailbox.selectedMessage);\n    }));\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Return an associative array of the selected messages for each mailbox. Keys are the mailboxes ids.\n   * @returns an associative array\n   */\n  VirtualMailbox.prototype.$selectedMessages = function() {\n    var messagesMap = {};\n    return _.transform(this.$mailboxes, function(messagesMap, mailbox) {\n      messagesMap[mailbox.id] = mailbox.$selectedMessages();\n    }, {});\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    return _.sum(_.invokeMap(this.$mailboxes, '$selectedCount'));\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @param {object} messagesMap\n   * @param {array} flags\n   * @param {string} operation\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(messagesMap, flags, operation) {\n    var data = {\n      flags: flags,\n      operation: operation\n    };\n    var allMessages = [];\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var uids = _.map(messages, 'uid');\n        allMessages.push(messages);\n        var promise = VirtualMailbox.$$resource.post(id, 'addOrRemoveLabel', _.assign(data, {msgUIDs: uids}));\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises).then(function() {\n      return _.flatten(allMessages);\n    });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$deleteMessages(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof VirtualMailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$markOrUnMarkMessagesAsJunk(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$copyMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$moveMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$scope', '$timeout', '$q', '$state', '$mdDialog', '$mdToast', 'stateAccounts', 'stateAccount', 'stateMailbox', 'sgHotkeys', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Preferences', 'Account', 'Mailbox'];\n  function MailboxController($window, $scope, $timeout, $q, $state, $mdDialog, $mdToast, stateAccounts, stateAccount, stateMailbox, sgHotkeys, encodeUriFilter, sgSettings, focus, Dialog, Preferences, Account, Mailbox) {\n    var vm = this,\n        defaultWindowTitle = angular.element($window.document).find('title').attr('sg-default') || \"SOGo\",\n        hotkeys = [];\n\n    this.$onInit = function() {\n      // Expose controller for eventual popup windows\n      $window.$mailboxController = vm;\n\n      this.service = Mailbox;\n      this.accounts = stateAccounts;\n      this.account = stateAccount;\n      this.selectedFolder = stateMailbox;\n      this.messageDialog = null; // also access from Message controller\n      this.mode = { search: false, multiple: 0 };\n\n      _registerHotkeys(hotkeys);\n\n      // Expunge mailbox when leaving the Mail module\n      angular.element($window).on('beforeunload', _compactBeforeUnload);\n      $scope.$on('$destroy', function() {\n        angular.element($window).off('beforeunload', _compactBeforeUnload);\n        // Deregister hotkeys\n        _.forEach(hotkeys, function(key) {\n          sgHotkeys.deregisterHotkey(key);\n        });\n      });\n\n      // Update window's title with unseen messages count of selected mailbox\n      $scope.$watch(function() { return vm.selectedFolder.unseenCount; }, function(unseenCount) {\n        var title = defaultWindowTitle + ' - ';\n        if (unseenCount)\n          title += '(' + unseenCount + ') ';\n        title += vm.selectedFolder.$displayName;\n        $window.document.title = title;\n      });\n    };\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_search'),\n        description: l('Search'),\n        callback: vm.searchMode\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_compose'),\n        description: l('Write a new message'),\n        callback: function($event) {\n          if (vm.messageDialog === null)\n            vm.newMessage($event);\n        }\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_junk'),\n        description: l('Mark the selected messages as junk'),\n        callback: vm.markOrUnMarkMessagesAsJunk\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'space',\n        description: l('Toggle item'),\n        callback: vm.toggleMessageSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+space',\n        description: l('Toggle range of items'),\n        callback: vm.toggleMessageSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'up',\n        description: l('View next item'),\n        callback: _nextMessage,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'down',\n        description: l('View previous item'),\n        callback: _previousMessage,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+up',\n        description: l('Add next item to selection'),\n        callback: _addNextMessageToSelection,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+down',\n        description: l('Add previous item to selection'),\n        callback: _addPreviousMessageToSelection,\n        preventInClass: ['sg-mail-part']\n      }));\n      _.forEach(['backspace', 'delete'], function(hotkey) {\n        keys.push(sgHotkeys.createHotkey({\n          key: hotkey,\n          description: l('Delete selected message or folder'),\n          callback: vm.confirmDeleteSelectedMessages\n        }));\n      });\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function _compactBeforeUnload(event) {\n      return vm.selectedFolder.$compact();\n    }\n\n    this.centerIsClose = function(navController_centerIsClose) {\n      // Allow the messages list to be hidden only if a message is selected\n      return this.selectedFolder.hasSelectedMessage() && !!navController_centerIsClose;\n    };\n\n    this.sort = function(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    };\n\n    this.sortedBy = function(field) {\n      return Mailbox.$query.sort == field;\n    };\n\n    this.searchMode = function() {\n      vm.mode.search = true;\n      focus('search');\n    };\n\n    this.cancelSearch = function() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter().then(function() {\n        if (vm.selectedFolder.selectedMessage) {\n          $timeout(function() {\n            vm.selectedFolder.$topIndex = vm.selectedFolder.uidsMap[vm.selectedFolder.selectedMessage];\n          });\n        }\n      });\n    };\n\n    this.composeWindowEnabled = function() {\n      return Preferences.defaults.SOGoMailComposeWindowEnabled;\n    };\n\n    this.newMessage = function($event, inPopup) {\n      var message;\n\n      if (vm.messageDialog === null) {\n        if (inPopup || Preferences.defaults.SOGoMailComposeWindow == 'popup')\n          _newMessageInPopup();\n        else {\n          message = vm.account.$newMessage();\n          vm.messageDialog = $mdDialog\n            .show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: 'UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccount: vm.account,\n                stateMessage: message\n              }\n            })\n            .catch(_.noop) // Cancel\n            .finally(function() {\n              vm.messageDialog = null;\n            });\n        }\n      }\n    };\n\n    function _newMessageInPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#!/Mail',\n                 vm.account.id,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.selectedFolder.path)),\n                 'new']\n          .join('/'),\n          wId = vm.selectedFolder.$id() + '/' + Math.random(0, 1000);\n      console.debug(url);\n      $window.open(url, wId,\n                   [\"width=680\",\n                    \"height=520\",\n                    \"resizable=1\",\n                    \"scrollbars=1\",\n                    \"toolbar=0\",\n                    \"location=0\",\n                    \"directories=0\",\n                    \"status=0\",\n                    \"menubar=0\",\n                    \"copyhistory=0\"]\n                   .join(','));\n    }\n\n    /**\n     * User has pressed up arrow key\n     */\n    function _nextMessage($event) {\n      var index = vm.selectedFolder.$selectedMessageIndex();\n\n      if (angular.isDefined(index)) {\n        index--;\n        if (vm.selectedFolder.$topIndex > 0)\n          vm.selectedFolder.$topIndex--;\n      }\n      else {\n        // No message is selected, show oldest message\n        index = vm.selectedFolder.getLength() - 1;\n        vm.selectedFolder.$topIndex = vm.selectedFolder.getLength();\n      }\n\n      if (index > -1)\n        vm.selectMessage(vm.selectedFolder.$messages[index]);\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    /**\n     * User has pressed the down arrow key\n     */\n    function _previousMessage($event) {\n      var index = vm.selectedFolder.$selectedMessageIndex();\n\n      if (angular.isDefined(index)) {\n        index++;\n        if (vm.selectedFolder.$topIndex < vm.selectedFolder.getLength())\n          vm.selectedFolder.$topIndex++;\n      }\n      else\n        // No message is selected, show newest\n        index = 0;\n\n      if (index < vm.selectedFolder.getLength())\n        vm.selectMessage(vm.selectedFolder.$messages[index]);\n      else\n        index = -1;\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    function _addNextMessageToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedMessage()) {\n        index = _nextMessage($event);\n        if (index >= 0)\n          vm.toggleMessageSelection($event, vm.selectedFolder.$messages[index]);\n      }\n    }\n\n    function _addPreviousMessageToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedMessage()) {\n        index = _previousMessage($event);\n        if (index >= 0)\n          vm.toggleMessageSelection($event, vm.selectedFolder.$messages[index]);\n      }\n    }\n\n    this.selectMessage = function(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {messageId: message.uid});\n    };\n\n    this.toggleMessageSelection = function($event, message) {\n      var folder = vm.selectedFolder,\n          selectedIndex, nextSelectedIndex, i;\n\n      if (!message)\n        message = folder.$selectedMessage();\n      if (!message)\n        return true;\n      message.selected = !message.selected;\n      vm.mode.multiple += message.selected? 1 : -1;\n\n      // Select closest range of messages when shift key is pressed\n      if ($event.shiftKey && folder.$selectedCount() > 1) {\n        selectedIndex = folder.uidsMap[message.uid];\n        // Search for next selected message above\n        nextSelectedIndex = selectedIndex - 2;\n        while (nextSelectedIndex >= 0 &&\n               !folder.$messages[nextSelectedIndex].selected)\n          nextSelectedIndex--;\n        if (nextSelectedIndex < 0) {\n          // Search for next selected message bellow\n          nextSelectedIndex = selectedIndex + 2;\n          while (nextSelectedIndex < folder.getLength() &&\n                 !folder.$messages[nextSelectedIndex].selected)\n            nextSelectedIndex++;\n        }\n        if (nextSelectedIndex >= 0 && nextSelectedIndex < folder.getLength()) {\n          for (i = Math.min(selectedIndex, nextSelectedIndex);\n               i <= Math.max(selectedIndex, nextSelectedIndex);\n               i++)\n            folder.$messages[i].selected = true;\n        }\n      }\n\n      $event.preventDefault();\n      $event.stopPropagation();\n    };\n\n    /**\n     * Batch operations\n     */\n\n    function _currentMailboxes() {\n      if (Mailbox.$virtualMode)\n        return vm.selectedFolder.$mailboxes;\n      else\n        return [vm.selectedFolder];\n    }\n\n    // Unselect current message and cleverly load the next message.\n    // This function must not be called in virtual mode.\n    function _unselectMessage(message, index) {\n      var nextMessage, previousMessage, nextIndex = index;\n      vm.mode.multiple = vm.selectedFolder.$selectedCount();\n      if (message) {\n        // Select either the next or previous message\n        if (index > 0) {\n          nextIndex -= 1;\n          nextMessage = vm.selectedFolder.$messages[nextIndex];\n        }\n        if (index < vm.selectedFolder.$messages.length)\n          previousMessage = vm.selectedFolder.$messages[index];\n        if (nextMessage) {\n          if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n        }\n        else if (previousMessage) {\n          nextIndex = index;\n          nextMessage = previousMessage;\n        }\n        if (nextMessage) {\n          vm.selectedFolder.$topIndex = nextIndex;\n          $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n        }\n        else {\n          $state.go('mail.account.mailbox');\n        }\n      }\n      else {\n        $timeout(function() {\n          console.warn('go to mailbox');\n          $state.go('mail.account.mailbox');\n        });\n      }\n    }\n\n    this.confirmDeleteSelectedMessages = function($event) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n\n      if (vm.messageDialog === null && _.size(selectedMessages) > 0)\n        vm.messageDialog = Dialog.confirm(l('Confirmation'),\n                                       l('Are you sure you want to delete the selected messages?'),\n                                       { ok: l('Delete') })\n        .then(function() {\n          var deleteSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n          vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (deleteSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(deleteSelectedMessage, index);\n            }\n          }, function(response) {\n            vm.messageDialog = Dialog.confirm(l('Warning'),\n                                           l('The messages could not be moved to the trash folder. Would you like to delete them immediately?'),\n                                           { ok: l('Delete') })\n              .then(function() {\n                vm.selectedFolder.$deleteMessages(selectedMessages, { withoutTrash: true }).then(function(index) {\n                  if (Mailbox.$virtualMode) {\n                    // When performing an advanced search, we refresh the view if the selected message\n                    // was deleted, but only once all promises have completed.\n                    if (deleteSelectedMessage)\n                      $state.go('mail.account.virtualMailbox');\n                  }\n                  else {\n                    // In normal mode, we immediately unselect the selected message.\n                    _unselectMessage(deleteSelectedMessage, index);\n                  }\n                });\n              });\n          });\n        })\n        .finally(function() {\n          vm.messageDialog = null;\n        });\n\n      $event.preventDefault();\n    };\n\n    this.markOrUnMarkMessagesAsJunk = function() {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) === 0 && moveSelectedMessage)\n        selectedMessages = [vm.selectedFolder.$selectedMessage()];\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$markOrUnMarkMessagesAsJunk(selectedMessages).then(function() {\n          var dstFolder = '/' + vm.account.id + '/folderINBOX';\n          if (vm.selectedFolder.type != 'junk') {\n            dstFolder = '/' + vm.account.$getMailboxByType('junk').id;\n          }\n          vm.selectedFolder.$moveMessages(selectedMessages, dstFolder).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (moveSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(moveSelectedMessage, index);\n            }\n          });\n        });\n    };\n\n    this.copySelectedMessages = function(dstFolder) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$copyMessages(selectedMessages, '/' + dstFolder).then(function() {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) copied', vm.selectedFolder.$selectedCount()))\n              .position('top right')\n              .hideDelay(2000));\n        });\n    };\n\n    this.moveSelectedMessages = function(dstFolder) {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      var count = vm.selectedFolder.$selectedCount();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$moveMessages(selectedMessages, '/' + dstFolder).then(function(index) {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) moved', count))\n              .position('top right')\n              .hideDelay(2000));\n          if (Mailbox.$virtualMode) {\n            // When performing an advanced search, we refresh the view if the selected message\n            // was moved, but only once all promises have completed.\n            if (moveSelectedMessage)\n              $state.go('mail.account.virtualMailbox');\n          }\n          else {\n            // In normal mode, we immediately unselect the selected message.\n            _unselectMessage(moveSelectedMessage, index);\n          }\n        });\n    };\n\n    this.selectAll = function() {\n      var count = 0;\n      _.forEach(_currentMailboxes(), function(folder) {\n        var i = 0, length = folder.$messages.length;\n        for (; i < length; i++)\n          folder.$messages[i].selected = true;\n        count += length;\n      });\n      vm.mode.multiple = count;\n    };\n\n    this.unselectMessages = function() {\n      _.forEach(_currentMailboxes(), function(folder) {\n        _.forEach(folder.$messages, function(message) {\n          message.selected = false;\n        });\n      });\n      vm.mode.multiple = 0;\n    };\n\n    this.markSelectedMessagesAsFlagged = function() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$flagMessages(selectedMessages, '\\\\Flagged', 'add').then(function(messages) {\n          _.forEach(messages, function(message) {\n            message.isflagged = true;\n          });\n        });\n    };\n\n    this.markSelectedMessagesAsUnread = function() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0) {\n        vm.selectedFolder.$flagMessages(selectedMessages, 'seen', 'remove').then(function(messages) {\n          _.forEach(messages, function(message) {\n            if (message.isread)\n              message.$mailbox.unseenCount++;\n            message.isread = false;\n          });\n        });\n      }\n    };\n\n    this.markSelectedMessagesAsRead = function() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0) {\n        vm.selectedFolder.$flagMessages(selectedMessages, 'seen', 'add').then(function(messages) {\n          _.forEach(messages, function(message) {\n            if (!message.isread)\n              message.$mailbox.unseenCount--;\n            message.isread = true;\n          });\n        });\n      }\n    };\n\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n})();\n\n","/* -*- Mode: js; indent-tabs-mode: nil; js-indent-level: 2; -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$scope', '$state', '$transitions', '$timeout', '$window', '$mdDialog', '$mdToast', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'sgHotkeys', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($scope, $state, $transitions, $timeout, $window, $mdDialog, $mdToast, focus, encodeUriFilter, Dialog, Settings, sgHotkeys, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox,\n        hotkeys = [];\n\n    this.$onInit = function () {\n      this.service = Mailbox;\n      this.accounts = stateAccounts;\n\n      // Advanced search options\n      this.currentSearchParam = '';\n      this.search = {\n        options: {'': '',  // no placeholder when no criteria is active\n                  subject: l('Enter Subject'),\n                  from:    l('Enter From'),\n                  to:      l('Enter To'),\n                  cc:      l('Enter Cc'),\n                  body:    l('Enter Body')\n                 },\n        subfolders: 1,\n        match: 'AND',\n        params: []\n      };\n\n      this.showSubscribedOnly = Preferences.defaults.SOGoMailShowSubscribedFoldersOnly;\n\n      this.refreshUnseenCount();\n\n      _registerHotkeys(hotkeys);\n\n      $scope.$on('$destroy', function() {\n        // Deregister hotkeys\n        _.forEach(hotkeys, function(key) {\n          sgHotkeys.deregisterHotkey(key);\n        });\n      });\n    };\n\n\n    function _registerHotkeys(keys) {\n      _.forEach(['backspace', 'delete'], function(hotkey) {\n        keys.push(sgHotkeys.createHotkey({\n          key: hotkey,\n          description: l('Delete selected message or folder'),\n          callback: function() {\n            if (Mailbox.selectedFolderController && Mailbox.selectedFolder && !Mailbox.selectedFolder.hasSelectedMessage())\n              Mailbox.selectedFolderController.confirmDelete(Mailbox.selectedFolder);\n          }\n        }));\n      });\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    this.hideAdvancedSearch = function() {\n      vm.service.$virtualPath = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    };\n\n    this.toggleAdvancedSearch = function() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.forEach(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(Mailbox.$virtualPath)) {\n          root = vm.accounts[0].$getMailboxByPath(Mailbox.$virtualPath);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        if ($state.$current.name != 'mail.account.virtualMailbox')\n          $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    };\n\n    this.addSearchParam = function(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    };\n\n    this.newSearchParam = function(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    };\n\n    this.toggleAccountState = function (account) {\n      account.$expanded = !account.$expanded;\n      account.$flattenMailboxes({ reload: true, saveState: true });\n      // Fire a window resize to recompute the virtual-repeater.\n      // This is a fix until the following issue is officially resolved:\n      // https://github.com/angular/material/issues/7309\n      $timeout(function() {\n        angular.element($window).triggerHandler('resize');\n      }, 150);\n    };\n\n    this.subscribe = function(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/subscribe',\n        controller: SubscriptionsDialogController,\n        controllerAs: 'subscriptions',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          srcAccount: account\n        }\n      }).finally(function() {\n          account.$getMailboxes({reload: true});\n      });\n\n      /**\n       * @ngInject\n       */\n      SubscriptionsDialogController.$inject = ['$scope', '$mdDialog', 'srcAccount'];\n      function SubscriptionsDialogController($scope, $mdDialog, srcAccount) {\n        var vm = this;\n\n        vm.loading = true;\n        vm.filter = { name: '' };\n        vm.account = new Account({\n          id: srcAccount.id,\n          name: srcAccount.name\n        });\n        vm.close = close;\n\n        vm.account.$getMailboxes({ reload: true, all: true }).then(function() {\n          vm.loading = false;\n        });\n\n        function close() {\n          $mdDialog.hide();\n        }\n      }\n    };\n\n    this.newFolder = function(parentFolder) {\n      Dialog.prompt(l('New Folder...'),\n                    l('Enter the new name of your folder'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    };\n\n    this.delegate = function(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    }; // delegate\n\n    this.refreshUnseenCount = function() {\n      var unseenCountFolders = $window.unseenCountFolders, refreshViewCheck;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually')\n        $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n    };\n\n    this.isDroppableFolder = function(srcFolder, dstFolder) {\n      return (dstFolder.id != srcFolder.id) && !dstFolder.isNoSelect();\n    };\n\n    this.dragSelectedMessages = function(srcFolder, dstFolder, mode) {\n      var dstId, messages, uids, clearMessageView, promise, success;\n\n      dstId = '/' + dstFolder.id;\n      messages = srcFolder.$selectedMessages();\n      if (messages.length === 0)\n        messages = [srcFolder.$selectedMessage()];\n      uids = _.map(messages, 'uid');\n      clearMessageView = (srcFolder.selectedMessage && uids.indexOf(srcFolder.selectedMessage) >= 0);\n\n      if (mode == 'copy') {\n        promise = srcFolder.$copyMessages(messages, dstId);\n        success = l('%{0} message(s) copied', messages.length);\n      }\n      else {\n        promise = srcFolder.$moveMessages(messages, dstId);\n        success = l('%{0} message(s) moved', messages.length);\n      }\n\n      promise.then(function() {\n        if (clearMessageView)\n          $state.go('mail.account.mailbox');\n        $mdToast.show(\n          $mdToast.simple()\n            .content(success)\n            .position('top right')\n            .hideDelay(2000));\n      });\n    };\n\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxesController', MailboxesController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdMedia', '$mdDialog', 'sgConstant', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'sgHotkeys', 'encodeUriFilter', 'sgSettings', 'ImageGallery', 'sgFocus', 'Dialog', 'Preferences', 'Calendar', 'Component', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdMedia, $mdDialog, sgConstant, stateAccounts, stateAccount, stateMailbox, stateMessage, sgHotkeys, encodeUriFilter, sgSettings, ImageGallery, focus, Dialog, Preferences, Calendar, Component, Account, Mailbox, Message) {\n    var vm = this, popupWindow = null, hotkeys = [];\n\n    this.$onInit = function() {\n      // Expose controller\n      $window.$messageController = vm;\n\n      // Initialize image gallery service\n      ImageGallery.setMessage(stateMessage);\n\n      this.$state = $state;\n      this.accounts = stateAccounts;\n      this.account = stateAccount;\n      this.mailbox = stateMailbox;\n      this.message = stateMessage;\n      this.service = Message;\n      this.tags = { searchText: '', selected: '' };\n      this.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n      this.$showDetailedRecipients = false;\n\n      vm.showRawSource = false;\n\n      _registerHotkeys(hotkeys);\n\n      // One-way refresh of the parent window when modifying the message from a popup window.\n      if ($window.opener) {\n        // Update the message flags. The message must be displayed in the parent window.\n        $scope.$watchCollection(function() { return vm.message.flags; }, function(newTags, oldTags) {\n          var ctrls;\n          if (newTags || oldTags) {\n            ctrls = $parentControllers();\n            if (ctrls.messageCtrl) {\n              ctrls.messageCtrl.service.$timeout(function() {\n                ctrls.messageCtrl.showFlags = true;\n                ctrls.messageCtrl.message.flags = newTags;\n              });\n            }\n          }\n        });\n        // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n        $scope.$watch(function() { return vm.message.isflagged; }, function(isflagged, wasflagged) {\n          var ctrls = $parentControllers();\n          if (ctrls.mailboxCtrl) {\n            ctrls.mailboxCtrl.service.$timeout(function() {\n              var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n              message.isflagged = isflagged;\n            });\n          }\n        });\n      }\n      else {\n        // Flatten new tags when coming from the predefined list of tags (Message.$tags) and\n        // sync tags with server when adding or removing a tag.\n        $scope.$watchCollection(function() { return vm.message.flags; }, function(_newTags, _oldTags) {\n          var newTags, oldTags, tags;\n          if (_newTags || _oldTags) {\n            newTags = _newTags || [];\n            oldTags = _oldTags || [];\n            _.forEach(newTags, function(tag, i) {\n              if (angular.isObject(tag))\n                newTags[i] = tag.name;\n            });\n            if (newTags.length > oldTags.length) {\n              tags = _.difference(newTags, oldTags);\n              _.forEach(tags, function(tag) {\n                vm.message.addTag(tag);\n              });\n            }\n            else if (newTags.length < oldTags.length) {\n              tags = _.difference(oldTags, newTags);\n              _.forEach(tags, function(tag) {\n                vm.message.removeTag(tag);\n              });\n            }\n          }\n        });\n      }\n\n      $scope.$on('$destroy', function() {\n        // Deregister hotkeys\n        _.forEach(hotkeys, function(key) {\n          sgHotkeys.deregisterHotkey(key);\n        });\n      });\n\n    }; // $onInit\n\n\n    /**\n     * To keep track of the currently active dialog, we share a common variable with the parent controller.\n     */\n    function _messageDialog() {\n      if ($scope.mailbox) {\n        if (arguments.length > 0)\n          $scope.mailbox.messageDialog = arguments[0];\n        return $scope.mailbox.messageDialog;\n      }\n      return null;\n    }\n\n    function _unlessInDialog(callback) {\n      return function() {\n        // Check if a dialog is opened either from the current controller or the parent controller\n        if (_messageDialog() === null)\n          return callback.apply(vm, arguments);\n      };\n    }\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_reply'),\n        description: l('Reply to the message'),\n        callback: _unlessInDialog(angular.bind(vm, vm.reply))\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_replyall'),\n        description: l('Reply to sender and all recipients'),\n        callback: _unlessInDialog(angular.bind(vm, vm.replyAll))\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_forward'),\n        description: l('Forward selected message'),\n        callback: _unlessInDialog(angular.bind(vm, vm.forward))\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_flag'),\n        description: l('Flagged'),\n        callback: _unlessInDialog(angular.bind(stateMessage, stateMessage.toggleFlag))\n      }));\n      _.forEach(['backspace', 'delete'], function(hotkey) {\n        keys.push(sgHotkeys.createHotkey({\n          key: hotkey,\n          callback: _unlessInDialog(function($event) {\n            if (vm.mailbox.$selectedCount() === 0)\n              vm.deleteMessage();\n            $event.preventDefault();\n          }),\n        }));\n      });\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    this.addFlags = function($event) {\n      this.showFlags = true;\n      focus(\"flags\");\n    };\n\n    this.toggleDetailedRecipients = function($event) {\n      this.$showDetailedRecipients = !this.$showDetailedRecipients;\n      $event.stopPropagation();\n      $event.preventDefault();\n    };\n\n    this.filterMailtoLinks = function($event) {\n      var href, match, to, cc, bcc, subject, body, data;\n      if ($event.target.tagName == 'A' && 'href' in $event.target.attributes) {\n        href = $event.target.attributes.href.value;\n        match = /^mailto:([^\\?]+)/.exec(href);\n        if (match) {\n          delete $event.target.attributes.target;\n          this.newMessage($event, href); // will stop event propagation\n        }\n      }\n    };\n\n    this.deleteMessage = function() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage && $mdMedia(sgConstant['gt-md'])) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              if (nextIndex < mailbox.$topIndex)\n                mailbox.$topIndex = nextIndex;\n              else if (nextIndex > mailbox.$lastVisibleIndex)\n                mailbox.$topIndex = nextIndex - (mailbox.$lastVisibleIndex - mailbox.$topIndex);\n            }\n            else {\n              state.go('mail.account.mailbox').then(function() {\n                message = null;\n                delete mailbox.selectedMessage;\n              });\n            }\n          }\n          catch (error) {}\n        }\n        vm.closePopup();\n      });\n    };\n\n    function _showMailEditor($event, message) {\n      if (_messageDialog() === null) {\n        _messageDialog(\n          $mdDialog\n            .show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: 'UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccount: vm.account,\n                stateMessage: message\n              }\n            })\n            .catch(_.noop) // Cancel\n            .finally(function() {\n              _messageDialog(null);\n              vm.closePopup();\n            })\n        );\n      }\n    }\n\n    this._showMailEditorInPopup = function(action) {\n      if (!sgSettings.isPopup &&\n          Preferences.defaults.SOGoMailComposeWindow == 'popup') {\n        this.openInPopup(action);\n        return true;\n      }\n      return false;\n    };\n\n    this.close = function() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    };\n\n    this.reply = function($event) {\n      if (!this._showMailEditorInPopup('reply')) {\n        _showMailEditor($event, this.message.$reply());\n      }\n    };\n\n    this.replyAll = function($event) {\n      if (!this._showMailEditorInPopup('replyall')) {\n        _showMailEditor($event, this.message.$replyAll());\n      }\n    };\n\n    this.forward = function($event) {\n      if (!this._showMailEditorInPopup('forward')) {\n        _showMailEditor($event, this.message.$forward());\n      }\n    };\n\n    this.edit = function($event) {\n      if (!this._showMailEditorInPopup('edit')) {\n        this.message.$editableContent().then(function() {\n          _showMailEditor($event, vm.message);\n        });\n      }\n    };\n\n    this.openInPopup = function(action) {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#!/Mail',\n                 this.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(this.message.$mailbox.path)),\n                 this.message.uid]\n          .join('/'),\n          wId = this.message.$absolutePath();\n      if (action) url += '/' + action;\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    };\n\n    this.closePopup = function() {\n      if ($window.document.body.classList.contains('popup'))\n        $window.close();\n    };\n\n    this.newMessage = function($event, mailto) {\n      $event.stopPropagation();\n      $event.preventDefault();\n      this.account.$newMessage({ mailto: mailto }).then(function(message) {\n        _showMailEditor($event, message);\n      });\n    };\n\n    this.toggleRawSource = function($event) {\n      if (!this.showRawSource && !this.message.$rawSource) {\n        Message.$$resource.post(this.message.id, \"viewsource\").then(function(data) {\n          vm.message.$rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        this.showRawSource = !this.showRawSource;\n      }\n    };\n\n    this.print = function($event) {\n      $window.print();\n    };\n\n    this.convertToEvent = function($event) {\n      return _convertToComponent($event, 'appointment');\n    };\n\n    this.convertToTask = function($event) {\n      return _convertToComponent($event, 'task');\n    };\n\n    function _convertToComponent($event, type) {\n      vm.message.$plainContent().then(function(data) {\n        var componentData = {\n          pid: Calendar.$defaultCalendar(),\n          type: type,\n          summary: data.subject,\n          comment: data.content\n        };\n        var component = new Component(componentData);\n        // UI/Templates/SchedulerUI/UIxAppointmentEditorTemplate.wox or\n        // UI/Templates/SchedulerUI/UIxTaskEditorTemplate.wox\n        var templateUrl = [\n          sgSettings.activeUser('folderURL'),\n          'Calendar',\n          'UIx' + type.capitalize() + 'EditorTemplate'\n        ].join('/');\n        return $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: templateUrl,\n          controller: 'ComponentEditorController',\n          controllerAs: 'editor',\n          locals: {\n            stateComponent: component\n          }\n        });\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MessageController', MessageController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$scope', '$window', '$stateParams', '$mdConstant', '$mdUtil', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccount', 'stateMessage', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($scope, $window, $stateParams, $mdConstant, $mdUtil, $mdDialog, $mdToast, FileUploader, stateAccount, stateMessage, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this;\n\n    this.$onInit = function() {\n      vm.addRecipient = addRecipient;\n      vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n      vm.autosave = null;\n      vm.autosaveDrafts = autosaveDrafts;\n      vm.cancel = cancel;\n      vm.contactFilter = contactFilter;\n      vm.isFullscreen = false;\n      vm.hideBcc = (stateMessage.editable.bcc.length === 0);\n      vm.hideCc = (stateMessage.editable.cc.length === 0);\n      vm.identities = _.uniq(_.map(stateAccount.identities, 'full'));\n      vm.message = stateMessage;\n      vm.recipientSeparatorKeys = [\n        $mdConstant.KEY_CODE.ENTER,\n        $mdConstant.KEY_CODE.TAB,\n        $mdConstant.KEY_CODE.COMMA,\n        $mdConstant.KEY_CODE.SEMICOLON\n      ];\n      vm.removeAttachment = removeAttachment;\n      vm.save = save;\n      vm.send = send;\n      vm.sendState = false;\n      vm.toggleFullscreen = toggleFullscreen;\n\n      _initFileUploader();\n\n      // Read user's defaults\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n\n      // Destroy file uploader when the controller is being deactivated\n      $scope.$on('$destroy', function() { vm.uploader.destroy(); });\n\n      if ($stateParams.actionName == 'reply') {\n        stateMessage.$reply().then(function(msgObject) {\n          vm.message = msgObject;\n          vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n          vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n          _updateFileUploader();\n        });\n      }\n      else if ($stateParams.actionName == 'replyall') {\n        stateMessage.$replyAll().then(function(msgObject) {\n          vm.message = msgObject;\n          vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n          vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n          _updateFileUploader();\n        });\n      }\n      else if ($stateParams.actionName == 'forward') {\n        stateMessage.$forward().then(function(msgObject) {\n          vm.message = msgObject;\n          _updateFileUploader();\n          _addAttachments();\n        });\n      }\n      else if (angular.isDefined(stateMessage)) {\n        vm.message = stateMessage;\n        _updateFileUploader();\n        _addAttachments();\n      }\n    };\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n\n      try {\n        if ($window.opener) {\n          if ('$mailboxController' in $window.opener &&\n              'selectedFolder' in $window.opener.$mailboxController) {\n            if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n              ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n              if ('$messageController' in $window.opener &&\n                  $window.opener.$messageController.message.uid == stateMessage.uid) {\n                // The draft is opened in the parent window\n                ctrls.draftMessageCtrl = $window.opener.$messageController;\n              }\n            }\n            else if (stateMessage.origin) {\n              originMessage = stateMessage.origin.message;\n              if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n                // The message mailbox is opened in the parent window\n                ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n              }\n            }\n          }\n        }\n      }\n      catch (e) {}\n\n      return ctrls;\n    }\n\n    function _initFileUploader() {\n      vm.uploader = new FileUploader({\n        url: vm.message.$absolutePath({asDraft: true, withResourcePath: true}) + '/save',\n        autoUpload: true,\n        alias: 'attachments',\n        removeAfterUpload: false,\n        // onProgressItem: function(item, progress) {\n        //   console.debug(item); console.debug(progress);\n        // },\n        onSuccessItem: function(item, response, status, headers) {\n          vm.message.$setUID(response.uid);\n          vm.message.$reload({asDraft: false});\n          item.inlineUrl = response.lastAttachmentAttrs[0].url;\n          //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n        },\n        onCancelItem: function(item, response, status, headers) {\n          //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n          // We remove the attachment\n          vm.message.$deleteAttachment(item.file.name);\n          this.removeFromQueue(item);\n        },\n        onErrorItem: function(item, response, status, headers) {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('Error while uploading the file \\\"%{0}\\\":', item.file.name) +\n                       ' ' + (response.message? l(response.message) : ''))\n              .position('top right')\n              .action(l('OK'))\n              .hideDelay(false));\n          this.removeFromQueue(item);\n          //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n        }\n      });\n    }\n\n    function _updateFileUploader() {\n      vm.uploader.url = vm.message.$absolutePath({asDraft: true, withResourcePath: true}) + '/save';\n    }\n\n    function _addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem, attrs = vm.message.editable.attachmentAttrs;\n      if (attrs)\n        for (i = 0; i < attrs.length; i++) {\n          data = {\n            name: attrs[i].filename,\n            type: attrs[i].mimetype,\n            size: parseInt(attrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = attrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item, id) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n      // Hack to allow adding the same file again\n      // See https://github.com/nervgh/angular-file-upload/issues/671\n      var element = $window.document.getElementById(id);\n      if (element)\n        angular.element(element).prop('value', null);\n    }\n\n    function cancel() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      if (vm.message.isNew && vm.message.attachmentAttrs)\n        vm.message.$mailbox.$deleteMessages([vm.message]);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        vm.message.$rawSource = null;\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      vm.sendState = 'sending';\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        var ctrls = $parentControllers();\n        vm.sendState = 'sent';\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n\n        // Let the user see the succesfull message before closing the dialog\n        $timeout($mdDialog.hide, 1000);\n      }, function(response) {\n        $timeout(function() {\n          vm.sendState = 'error';\n          vm.errorMessage = response.data? response.data.message : response.statusText;\n        });\n      });\n    }\n\n    function toggleFullscreen() {\n      vm.isFullscreen = !vm.isFullscreen;\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query).then(function(cards) {\n        // Divide the matching cards by email addresses so the user can select\n        // the recipient address of her choice\n        var explodedCards = [];\n        _.forEach(_.invokeMap(cards, 'explode'), function(manyCards) {\n          _.forEach(manyCards, function(card) {\n            explodedCards.push(card);\n          });\n        });\n        // Remove duplicates\n        return _.uniqBy(explodedCards, function(card) {\n          return card.$$fullname + ' ' + card.$$email;\n        });\n      });\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list, i, address;\n      var emailRE = /([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)/i;\n\n      recipients = vm.message.editable[field];\n\n      if (angular.isString(contact)) {\n        // Examples that are handled:\n        //   Smith, John <john@smith.com>\n        //   <john@appleseed.com>;<foo@bar.com>\n        //   foo@bar.com abc@xyz.com\n        address = '';\n        for (i = 0; i < contact.length; i++) {\n          if ((contact.charCodeAt(i) ==  9 ||   // tab\n               contact.charCodeAt(i) == 32 ||   // space\n               contact.charCodeAt(i) == 44 ||   // ,\n               contact.charCodeAt(i) == 59) &&  // ;\n              emailRE.test(address)) {\n            recipients.push(address);\n            address = '';\n          }\n          else {\n            address += contact.charAt(i);\n          }\n        }\n        if (address)\n          recipients.push(address);\n        return null;\n      }\n\n      if (contact.$isList({expandable: true})) {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.forEach(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n\n  /**\n   * sgAccountSection - A directive that is only a controller to manage the selection of the mailboxes.\n   * @memberof SOGo.MailerUI\n  */\n  function sgAccountSection() {\n    return {\n      restrict: 'C',\n      scope: {},\n      controller: 'sgAccountController'\n    };\n  }\n\n  /**\n   * @ngInject\n   */\n  sgAccountController.$inject = ['$element', '$transitions', '$state', '$mdMedia', '$mdSidenav', 'sgConstant', 'Mailbox', 'encodeUriFilter'];\n  function sgAccountController($element, $transitions, $state, $mdMedia, $mdSidenav, sgConstant, Mailbox, encodeUriFilter) {\n    var $ctrl = this, mailboxes = [];\n\n\n    this.$postLink = function () {\n      this.quotaElement = _.find($element.find('div'), function(div) {\n        return div.classList.contains('sg-quota');\n      });\n    };\n\n\n    // Register a sgMailboxListItem controller\n    this.addMailboxController = function (mailboxController) {\n      mailboxes.push(mailboxController);\n    };\n\n\n    // Called from a sgMailboxListItem controller\n    this.selectFolder = function (mailboxController) {\n      Mailbox.selectedFolderController = mailboxController;\n      if (Mailbox.selectedFolder !== null) {\n        var selectedMailboxCtrl = _.find(mailboxes, function(ctrl) {\n          return ctrl.mailbox.id == Mailbox.selectedFolder.id;\n        });\n        if (selectedMailboxCtrl)\n          selectedMailboxCtrl.unselectFolder();\n      }\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n    };\n\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgAccountController', sgAccountController)\n    .directive('sgAccountSection', sgAccountSection);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n\n  /**\n   * sgImageGallery - A directive that defines the content of a md-list-item for a mailbox.\n   * @memberof SOGo.MailerUI\n  */\n  function sgImageGallery() {\n    return {\n      restrict: 'E',\n      scope: {},\n      bindToController: {\n        message: '=sgMessage'\n      },\n      controller: 'sgImageGalleryController'\n    };\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImageGalleryController.$inject = ['$scope', '$element', '$state', '$mdToast', '$mdPanel', '$mdMedia', '$mdSidenav', 'sgConstant', 'Dialog', 'Mailbox', 'encodeUriFilter'];\n  function sgImageGalleryController($scope, $element, $state, $mdToast, $mdPanel, $mdMedia, $mdSidenav, sgConstant, Dialog, Mailbox, encodeUriFilter) {\n    var $ctrl = this;\n\n\n    this.$onInit = function() {\n    };\n\n\n    this.$postLink = function() {\n    };\n\n\n    this.addImage = function(imgSrc) {\n      console.warn(imgSrc);\n    };\n\n\n    this.showGallery = function($event, imgSrc) {\n      var panelPosition = $mdPanel.newPanelPosition()\n          .relativeTo($event.target)\n          .addPanelPosition(\n            $mdPanel.xPosition.ALIGN_START,\n            $mdPanel.yPosition.ALIGN_TOPS\n          );\n\n      var panelAnimation = $mdPanel.newPanelAnimation()\n          .openFrom($event.target)\n          .duration(100)\n          .withAnimation($mdPanel.animation.FADE);\n\n      var config = {\n        attachTo: angular.element(document.body),\n        locals: {\n          message: this.message\n        },\n        bindToController: true,\n        controller: PanelController,\n        controllerAs: '$panelCtrl',\n        position: panelPosition,\n        animation: panelAnimation,\n        targetEvent: $event,\n        fullscreen: true,\n        template: [\n          '<div class=\"sg-image-gallery\" layout=\"column\" layout-fill=\"layout-fill\">',\n          '  <div layout=\"row\">',\n          '    <></>',\n          'foobar',\n          '</div>'\n        ].join(''),\n        trapFocus: true,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        focusOnOpen: true\n      };\n\n      $mdPanel.open(config)\n        .then(function(panelRef) {\n          // Automatically close panel when clicking inside of it\n          panelRef.panelEl.one('click', function() {\n            panelRef.close();\n          });\n        });\n\n      PanelController.$inject = ['mdPanelRef', '$state', '$mdDialog'];\n      function PanelController(mdPanelRef, $state, $mdDialog) {\n        var $menuCtrl = this;\n\n        \n\n      } // PanelController\n\n\n    };\n  }\n\n\n  // angular\n  //   .module('SOGo.MailerUI')\n  //   .controller('sgImageGalleryController', sgImageGalleryController)\n  //   .directive('sgImageGallery', sgImageGallery);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n\n  /**\n   * sgMailboxListItem - A directive that defines the content of a md-list-item for a mailbox.\n   * @memberof SOGo.MailerUI\n  */\n  function sgMailboxListItem() {\n    return {\n      restrict: 'C',\n      require: {\n        accountController: '^^sgAccountSection'\n      },\n      scope: {},\n      bindToController: {\n        mailbox: '=sgMailbox'\n      },\n      template: [\n        '  <div class=\"sg-child-level-0\"',\n        '       ng-class=\"$ctrl.childLevel()\">',\n        '    <md-checkbox class=\"sg-folder\"',\n        '                 ng-class=\"$ctrl.mailbox.$icon\"',\n        '                 aria-label=\"' + l(\"Expanded\") + '\"',\n        '                 ng-model=\"$ctrl.mailbox.$expanded\"',\n        '                 ng-disabled=\"$ctrl.mailbox.children.length == 0\"',\n        '                 ng-change=\"$ctrl.mailbox.$account.$flattenMailboxes({ reload: true, saveState: true })\">',\n        '    <md-icon>{{$ctrl.mailbox.$icon}}</md-icon></md-checkbox>',\n        '  </div>',\n        '  <p class=\"sg-item-name\"',\n        '    ng-click=\"$ctrl.selectFolder($event)\"',\n        '    ng-dblclick=\"$ctrl.editFolder($event)\">',\n        '    <span ng-bind=\"$ctrl.mailbox.$displayName\"></span>',\n        '    <span class=\"sg-counter-badge ng-hide\"',\n        '          ng-show=\"$ctrl.mailbox.unseenCount\"',\n        '          ng-bind=\"$ctrl.mailbox.unseenCount\"></span>',\n        '  </p>',\n        '  <md-input-container class=\"md-flex ng-hide\">',\n        '    <input class=\"sg-item-name\" type=\"text\"',\n        '           aria-label=\"' + l(\"Enter the new name of your folder\") + '\"',\n        '           ng-blur=\"$ctrl.saveFolder($event)\"',\n        '           sg-enter=\"$ctrl.saveFolder($event)\"',\n        '           sg-escape=\"$ctrl.revertEditing()\" />',\n        '  </md-input-container>',\n        '  <md-icon class=\"md-menu\" ng-click=\"$ctrl.showMenu($event)\" aria-label=\"' + l(\"Options\") + '\">more_vert</md-icon>'\n      ].join(''),\n      controller: 'sgMailboxListItemController',\n      controllerAs: '$ctrl'\n    };\n  }\n\n  /**\n   * @ngInject\n   */\n  sgMailboxListItemController.$inject = ['$scope', '$element', '$state', '$mdToast', '$mdPanel', '$mdMedia', '$mdSidenav', 'sgConstant', 'Dialog', 'Mailbox', 'encodeUriFilter'];\n  function sgMailboxListItemController($scope, $element, $state, $mdToast, $mdPanel, $mdMedia, $mdSidenav, sgConstant, Dialog, Mailbox, encodeUriFilter) {\n    var $ctrl = this;\n\n\n    this.$onInit = function() {\n      this.$element = $element;\n      this.editMode = false;\n      this.accountController.addMailboxController(this);\n    };\n\n\n    this.$postLink = function() {\n      this.selectableElement = $element.find('div')[0];\n      this.clickableElement = $element.find('p')[0];\n      this.inputContainer = $element.find('md-input-container')[0];\n      this.inputElement = $element.find('input')[0];\n      this.moreOptionsButton = _.last($element.find('md-icon'));\n\n      // Check if router's state has selected a mailbox\n      if (Mailbox.selectedFolder !== null && Mailbox.selectedFolder.id == this.mailbox.id) {\n        this.accountController.selectFolder(this);\n      }\n    };\n\n    this.childLevel = function() {\n      return 'sg-child-level-' + this.mailbox.level;\n    };\n\n\n    this.selectFolder = function($event) {\n      if (this.editMode || this.mailbox == Mailbox.selectedFolder || this.mailbox.isNoSelect())\n        return;\n      Mailbox.$virtualPath = false;\n      Mailbox.$virtualMode = false;\n      this.accountController.selectFolder(this);\n      if ($event) {\n        $state.go('mail.account.mailbox', {\n          accountId: this.mailbox.$account.id,\n          mailboxId: encodeUriFilter(this.mailbox.path)\n        });\n        $event.stopPropagation();\n        $event.preventDefault();\n      }\n    };\n\n\n    this.unselectFolder = function() {\n      $element[0].classList.remove('md-bg');\n    };\n\n\n    this.editFolder = function($event) {\n      this.editMode = true;\n      this.inputElement.value = this.mailbox.name;\n      this.clickableElement.classList.add('ng-hide');\n      this.inputContainer.classList.remove('ng-hide');\n      this.inputElement.focus();\n      this.inputElement.select();\n      if ($event) {\n        $event.stopPropagation();\n        $event.preventDefault();\n      }\n    };\n\n\n    this.saveFolder = function($event) {\n      if (this.inputElement.disabled)\n        return;\n\n      this.mailbox.name = this.inputElement.value;\n      this.inputElement.disabled = true;\n      this.mailbox.$rename()\n        .then(function(data) {\n          $ctrl.editMode = false;\n          $ctrl.inputContainer.classList.add('ng-hide');\n          $ctrl.clickableElement.classList.remove('ng-hide');\n        })\n        .finally(function() {\n          $ctrl.inputElement.disabled = false;\n        });\n    };\n\n\n    this.revertEditing = function() {\n      this.editMode = false;\n      this.clickableElement.classList.remove('ng-hide');\n      this.inputContainer.classList.add('ng-hide');\n      this.inputElement.value = this.mailbox.name;\n    };\n\n\n    this.confirmDelete = function() {\n      Dialog.confirm(l('Warning'),\n                     l('Do you really want to move this folder into the trash ?'),\n                     { ok: l('Delete') })\n        .then(function() {\n          $ctrl.mailbox.$delete()\n            .then(function() {\n              $state.go('mail.account.inbox');\n            }, function(response) {\n              Dialog.confirm(l('Warning'),\n                             l('The mailbox could not be moved to the trash folder. Would you like to delete it immediately?'),\n                             { ok: l('Delete') })\n                .then(function() {\n                  $ctrl.mailbox.$delete({ withoutTrash: true })\n                    .then(function() {\n                      $state.go('mail.account.inbox');\n                    }, function(response) {\n                      Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', $ctrl.mailbox.name),\n                                   l(response.error));\n                    });\n                });\n            });\n        });\n    };\n\n\n    this.showMenu = function($event) {\n      var panelPosition = $mdPanel.newPanelPosition()\n          .relativeTo(this.moreOptionsButton)\n          .addPanelPosition(\n            $mdPanel.xPosition.ALIGN_START,\n            $mdPanel.yPosition.ALIGN_TOPS\n          );\n\n      var panelAnimation = $mdPanel.newPanelAnimation()\n          .openFrom(this.moreOptionsButton)\n          .duration(100)\n          .withAnimation($mdPanel.animation.FADE);\n\n      var config = {\n        attachTo: angular.element(document.body),\n        locals: {\n          itemCtrl: this,\n          folder: this.mailbox,\n          confirmDelete: this.confirmDelete\n        },\n        bindToController: true,\n        controller: MenuController,\n        controllerAs: '$menuCtrl',\n        position: panelPosition,\n        animation: panelAnimation,\n        targetEvent: $event,\n        templateUrl: 'UIxMailFolderMenu',\n        trapFocus: true,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        focusOnOpen: true\n      };\n\n      $mdPanel.open(config)\n        .then(function(panelRef) {\n          // Automatically close panel when clicking inside of it\n          panelRef.panelEl.one('click', function() {\n            panelRef.close();\n          });\n        });\n\n      MenuController.$inject = ['mdPanelRef', '$state', '$mdDialog', 'User'];\n      function MenuController(mdPanelRef, $state, $mdDialog, User) {\n        var $menuCtrl = this;\n\n        this.markFolderRead = function() {\n          this.folder.$markAsRead();\n        };\n\n        this.newFolder = function() {\n          Dialog.prompt(l('New Folder...'),\n                        l('Enter the new name of your folder'))\n            .then(function(name) {\n              $menuCtrl.folder.$newMailbox($menuCtrl.folder.id, name)\n                .then(function() {\n                  // success\n                }, function(data, status) {\n                  Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                               l(data.error));\n                });\n            });\n        };\n\n        this.editFolder = function() {\n          this.itemCtrl.editFolder();\n        };\n\n        this.compactFolder = function() {\n          this.folder.$compact().then(function() {\n            $mdToast.show(\n              $mdToast.simple()\n                .content(l('Folder compacted'))\n                .position('top right')\n                .hideDelay(3000));\n          });\n        };\n\n        this.emptyTrashFolder = function() {\n          this.folder.$emptyTrash().then(function() {\n            $mdToast.show(\n              $mdToast.simple()\n                .content(l('Trash emptied'))\n                .position('top right')\n                .hideDelay(3000));\n          });\n        };\n\n        this.showAdvancedSearch = function() {\n          Mailbox.$virtualPath = this.folder.path;\n          // Close sidenav on small devices\n          if (!$mdMedia(sgConstant['gt-md']))\n            $mdSidenav('left').close();\n        };\n\n        this.share = function() {\n          // Fetch list of ACL users\n          this.folder.$acl.$users().then(function() {\n            // Show ACL editor\n            $mdDialog.show({\n              templateUrl: $menuCtrl.folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n              controller: 'AclController', // from the ng module SOGo.Common\n              controllerAs: 'acl',\n              clickOutsideToClose: true,\n              escapeToClose: true,\n              locals: {\n                usersWithACL: $menuCtrl.folder.$acl.users,\n                User: User,\n                folder: $menuCtrl.folder\n              }\n            });\n          });\n        };\n\n        this.setFolderAs = function(type) {\n          this.folder.$setFolderAs(type).then(function() {\n            $menuCtrl.folder.$account.$getMailboxes({reload: true});\n          });\n        };\n\n      } // MenuController\n\n\n    };\n  }\n\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgMailboxListItemController', sgMailboxListItemController)\n    .directive('sgMailboxListItem', sgMailboxListItem);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n\n  /**\n   * sgMessageListItem - A directive that watches some attributes of a message. Any component inside the\n   * list item should depends on this directive and extend the 'onUpdate' method instead of creating new\n   * independent watchers.\n   * @memberof SOGo.MailerUI\n  */\n  function sgMessageListItem() {\n    return {\n      restrict: 'C',\n      scope: {},\n      bindToController: {\n        message: '=sgMessage'\n      },\n      controller: 'sgMessageListItemController'\n    };\n  }\n\n  /**\n   * @ngInject\n   */\n  sgMessageListItemController.$inject = ['$scope', '$element', 'Mailbox'];\n  function sgMessageListItemController($scope, $element, Mailbox) {\n    var $ctrl = this;\n\n\n    this.$onInit = function () {\n      var watchedAttrs = ['uid', 'isread', 'isflagged', 'flags', 'subject'];\n\n      // this.service = Message;\n      this.MailboxService = Mailbox;\n\n      if (Mailbox.selectedFolder.type == 'draft')\n        watchedAttrs.push('subject');\n\n      $scope.$watch(\n        function() {\n          return $ctrl.message? [ _.pick($ctrl.message, watchedAttrs) ] : null;\n        },\n        function(newId, oldId) {\n          if ($ctrl.message) {\n            // Message has changed\n            $ctrl.onUpdate();\n          }\n        },\n        true // compare for object equality\n      );\n    };\n\n\n    this.onUpdate = function () {\n      // Is the message unread?\n      if (this.message.isread)\n        $element.removeClass('unread');\n      else\n        $element.addClass('unread');\n      // Is the message selected?\n      if (Mailbox.selectedFolder.isSelectedMessage(this.message.uid, this.message.$mailbox.path))\n        $element.addClass('md-default-theme md-accent md-bg md-hue-2');\n      else\n        $element.removeClass('md-default-theme md-accent md-bg md-hue-2');\n    };\n\n\n    this.setVisibility = function (element, visible) {\n      if (visible)\n        element.classList.remove('ng-hide');\n      else\n        element.classList.add('ng-hide');\n    };\n\n  }\n\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgMessageListItemController', sgMessageListItemController)\n    .directive('sgMessageListItem', sgMessageListItem);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n\n  /**\n   * sgMessageListItemMain - The main section of a list item for a message. It relies on the\n   * 'onUpdate' method of the parent sgMessageListItem controller to update its content.\n   * @memberof SOGo.MailerUI\n   * @example:\n  */\n  function sgMessageListItemMain() {\n    return {\n      restrict: 'C',\n      require: '^^sgMessageListItem',\n      scope: {},\n      template: [\n        '<div class=\"sg-tile-content\">',\n        '  <div class=\"sg-md-subhead\">',\n        '    <div>',\n        '      <span class=\"sg-label-outline ng-hide\"><!-- mailbox --></span>',\n        '      <md-icon class=\"ng-hide\">error</md-icon>', // the priority icon\n        '      <span><!-- sender or recipient --></span>',\n        '    </div>',\n        '    <div class=\"sg-tile-date\"><!-- date --></div>',\n        '  </div>',\n        '  <div class=\"sg-md-body\">',\n        '    <div class=\"sg-tile-subject\"><!-- subject --></div>',\n        '    <div class=\"sg-tile-size\"><!-- size --></div>',\n        '  </div>',\n        '</div>',\n        '<div class=\"sg-tile-icons\">',\n        '  <md-icon class=\"ng-hide\">star</md-icon>',\n        '  <md-icon class=\"ng-hide\">reply</md-icon>',\n        '  <md-icon class=\"ng-hide\">forward</md-icon>',\n        '  <md-icon class=\"ng-hide\">attach_file</md-icon>',\n        '</div>',\n        '<div class=\"sg-progress-linear-bottom\">',\n        '  <md-progress-linear class=\"md-accent\"',\n        '                      md-mode=\"indeterminate\"',\n        '                      ng-disabled=\"!$ctrl.message.$isLoading()\"><!-- message loading progress --></md-progress-linear>',\n        '</div>'\n      ].join(''),\n      link: postLink,\n      controller: 'sgMessageListItemMainController',\n      controllerAs: '$ctrl'\n    };\n\n    function postLink(scope, element, attrs, parentController) {\n      scope.parentController = parentController;\n    }\n\n  }\n\n  /**\n   * @ngInject\n   */\n  sgMessageListItemMainController.$inject = ['$scope', '$element', '$parse', '$state', '$mdUtil', '$mdToast', 'Mailbox', 'Message', 'encodeUriFilter'];\n  function sgMessageListItemMainController($scope, $element, $parse, $state, $mdUtil, $mdToast, Mailbox, Message, encodeUriFilter) {\n    var $ctrl = this;\n\n    this.$postLink = function () {\n      var contentDivElement, iconsDivElement;\n      var parentControllerOnUpdate, setVisibility;\n\n      this.parentController = $scope.parentController;\n\n      parentControllerOnUpdate = this.parentController.onUpdate;\n      setVisibility = this.parentController.setVisibility;\n\n      _.forEach($element.find('div'), function(div) {\n        if (div.classList.contains('sg-tile-content'))\n          contentDivElement = angular.element(div);\n        else if (div.classList.contains('sg-tile-icons'))\n          iconsDivElement = angular.element(div);\n      });\n\n      this.priorityIconElement = contentDivElement.find('md-icon')[0];\n\n      if (Mailbox.$virtualMode) {\n        // Show mailbox name in front of the subject\n        this.mailboxNameElement = contentDivElement.find('span')[0];\n        this.mailboxNameElement.classList.remove('ng-hide');\n      }\n\n      this.senderElement = contentDivElement.find('span')[1];\n\n      _.forEach(contentDivElement.find('div'), function(div) {\n        if (div.classList.contains('sg-tile-subject'))\n          $ctrl.subjectElement = div;\n        else if (div.classList.contains('sg-tile-size'))\n          $ctrl.sizeElement = div;\n        else if (div.classList.contains('sg-tile-date'))\n          $ctrl.dateElement = div;\n      });\n\n      _.forEach(iconsDivElement.find('md-icon'), function(div) {\n        if (div.textContent == 'star')\n          $ctrl.flagIconElement = div;\n        else if (div.textContent == 'reply')\n          $ctrl.answerIconElement = div;\n        else if (div.textContent == 'forward')\n          $ctrl.forwardIconElement = div;\n        else if (div.textContent == 'attach_file')\n          $ctrl.attachmentIconElement = div;\n      });\n\n      /**\n       * Update the template when the parent controller has detected a change.\n       */\n      this.parentController.onUpdate = function () {\n        var i;\n        $ctrl.message = $ctrl.parentController.message;\n\n        // Flags\n        var flagElements = $mdUtil.nodesToArray($element[0].querySelectorAll('.sg-category'));\n        _.forEach(flagElements, function(flagElement) {\n          $element[0].removeChild(flagElement);\n        });\n        for (i = 0; i < $ctrl.message.flags.length && i < 5; i++) {\n          var tag = $ctrl.message.flags[i];\n          if ($ctrl.service.$tags[tag]) {\n            var flagElement = angular.element('<div class=\"sg-category\"></div>');\n            flagElement.css('left', (i*3) + 'px');\n            flagElement.css('background-color', $ctrl.service.$tags[tag][1]);\n            $element.prepend(flagElement);\n          }\n        }\n\n        // Mailbox name when in virtual mode\n        if ($ctrl.mailboxNameElement)\n          $ctrl.mailboxNameElement.innerHTML = $ctrl.message.$mailbox.$displayName;\n\n        // Sender or recipient when in\n        if ($ctrl.MailboxService.selectedFolder.type == 'sent')\n          $ctrl.senderElement.innerHTML = $ctrl.message.$shortAddress('to').encodeEntities();\n        else\n          $ctrl.senderElement.innerHTML = $ctrl.message.$shortAddress('from').encodeEntities();\n\n        // Priority icon\n        if ($ctrl.message.priority && $ctrl.message.priority.level < 3) {\n          $ctrl.priorityIconElement.classList.remove('ng-hide');\n          if ($ctrl.message.priority.level < 2)\n            $ctrl.priorityIconElement.classList.add('md-warn');\n          else\n            $ctrl.priorityIconElement.classList.remove('md-warn');\n        }\n        else\n          $ctrl.priorityIconElement.classList.add('ng-hide');\n\n        // Subject\n        $ctrl.subjectElement.innerHTML = $ctrl.message.subject.encodeEntities();\n\n        // Message size\n        $ctrl.sizeElement.innerHTML = $ctrl.message.size;\n\n        // Received Date\n        $ctrl.dateElement.innerHTML = $ctrl.message.relativedate;\n\n        setVisibility($ctrl.flagIconElement,\n                       $ctrl.message.isflagged);\n        setVisibility($ctrl.answerIconElement,\n                       $ctrl.message.isanswered);\n        setVisibility($ctrl.forwardIconElement,\n                       $ctrl.message.isforwarded);\n        setVisibility($ctrl.attachmentIconElement,\n                       $ctrl.message.hasattachment);\n\n        // Call original method on parent controller\n        angular.bind($ctrl.parentController, parentControllerOnUpdate)();\n      };\n\n      this.service = Message;\n      this.MailboxService = Mailbox;\n    };\n\n  }\n\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgMessageListItemMainController', sgMessageListItemMainController)\n    .directive('sgMessageListItemMain', sgMessageListItemMain);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /*\n   * sgZoomableImage - Show the image fullscreen when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"$index\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      bindToController: {\n        partIndex: '=sgZoomableImage'\n      },\n      controller: sgZoomableImageController\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          imgElement, showImage, toggleClass;\n\n      imgElement = iElement.find('img');\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      showImage = function(event) {\n        if (event.target.tagName == 'IMG')\n          ctrl.showGallery(event, imgElement[0].src);\n      };\n\n      if (imgElement.length)\n        ctrl.addImage(imgElement[0].src);\n\n      iElement.on('click', showImage);\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgZoomableImageController.$inject = ['$element', 'ImageGallery'];\n  function sgZoomableImageController($element, ImageGallery) {\n    var $ctrl = this;\n\n    this.$postLink = function() {\n      ImageGallery.registerImage($element);\n      $element.on('click', this.showImage);\n    };\n\n    this.showImage = function($event) {\n      if ($event.target.tagName == 'IMG')\n        ImageGallery.showGallery($event, $ctrl.partIndex);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}