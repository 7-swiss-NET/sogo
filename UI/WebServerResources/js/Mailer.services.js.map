{"version":3,"file":"Mailer.services.js","sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","each","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Mailbox","Message","$$resource","activeUser","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","forEach","i","id","prototype","$getMailboxes","options","_this","$mailboxes","reload","$find","$flattenMailboxes","when","allMailboxes","_visit","mailboxes","push","children","length","$$flattenMailboxes","$getMailboxByType","type","mailbox","_find","find","console","specialMailboxes","$getMailboxByPath","path","$newMailbox","name","post","toString","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","$addDelegate","user","deferred","defer","param","uid","indexOf","pluck","delegates","resolve","users","status","reject","l","promise","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","Preferences","PRELOAD","$$Acl","$Preferences","$query","sort","asc","selectedFolder","$refreshTimeout","ready","settings","Mail","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","index","map","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","isUndefined","$shadowData","$omit","getLength","getItemAtIndex","$loadMessage","$selectedCount","count","filter","selected","$filter","sortingAttributes","filters","isDefined","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","messageId","endIndex","uids","futureHeadersData","startIndex","max","loaded","subject","Math","min","loading","$unwrapHeaders","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","flags","operation","msgUIDs","$delete","remove","$deleteMessages","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","invoke","threaded","reduce","msgs","msg","object","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","$showDetailedRecipients","to","cc","bcc","$formatFullAddresses","$sce","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","filterTags","query","re","RegExp","keys","tag","search","draftId","$setUID","oldUID","shortname","replace","image","$shortRecipients","result","$shortAddress","address","loadUnsafeContent","showDetailedRecipients","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","attr","removeAttr","trustAs","participants","participant","compile","$editableContent","text","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","origin","response","$send","startsWith","isanswered","isforwarded","$futureMessageData","isread","MailboxController","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","focus","Dialog","selectMessage","go","mailboxId","unselectMessages","vm","confirmDeleteSelectedMessages","confirm","selectedMessages","selectedUIDs","difference","alert","copySelectedMessages","saveSelectedMessages","window","location","href","ApplicationBaseURL","selectAll","markSelectedMessagesAsFlagged","d","markSelectedMessagesAsUnread","field","sortedBy","cancelSearch","mode","newMessage","$event","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","accounts","stateMessage","stateRecipients","service","$inject","MailboxesController","User","newFolder","parentFolder","prompt","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","selectFolder","saveFolder","compactFolder","emptyTrashFolder","exportMails","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","includes","current","MessageController","doDelete","findIndex","showMailEditor","recipients","close","selectedMessage","reply","replyAll","forward","edit","recipient","saveMessage","viewRawSource","MessageRawSourceDialogController","scope","template","tags","$watchCollection","oldTags","newTags","MessageEditorController","$stateParams","FileUploader","AddressBook","autosave","send","contactFilter","$filterAll","addRecipient","isString","$$fullname","$$email","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideCc","hideBcc","flatten","uploader","url","autoUpload","alias","onProgressItem","item","progress","onSuccessItem","onCancelItem","file","removeFromQueue","onErrorItem","actionName","msgObject","union","localeCode","LocaleCode"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.each(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    return collection;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$flattenMailboxes({reload: true});\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        _visit = function(mailboxes) {\n          _.each(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if (o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && options.reload)) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      _this.$$flattenMailboxes = allMailboxes;\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    console.debug(mailbox);\n    console.debug(this.specialMailboxes);\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.pluck(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.pluck(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    this.$isLoading = true;\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return angular.isUndefined(filter.searchInput) || filter.searchInput.length === 0;\n        });\n        _.each(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually') {\n        var f = angular.bind(_this, Mailbox.prototype.$filter);\n        Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (!angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max);\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        deferred = Mailbox.$q.defer(),\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      deferred.resolve();\n      return deferred.promise;\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.pluck(children, 'id'), this.id);\n\n    this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.pluck(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n\n      deferred.resolve();\n    }, function(data) {\n      deferred.reject(data);\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    return Mailbox.$$resource.post(this.id, 'expunge');\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function() {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this,\n        deferred = Mailbox.$q.defer(),\n        promise;\n\n    promise = Mailbox.$$resource.remove(this.id);\n\n    promise.then(function() {\n      _this.$account.$getMailboxes({reload: true});\n      deferred.resolve(true);\n    }, function(data, status) {\n      deferred.reject(data);\n    });\n    return deferred.promise;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(uids) {\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invoke(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.object(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.each(_this.headers, function(data) {\n            var msg = _.object(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invoke(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.each(data, function(messageHeaders) {\n            messageHeaders = _.object(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.$showDetailedRecipients = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isDefined(lazy) && lazy) {\n        this.uid = futureMessageData.uid;\n      }\n      else {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', '$sce', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, $sce, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $sce: $sce,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser())\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query) {\n    var re = new RegExp(query, 'i');\n    return _.filter(_.keys(Message.$tags), function(tag) {\n      var value = Message.$tags[tag];\n      return value[0].search(re) != -1;\n    });\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    if (angular.isUndefined(this.id)) {\n      var path;\n      path = _.map(this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, this.accountId); // insert account ID\n      if (options && options.asDraft && this.draftId) {\n        path.push(this.draftId); // add draft ID\n      }\n      else {\n        path.push(this.uid); // add message UID\n      }\n\n      this.id = path.join('/');\n    }\n\n    return this.id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = this.uid || -1;\n\n    if (oldUID != uid) {\n      this.uid = uid;\n      if (oldUID > -1 && this.$mailbox.uidsMap[oldUID]) {\n        this.$mailbox.uidsMap[uid] = this.$mailbox.uidsMap[oldUID];\n        this.$mailbox.uidsMap[oldUID] = null;\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.pluck(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.each(_this[type], function(data, i) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          // If we have \"Alice Foo\" as name, we grab \"Alice\"\n          if (data.name.split(' ').length)\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function() {\n    var _this = this;\n    var result = [];\n\n    // Build long representation of email addresses\n    _.each(['to', 'cc', 'bcc'], function(type) {\n      _.each(_this[type], function(data, i) {\n        result.push(data.shortname);\n      });\n    });\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function showDetailedRecipients\n   * @memberof Message.prototype\n   * @desc Mark the message to show all to/cc recipients.\n   */\n  Message.prototype.showDetailedRecipients = function() {\n    this.$showDetailedRecipients = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer and UIxMailPartMessageViewer\n          else if (angular.isArray(part.content)) {\n            _.each(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent = (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                }\n                part.content = Message.$sce.trustAs('html', part.unsafeContent.innerHTML);\n              }\n              else {\n                part.content = Message.$sce.trustAs('html', part.safeContent);\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.each(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = Message.$sce.trustAs('html', part.safeContent);\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function() {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable),\n        deferred = Message.$q.defer();\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        deferred.resolve(data);\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n      }\n      else {\n        deferred.reject(data);\n      }\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function() {\n    var message = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        message[key] = value;\n      }\n    });\n\n    // Format addresses as arrays\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      if (message[type])\n        message[type] = _.invoke(message[type].split(','), 'trim');\n    });\n\n    //Message.$log.debug(JSON.stringify(message, undefined, 2));\n    return message;\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$state', '$timeout', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($state, $timeout, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, focus, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    Mailbox.selectedFolder = stateMailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.unselectMessages = unselectMessages;\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.copySelectedMessages = copySelectedMessages;\n    // vm.moveSelectedMessages = moveSelectedMessages;\n    vm.saveSelectedMessages = saveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false };\n\n    function selectMessage(message) {\n      $state.go('mail.account.mailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path), messageId: message.uid});\n    }\n\n    function unselectMessages() {\n      _.each(vm.selectedFolder.$messages, function(message) { message.selected = false; });\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'))\n        .then(function() {\n          // User confirmed the deletion\n          var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n          var selectedUIDs = _.pluck(selectedMessages, 'uid');\n          vm.selectedFolder.$deleteMessages(selectedUIDs).then(function() {\n            // Decrement the unseenCount accordingly\n            var unseenCount = _.filter(selectedMessages, function(message) { return !message.isread; });\n            vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n            vm.selectedFolder.unseenCount =- unseenCount;\n          },  function(error) {\n            Dialog.alert(l('Error'), error);\n          });\n        });\n    }\n\n    function copySelectedMessages(folder) {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      vm.selectedFolder.$copyMessages(selectedUIDs, '/' + folder).then(function() {\n        // TODO: refresh target mailbox?\n      }, function(error) {\n        Dialog.alert(l('Error'), error);\n      });\n    }\n\n    // function moveSelectedMessages(folder) {\n    //   var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected });\n    //   var selectedUIDs = _.pluck(selectedMessages, 'uid');\n    //   vm.selectedFolder.$moveMessages(selectedUIDs, '/' + folder).then(function() {\n    //     // TODO: refresh target mailbox?\n    //     vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n    //   });\n    // }\n\n    function saveSelectedMessages() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      window.location.href = ApplicationBaseURL + '/' + vm.selectedFolder.id + '/saveMessages?uid=' + selectedUIDs.join(\",\");\n    }\n\n    function selectAll() {\n      _.each(vm.selectedFolder.$messages, function(message) {\n        message.selected = true;\n      });\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, '\\\\Flagged', 'add').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isflagged = true;\n        });\n      });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, 'seen', 'remove').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isread = false;\n          vm.selectedFolder.unseenCount++;\n        });\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter();\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxController', MailboxController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$mdDialog', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $mdDialog, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.exportMails = exportMails;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    if ($state.current.name == 'mail' && vm.accounts.length > 0 && vm.accounts[0].$mailboxes.length > 0) {\n      // Redirect to first mailbox of first account if no mailbox is selected\n      account = vm.accounts[0];\n      mailbox = account.$mailboxes[0];\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder(account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n    }\n\n    function saveFolder(folder) {\n      folder.$rename();\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        // Success\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        // Success\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function exportMails(folder) {\n      window.location.href = ApplicationBaseURL + '/' + folder.id + '/exportFolder';\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      //if ($rootScope.currentFolder == folder)\n      //  return 'folder_open';\n\n      return {name: folder.name, icon: 'folder'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$scope', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox', 'Message'];\n  function MessageController($scope, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, focus, Dialog, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null;\n\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.doDelete = doDelete;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.newMessage = newMessage;\n    vm.saveMessage = saveMessage;\n    vm.viewRawSource = viewRawSource;\n\n    // Watch the message model \"flags\" attribute to remove on-the-fly a tag from the IMAP message\n    // when removed from the message viewer.\n    // TODO: this approach should be reviewed once md-chips supports ng-change.\n    $scope.$watchCollection('viewer.message.flags', function(oldTags, newTags) {\n      _.each(_.difference(newTags, oldTags), function(tag) {\n        vm.message.removeTag(tag);\n      });\n    });\n\n    function doDelete() {\n      stateMailbox.$deleteMessages([stateMessage.uid]).then(function() {\n        // Remove message from list of messages\n        var index = _.findIndex(stateMailbox.$messages, function(o) {\n          return o.uid == stateMessage.uid;\n        });\n        if (index != -1)\n          stateMailbox.$messages.splice(index, 1);\n        // Remove message object from scope\n        vm.message = null;\n        $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) });\n      });\n    }\n\n    function showMailEditor($event, message, recipients) {\n      if (messageDialog === null) {\n        if (!angular.isDefined(recipients))\n          recipients = [];\n\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: recipients\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) }).then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function newMessage($event, recipient) {\n      var message = vm.account.$newMessage();\n      showMailEditor($event, message, [recipient]);\n    }\n\n    function saveMessage() {\n      window.location.href = ApplicationBaseURL + '/' + vm.mailbox.id + '/saveMessages?uid=' + vm.message.uid;\n    }\n\n    function viewRawSource($event) {\n      Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n        $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          template: [\n            '<md-dialog flex=\"80\" flex-sm=\"100\" aria-label=\"' + l('View Message Source') + '\">',\n            '  <md-dialog-content>',\n            '    <pre>',\n            data,\n            '    </pre>',\n            '  </md-dialog-content>',\n            '  <div class=\"md-actions\">',\n            '    <md-button ng-click=\"close()\">' + l('Close') + '</md-button>',\n            '  </div>',\n            '</md-dialog>'\n          ].join(''),\n          controller: MessageRawSourceDialogController\n        });\n\n        /**\n         * @ngInject\n         */\n        MessageRawSourceDialogController.$inject = ['scope', '$mdDialog'];\n        function MessageRawSourceDialogController(scope, $mdDialog) {\n          scope.close = function() {\n            $mdDialog.hide();\n          };\n        }\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$stateParams', '$state', '$q', '$mdDialog', 'FileUploader', 'stateAccounts', 'stateMessage', 'stateRecipients', '$timeout', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox', 'AddressBook', 'Preferences'];\n  function MessageEditorController($stateParams, $state, $q, $mdDialog, FileUploader, stateAccounts, stateMessage, stateRecipients, $timeout, encodeUriFilter, focus, Dialog, Account, Mailbox, AddressBook, Preferences) {\n    var vm = this;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = true;\n    vm.hideBcc = true;\n    vm.cancel = cancel;\n    vm.send = send;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.pluck(_.flatten(_.pluck(stateAccounts, 'identities')), 'full');\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      onProgressItem: function(item, progress) {\n        console.debug(item); console.debug(progress);\n      },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload();\n        console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n    }\n\n    if (angular.isDefined(stateRecipients)) {\n      vm.message.editable.to = _.union(vm.message.editable.to, _.pluck(stateRecipients, 'full'));\n    }\n\n    function cancel() {\n      // TODO: delete draft?\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      $mdDialog.cancel();\n    }\n\n    function send() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        $mdDialog.hide();\n      }, function(data) {\n        Dialog.alert(l(data.status), l(data.message));\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query);\n    }\n\n    function addRecipient(user) {\n      var recipient = [];\n\n      if (angular.isString(user))\n        return user;\n      if (user.$$fullname)\n        recipient.push(user.$$fullname);\n      if (user.$$email)\n        recipient.push('<' + user.$$email + '>');\n\n      return recipient.join(' ');\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Select list based on user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageEditorController', MessageEditorController);                                    \n})();\n"]}