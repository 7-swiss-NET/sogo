{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","each","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","forEach","i","id","prototype","$getMailboxes","options","_this","$mailboxes","reload","$find","ready","expandedFolders","_visit","mailboxes","$expanded","indexOf","children","length","settings","Mail","ExpandedFolders","isString","fromJson","$flattenMailboxes","when","allMailboxes","expandedMailboxes","push","all","$$flattenMailboxes","saveState","reduce","mailbox","post","$getMailboxByType","type","_find","find","console","specialMailboxes","$getMailboxByPath","path","$newMailbox","name","toString","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","isNew","$addDelegate","user","deferred","defer","param","uid","pluck","delegates","resolve","users","status","reject","promise","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","index","quotas","map","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","isUndefined","$shadowData","$omit","getLength","getItemAtIndex","$lastVisibleIndex","max","$loadMessage","$selectedCount","count","filter","selected","isSelectedMessage","messageId","selectedMessage","$filter","sortingAttributes","filters","isDefined","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","loaded","subject","min","loading","$unwrapHeaders","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","flags","operation","msgUIDs","$delete","remove","$deleteMessages","messages","unseen","firstIndex","isread","forEachRight","selectedIndex","findIndex","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","invoke","threaded","msgs","msg","object","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","filterTags","query","re","RegExp","results","keys","tag","pair","search","color","draftId","$setUID","oldUID","constructor","shortname","replace","image","$shortRecipients","result","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","attr","removeAttr","participants","participant","compile","$editableContent","text","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","origin","response","$send","startsWith","isanswered","isforwarded","$futureMessageData","VirtualMailbox","setMailboxes","startSearch","params","stopSearch","resetSelectedMessage","len","k","MailboxController","$window","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","Dialog","selectMessage","go","mailboxId","toggleMessageSelection","$event","preventDefault","stopPropagation","unselectMessages","vm","confirmDeleteSelectedMessages","confirm","unselectMessage","selectedMessages","nextMessage","previousMessage","nextIndex","$topIndex","copySelectedMessages","selectedUIDs","saveSelectedMessages","window","location","href","ApplicationBaseURL","selectAll","markSelectedMessagesAsFlagged","d","markSelectedMessagesAsUnread","field","sortedBy","cancelSearch","mode","newMessage","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","accounts","stateMessage","stateRecipients","$mailboxController","service","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","$inject","decorator","MailboxesController","$mdToast","$mdMedia","$mdSidenav","focus","User","showAdvancedSearch","showingAdvancedSearch","close","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","selectFolder","saveFolder","compactFolder","simple","position","hideDelay","emptyTrashFolder","exportMails","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","includes","","from","MessageController","sgSettings","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","showDetailedRecipients","$showDetailedRecipients","doDelete","state","parentCtrls","closePopup","showMailEditor","recipients","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","recipient","saveMessage","toggleRawSource","showRawSource","rawSource","tags","showFlags","$watchCollection","newTags","oldTags","$watch","wasflagged","MessageEditorController","$stateParams","$mdConstant","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","addAttachments","fileItem","mimetype","size","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","autosave","send","contactFilter","$filterAll","$cards","addRecipient","contact","list","$isList","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","semicolon","autocomplete","hideCc","hideBcc","flatten","recipientSeparatorKeys","KEY_CODE","ENTER","TAB","COMMA","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","actionName","msgObject","union","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","attrs","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode","event","target","tagName","on"],"mappings":"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","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.each(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    return collection;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.each(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          _.reduce(allMailboxes, function(expandedFolders, mailbox) {\n            if (mailbox.$expanded) {\n              expandedFolders.push('/' + mailbox.id);\n            }\n            return expandedFolders;\n          }, expandedMailboxes);\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    console.debug(mailbox);\n    console.debug(this.specialMailboxes);\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        message.isNew = true;\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.pluck(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.pluck(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is selected.\n   * @param {string} messageId\n   * @returns true if the specified message is selected\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return angular.isUndefined(filter.searchInput) || filter.searchInput.length === 0;\n        });\n        _.each(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (!angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max);\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.pluck(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.pluck(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.remove(this.id)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages) {\n    var _this = this, uids;\n\n    uids = _.pluck(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids})\n      .then(function(data) {\n        var selectedMessages, selectedUIDs, unseen, firstIndex = _this.$messages.length;\n        // Decrement the unseenCount accordingly\n        unseen = _.filter(messages, function(message, i) { return !message.isread; });\n        _this.unseenCount -= unseen.length;\n        // Remove messages from $messages and uidsMap\n        _.forEachRight(_this.$messages, function(message, index) {\n          var selectedIndex = _.findIndex(uids, function(uid) {\n            return message.uid == uid;\n          });\n          if (selectedIndex > -1) {\n            uids.splice(selectedIndex, 1);\n            delete _this.uidsMap[message.uid];\n            if (message.uid == _this.selectedMessage)\n              delete _this.selectedMessage;\n            _this.$messages.splice(index, 1);\n            if (index < firstIndex)\n              firstIndex = index;\n          }\n          else {\n            _this.uidsMap[message.uid] -= uids.length;\n          }\n        });\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return firstIndex;\n      });\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invoke(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.object(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.each(_this.headers, function(data) {\n            var msg = _.object(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invoke(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.each(data, function(messageHeaders) {\n            messageHeaders = _.object(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser())\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    if (angular.isUndefined(this.id) || options) {\n      var path;\n      path = _.map(this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, this.accountId); // insert account ID\n      if (options && options.asDraft && this.draftId) {\n        path.push(this.draftId); // add draft ID\n      }\n      else {\n        path.push(this.uid); // add message UID\n      }\n\n      this.id = path.join('/');\n    }\n\n    return this.id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1);\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          this.$mailbox.uidsMap[uid] = this.$mailbox.uidsMap[oldUID];\n          delete this.$mailbox.uidsMap[oldUID];\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.pluck(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.each(_this[type], function(data, i) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          // If we have \"Alice Foo\" as name, we grab \"Alice\"\n          if (data.name.split(' ').length)\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else if (data.email) {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function() {\n    var _this = this;\n    var result = [];\n\n    // Build long representation of email addresses\n    _.each(['to', 'cc', 'bcc'], function(type) {\n      _.each(_this[type], function(data, i) {\n        result.push(data.shortname);\n      });\n    });\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, recipientsCount, this);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.each(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.each(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload({asDraft: false}); // fetch a new viewable version of the message\n      _this.isNew = false;\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable),\n        deferred = Message.$q.defer();\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        deferred.resolve(data);\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n      }\n      else {\n        deferred.reject(data);\n      }\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function() {\n    var message = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() { _this.$isLoading = false; });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.each(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    // TODO\n    return 0;\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    // TODO\n    // var data = {msgUIDs: uids,\n    //             flags: flags,\n    //             operation: operation};\n\n    // return VirtualMailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(uids) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$timeout', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($window, $timeout, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    // Expose controller\n    $window.$mailboxController = vm;\n\n    Mailbox.selectedFolder = stateMailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.unselectMessages = unselectMessages;\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.copySelectedMessages = copySelectedMessages;\n    // vm.moveSelectedMessages = moveSelectedMessages;\n    vm.saveSelectedMessages = saveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false };\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      message.selected = !message.selected;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function unselectMessages() {\n      _.each(vm.selectedFolder.$messages, function(message) { message.selected = false; });\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'))\n        .then(function() {\n          // User confirmed the deletion\n          var unselectMessage = false;\n          var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) {\n            if (message.selected &&\n                message.uid == vm.selectedFolder.selectedMessage)\n              unselectMessage = true;\n            return message.selected;\n          });\n          vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n            var nextMessage, previousMessage, nextIndex = index;\n            if (unselectMessage) {\n              if (Mailbox.$virtualMode) {\n                $state.go('mail.account.virtualMailbox');\n              }\n              else {\n                // Select either the next or previous message\n                if (index > 0) {\n                  nextIndex -= 1;\n                  nextMessage = vm.selectedFolder.$messages[nextIndex];\n                }\n                if (index < vm.selectedFolder.$messages.length)\n                  previousMessage = vm.selectedFolder.$messages[index];\n                if (nextMessage) {\n                  if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n                    nextIndex = index;\n                    nextMessage = previousMessage;\n                  }\n                }\n                else if (previousMessage) {\n                  nextIndex = index;\n                  nextMessage = previousMessage;\n                }\n                if (nextMessage) {\n                  $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n                  vm.selectedFolder.$topIndex = nextIndex;\n                }\n                else {\n                  $state.go('mail.account.mailbox');\n                }\n              }\n            }\n          });\n        });\n    }\n\n    function copySelectedMessages(folder) {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      vm.selectedFolder.$copyMessages(selectedUIDs, '/' + folder);\n    }\n\n    // function moveSelectedMessages(folder) {\n    //   var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected });\n    //   var selectedUIDs = _.pluck(selectedMessages, 'uid');\n    //   vm.selectedFolder.$moveMessages(selectedUIDs, '/' + folder).then(function() {\n    //     // TODO: refresh target mailbox?\n    //     vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n    //   });\n    // }\n\n    function saveSelectedMessages() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      window.location.href = ApplicationBaseURL + '/' + vm.selectedFolder.id + '/saveMessages?uid=' + selectedUIDs.join(\",\");\n    }\n\n    function selectAll() {\n      var i = 0, length = vm.selectedFolder.$messages.length;\n      for (; i < length; i++)\n        vm.selectedFolder.$messages[i].selected = true;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, '\\\\Flagged', 'add').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isflagged = true;\n        });\n      });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, 'seen', 'remove').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isread = false;\n          vm.selectedFolder.unseenCount++;\n        });\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter().then(function() {\n        if (vm.selectedFolder.selectedMessage) {\n          $timeout(function() {\n            vm.selectedFolder.$topIndex = vm.selectedFolder.uidsMap[vm.selectedFolder.selectedMessage];\n          });\n        }\n      });\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $mdDialog, $mdToast, $mdMedia, $mdSidenav, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.exportMails = exportMails;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n      // Close sidenav on small devices\n      if ($mdMedia('xs'))\n        $mdSidenav('left').close();\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.each(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder($event, account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      // Close sidenav on small devices\n      if ($mdMedia('xs'))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Trash emptied'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function exportMails(folder) {\n      window.location.href = ApplicationBaseURL + '/' + folder.id + '/exportFolder';\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail.account.inbox');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      return {name: folder.name, icon: 'folder_open'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, sgSettings, focus, Dialog, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null;\n\n    // Expose controller\n    $window.$messageController = vm;\n\n    vm.$state = $state;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.showDetailedRecipients = showDetailedRecipients;\n    vm.doDelete = doDelete;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.saveMessage = saveMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n\n    // One-way refresh of the parent window when modifying the message from a popup window.\n    if ($window.opener) {\n      // Update the message flags. The message must be displayed in the parent window.\n      $scope.$watchCollection('viewer.message.flags', function(newTags, oldTags) {\n        var ctrls;\n        if (newTags || oldTags) {\n          ctrls = $parentControllers();\n          if (ctrls.messageCtrl) {\n            ctrls.messageCtrl.service.$timeout(function() {\n              ctrls.messageCtrl.message.flags = newTags;\n            });\n          }\n        }\n      });\n      // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n      $scope.$watch('viewer.message.isflagged', function(isflagged, wasflagged) {\n        var ctrls = $parentControllers();\n        if (ctrls.mailboxCtrl) {\n          ctrls.mailboxCtrl.service.$timeout(function() {\n            var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n            message.isflagged = isflagged;\n          });\n        }\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    function showDetailedRecipients($event) {\n      vm.$showDetailedRecipients = true;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function doDelete() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              if (nextIndex < mailbox.$topIndex)\n                mailbox.$topIndex = nextIndex;\n              else if (nextIndex > mailbox.$lastVisibleIndex)\n                mailbox.$topIndex = nextIndex - (mailbox.$lastVisibleIndex - mailbox.$topIndex);\n            }\n            else {\n              state.go('mail.account.mailbox');\n            }\n          }\n          catch (error) {}\n        }\n        closePopup();\n      });\n    }\n\n    function showMailEditor($event, message, recipients) {\n      if (messageDialog === null) {\n        if (!angular.isDefined(recipients))\n          recipients = [];\n\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateAccount: vm.account,\n              stateMessage: message,\n              stateRecipients: recipients\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n            closePopup();\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      if ($window.opener)\n        $window.close();\n    }\n\n    function newMessage($event, recipient) {\n      var message = vm.account.$newMessage();\n      showMailEditor($event, message, [recipient]);\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveMessage() {\n      window.location.href = ApplicationBaseURL + '/' + vm.mailbox.id + '/saveMessages?uid=' + vm.message.uid;\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$window', '$stateParams', '$mdConstant', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccounts', 'stateMessage', 'stateRecipients', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($window, $stateParams, $mdConstant, $mdDialog, $mdToast, FileUploader, stateAccounts, stateMessage, stateRecipients, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this, semicolon = 186;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = true;\n    vm.hideBcc = true;\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.send = send;\n    vm.removeAttachment = removeAttachment;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.pluck(_.flatten(_.pluck(stateAccounts, 'identities')), 'full');\n    vm.recipientSeparatorKeys = [$mdConstant.KEY_CODE.ENTER, $mdConstant.KEY_CODE.TAB, $mdConstant.KEY_CODE.COMMA, semicolon];\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    if (angular.isDefined(stateRecipients)) {\n      vm.message.editable.to = _.union(vm.message.editable.to, _.pluck(stateRecipients, 'full'));\n    }\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n      if ($window.opener) {\n        if ($window.opener.$mailboxController) {\n          if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n            ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The draft is opened in the parent window\n              ctrls.draftMessageCtrl = $window.opener.$messageController;\n            }\n          }\n          else if (stateMessage.origin) {\n            originMessage = stateMessage.origin.message;\n            if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n              // The message mailbox is opened in the parent window\n              ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n            }\n          }\n        }\n      }\n      return ctrls;\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem;\n      if (vm.message.attachmentAttrs)\n        for (i = 0; i < vm.message.attachmentAttrs.length; i++) {\n          data = {\n            name: vm.message.attachmentAttrs[i].filename,\n            type: vm.message.attachmentAttrs[i].mimetype,\n            size: parseInt(vm.message.attachmentAttrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = vm.message.attachmentAttrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n    }\n\n    function cancel() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      if (vm.message.isNew && vm.message.attachmentAttrs)\n        vm.message.$mailbox.$deleteMessages([vm.message]);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      var ctrls = $parentControllers();\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n        $mdDialog.hide();\n      });\n    }\n\n    function contactFilter($query) {\n      AddressBook.$filterAll($query);\n      return AddressBook.$cards;\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list;\n\n      if (angular.isString(contact))\n        return contact;\n\n      recipients = vm.message.editable[field];\n\n      if (contact.$isList()) {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.each(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}