{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","forEach","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","i","id","prototype","$getMailboxes","options","_this","$mailboxes","reload","$find","ready","expandedFolders","_visit","mailboxes","$expanded","indexOf","children","length","settings","Mail","ExpandedFolders","isString","fromJson","$flattenMailboxes","when","allMailboxes","expandedMailboxes","push","all","$$flattenMailboxes","saveState","reduce","mailbox","post","$getMailboxByType","type","_find","find","$getMailboxByPath","path","$newMailbox","name","toString","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","isNew","$addDelegate","user","deferred","defer","param","uid","map","delegates","resolve","users","status","reject","promise","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","index","quotas","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","$isNoInferiors","isNoInferiors","isUndefined","$shadowData","$omit","selectFolder","getLength","getItemAtIndex","$lastVisibleIndex","max","$loadMessage","$selectedCount","count","filter","selected","isSelectedMessage","messageId","selectedMessage","hasSelectedMessage","isDefined","$filter","sortingAttributes","filters","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","loaded","subject","min","loading","$unwrapHeaders","flags","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","operation","msgUIDs","saveSelectedMessages","selectedMessages","selectedUIDs","download","exportFolder","$delete","remove","$_deleteMessages","messages","unseen","firstIndex","isread","forEachRight","selectedIndex","findIndex","$deleteMessages","$markOrUnMarkMessagesAsJunk","method","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","$topIndex","invokeMap","threaded","msgs","msg","zipObject","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","filterTags","query","excludedTags","re","RegExp","results","keys","tag","pair","search","includes","color","buildPath","nocache","draftId","$setUID","oldUID","attr","constructor","shortname","replace","image","$shortRecipients","result","total","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","removeAttr","participants","participant","compile","$editableContent","from","toLowerCase","text","$plainContent","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","origin","response","$send","startsWith","isanswered","isforwarded","$futureMessageData","privateAttributes","saveMessage","VirtualMailbox","setMailboxes","startSearch","params","stopSearch","resetSelectedMessage","len","k","MailboxController","$window","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","Dialog","selectMessage","go","mailboxId","toggleMessageSelection","$event","vm","mode","multiple","preventDefault","stopPropagation","unselectMessages","confirmDeleteSelectedMessages","confirm","ok","deleteSelectedMessage","unselectMessage","markOrUnMarkMessagesAsJunk","moveSelectedMessage","nextMessage","previousMessage","nextIndex","copySelectedMessages","moveSelectedMessages","selectAll","markSelectedMessagesAsFlagged","d","markSelectedMessagesAsUnread","field","sortedBy","cancelSearch","newMessage","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","stateMessage","stateRecipients","$mailboxController","service","accounts","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","$inject","decorator","MailboxesController","$mdToast","$mdMedia","$mdSidenav","sgConstant","focus","User","showAdvancedSearch","showingAdvancedSearch","close","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","saveFolder","compactFolder","simple","position","hideDelay","emptyTrashFolder","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","window","","MessageController","sgSettings","Calendar","Component","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","toggleDetailedRecipients","$showDetailedRecipients","filterMailtoLinks","href","target","tagName","attributes","exec","decodeURIComponent","deleteMessage","state","parentCtrls","closePopup","showMailEditor","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","editableContent","toggleRawSource","showRawSource","$rawSource","print","convertToEvent","convertToComponent","convertToTask","componentData","pid","$defaultCalendar","summary","comment","capitalize","stateComponent","tags","showFlags","$watchCollection","newTags","oldTags","$watch","wasflagged","_newTags","_oldTags","isObject","difference","MessageEditorController","$stateParams","$mdConstant","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","addAttachments","fileItem","attrs","mimetype","size","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","autosave","send","contactFilter","$filterAll","cards","explodedCards","manyCards","card","uniqBy","$$fullname","$$email","addRecipient","contact","recipients","recipient","list","$isList","expandable","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","semicolon","autocomplete","hideCc","hideBcc","recipientSeparatorKeys","KEY_CODE","ENTER","TAB","COMMA","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","actionName","msgObject","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode","event","on"],"mappings":"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","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.forEach(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    return collection;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.forEach(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          _.reduce(allMailboxes, function(expandedFolders, mailbox) {\n            if (mailbox.$expanded) {\n              expandedFolders.push('/' + mailbox.id);\n            }\n            return expandedFolders;\n          }, expandedMailboxes);\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        message.isNew = true;\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.map(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.map(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    this.$isNoInferiors = this.isNoInferiors();\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof Mailbox.prototype\n   * @desc Mark the folder as selected in the constructor unless virtual mode is active\n   */\n  Mailbox.prototype.selectFolder = function() {\n    if (!Mailbox.$virtualMode)\n      Mailbox.selectedFolder = this;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is selected.\n   * @param {string} messageId\n   * @returns true if the specified message is selected\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if a message is selected.\n   * @returns true if the a message is selected\n   */\n  Mailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(this.selectedMessage);\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return !filter.searchInput || filter.searchInput.length === 0;\n        });\n        // Decompose filters that match two fields\n        _.forEach(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter, null, filters);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        index,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (angular.isDefined(this.$messages[endIndex].subject) ||\n          angular.isDefined(this.$messages[endIndex].loading)) {\n        index = Math.max(startIndex - Mailbox.PRELOAD.LOOKAHEAD, 0);\n        if (!angular.isDefined(this.$messages[index].subject) &&\n            !angular.isDefined(this.$messages[index].loading)) {\n          // Previous messages not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - Mailbox.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next messages not load; preload more headers further down\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max - 1);\n\n      if (!angular.isDefined(this.$messages[startIndex].subject) &&\n          !angular.isDefined(this.$messages[startIndex].loading) ||\n          !angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function isNoInferiors\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can contain submailboxes\n   * @returns true if the mailbox can not contain submailboxes\n   */\n  Mailbox.prototype.isNoInferiors = function() {\n    return this.flags.indexOf('noinferiors') >= 0;\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.map(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.map(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function saveSelectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Download the selected messages\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.saveSelectedMessages = function() {\n    var selectedMessages, selectedUIDs;\n\n    selectedMessages = _.filter(this.$messages, function(message) { return message.selected; });\n    selectedUIDs = _.map(selectedMessages, 'uid');\n\n    return Mailbox.$$resource.download(this.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n  /**\n   * @function exportFolder\n   * @memberof Mailbox.prototype\n   * @desc Export this mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.exportFolder = function() {\n    return Mailbox.$$resource.download(this.id, 'exportFolder');\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.remove(this.id)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $_deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from Mailbox object.\n   * @param {string[]} uids - the messages uids\n   * @param {object[]} messages - the Message instances\n   * @return the index of the first deleted message\n   */\n  Mailbox.prototype.$_deleteMessages = function(uids, messages) {\n    var _this = this, selectedMessages, selectedUIDs, unseen, firstIndex = this.$messages.length;\n\n    // Decrement the unseen count\n    unseen = _.filter(messages, function(message, i) { return !message.isread; });\n    this.unseenCount -= unseen.length;\n\n    // Remove messages from $messages and uidsMap\n    _.forEachRight(this.$messages, function(message, index) {\n      var selectedIndex = _.findIndex(uids, function(uid) {\n        return message.uid == uid;\n      });\n      if (selectedIndex > -1) {\n        uids.splice(selectedIndex, 1);\n        delete _this.uidsMap[message.uid];\n        if (message.uid == _this.selectedMessage)\n          delete _this.selectedMessage;\n        _this.$messages.splice(index, 1);\n        if (index < firstIndex)\n          firstIndex = index;\n      }\n      else {\n        _this.uidsMap[message.uid] -= uids.length;\n      }\n    });\n\n    // Return the index of the first deleted message\n    return firstIndex;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof Mailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messages) {\n    var _this = this, uids;\n    var method = (this.type == 'junk' ? 'markMessagesAsNotJunk' : 'markMessagesAsJunk');\n    uids = _.map(messages, 'uid');\n\n    return Mailbox.$$resource.post(this.id, method, {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(messages, folder) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder})\n      .then(function() {\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        if (!data.uids || _this.$topIndex > data.uids.length - 1)\n          _this.$topIndex = 0;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.zipObject(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.forEach(_this.headers, function(data) {\n            var msg = _.zipObject(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(messageHeaders) {\n            messageHeaders = _.zipObject(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser())\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query, excludedTags) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        if (!_.includes(excludedTags, tag))\n          results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    var _this = this, id = this.id;\n\n    function buildPath() {\n      var path;\n      path = _.map(_this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, _this.accountId); // insert account ID\n      return path.join('/');\n    }\n\n    if (angular.isUndefined(this.id) || options && options.nocache) {\n      this.id = buildPath() + '/' + this.uid; // add message UID\n      id = this.id;\n    }\n    if (options && options.asDraft && this.draftId) {\n      id = buildPath() + '/' + this.draftId; // add draft ID\n    }\n\n    return id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1), _this = this, index;\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      this.$absolutePath({nocache: true});\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          index = this.$mailbox.uidsMap[oldUID];\n          this.$mailbox.uidsMap[uid] = index;\n          delete this.$mailbox.uidsMap[oldUID];\n\n          // Update messages list of mailbox\n          _.forEach(['from', 'to', 'subject'], function(attr) {\n            _this.$mailbox.$messages[index][attr] = _this[attr];\n          });\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.map(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.forEach(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.forEach(_this[type], function(data) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          if (data.name.length < 10)\n            // Name is already short\n            data.shortname = data.name;\n          else if (data.name.split(' ').length)\n            // If we have \"Alice Foo\" as name, we grab \"Alice\"\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else if (data.email) {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function(max) {\n    var _this = this, result = [], count = 0, total = 0;\n\n    // Build short representation of email addresses\n    _.forEach(['to', 'cc', 'bcc'], function(type) {\n      total += _this[type]? _this[type].length : 0;\n      _.forEach(_this[type], function(data, i) {\n        if (count < max)\n          result.push(data.shortname);\n        count++;\n      });\n    });\n\n    if (total > max)\n      result.push(l('and %{0} more...', (total - max)));\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], _.bind(function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, this), recipientsCount);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.forEach(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.forEach(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        // Try to match a known account identity from the specified \"from\" address\n        var identity = _.find(_this.$mailbox.$account.identities, function(identity) {\n          return data.from.toLowerCase().indexOf(identity.email) !== -1;\n        });\n        if (identity)\n          data.from = identity.full;\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function $plainContent\n   * @memberof Message.prototype\n   * @returns the a plain text representation of the subject and body\n   */\n  Message.prototype.$plainContent = function() {\n    return Message.$$resource.fetch(this.$absolutePath(), 'viewplain');\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n      _this.isNew = false;\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable);\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n        return data;\n      }\n      else {\n        return Message.$q.reject(data);\n      }\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function(options) {\n    var message = {},\n        privateAttributes = options && options.privateAttributes;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$' || privateAttributes) {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n  /**\n   * @function saveMessage\n   * @memberof Message.prototype\n   * @desc Download the current message\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.saveMessage = function() {\n    var selectedUIDs;\n\n    selectedUIDs = [ this.uid ];\n\n    return Message.$$resource.download(this.$mailbox.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() {\n      _this.$isLoading = false;\n    });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof VirtualMailbox.prototype\n   * @desc A no-op for virtual mailbox\n   */\n  VirtualMailbox.prototype.selectFolder = function() {\n    return;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.forEach(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if a message is selected among the resulting mailboxes\n   * @returns true if one message is selected\n   */\n  VirtualMailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return angular.isDefined(mailbox.selectedMessage);\n    }));\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    // TODO\n    return 0;\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    // TODO\n    // var data = {msgUIDs: uids,\n    //             flags: flags,\n    //             operation: operation};\n\n    // return VirtualMailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(uids) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$timeout', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($window, $timeout, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    // Expose controller\n    $window.$mailboxController = vm;\n\n    stateMailbox.selectFolder();\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.unselectMessages = unselectMessages;\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.markOrUnMarkMessagesAsJunk = markOrUnMarkMessagesAsJunk;\n    vm.copySelectedMessages = copySelectedMessages;\n    vm.moveSelectedMessages = moveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false, multiple: 0 };\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      message.selected = !message.selected;\n      vm.mode.multiple += message.selected? 1 : -1;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function unselectMessages() {\n      _.forEach(vm.selectedFolder.$messages, function(message) {\n        message.selected = false;\n      });\n      vm.mode.multiple = 0;\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'),\n                     { ok: l('Delete') })\n        .then(function() {\n          var deleteSelectedMessage = false;\n          var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) {\n            if (message.selected &&\n                message.uid == vm.selectedFolder.selectedMessage)\n              deleteSelectedMessage = true;\n            return message.selected;\n          });\n          vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n            unselectMessage(deleteSelectedMessage, index);\n          });\n        });\n    }\n\n    function markOrUnMarkMessagesAsJunk() {\n      var moveSelectedMessage = false;\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) {\n        if (message.selected &&\n            message.uid == vm.selectedFolder.selectedMessage)\n          moveSelectedMessage = true;\n        return message.selected;\n      });\n\n      vm.selectedFolder.$markOrUnMarkMessagesAsJunk(selectedMessages).then(function() {\n        var folder = '/' + vm.account.id + '/folderINBOX';\n\n        if (vm.selectedFolder.type != 'junk') {\n          folder = '/' + vm.account.$getMailboxByType('junk').id;\n        }\n\n        vm.selectedFolder.$moveMessages(selectedMessages, folder).then(function(index) {\n          unselectMessage(moveSelectedMessage, index);\n        });\n      });\n    }\n\n    function unselectMessage(message, index) {\n      // Unselect current message and cleverly load the next message\n      var nextMessage, previousMessage, nextIndex = index;\n      vm.mode.multiple = vm.selectedFolder.$selectedCount();\n      if (message) {\n        if (Mailbox.$virtualMode) {\n          $state.go('mail.account.virtualMailbox');\n        }\n        else {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = vm.selectedFolder.$messages[nextIndex];\n          }\n          if (index < vm.selectedFolder.$messages.length)\n            previousMessage = vm.selectedFolder.$messages[index];\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n          if (nextMessage) {\n            $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n            vm.selectedFolder.$topIndex = nextIndex;\n          }\n          else {\n            $state.go('mail.account.mailbox');\n          }\n        }\n      }\n    }\n\n    function copySelectedMessages(folder) {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.map(selectedMessages, 'uid');\n      vm.selectedFolder.$copyMessages(selectedUIDs, '/' + folder);\n    }\n\n    function moveSelectedMessages(folder) {\n      var moveSelectedMessage = false;\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) {\n        if (message.selected &&\n            message.uid == vm.selectedFolder.selectedMessage)\n          moveSelectedMessage = true;\n        return message.selected;\n      });\n      vm.selectedFolder.$moveMessages(selectedMessages, '/' + folder).then(function(index) {\n        unselectMessage(moveSelectedMessage, index);\n      });\n    }\n\n    function selectAll() {\n      var i = 0, length = vm.selectedFolder.$messages.length;\n      for (; i < length; i++)\n        vm.selectedFolder.$messages[i].selected = true;\n      vm.mode.multiple = length;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.map(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, '\\\\Flagged', 'add').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isflagged = true;\n        });\n      });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.map(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, 'seen', 'remove').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isread = false;\n          vm.selectedFolder.unseenCount++;\n        });\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter().then(function() {\n        if (vm.selectedFolder.selectedMessage) {\n          $timeout(function() {\n            vm.selectedFolder.$topIndex = vm.selectedFolder.uidsMap[vm.selectedFolder.selectedMessage];\n          });\n        }\n      });\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgConstant', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $mdDialog, $mdToast, $mdMedia, $mdSidenav, sgConstant, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.forEach(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder($event, account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Trash emptied'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail.account.inbox');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'junk')\n        return {name: l('JunkFolderName'), icon: 'thumb_down'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      return {name: folder.name, icon: 'folder_open'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdMedia', '$mdDialog', 'sgConstant', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Calendar', 'Component', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdMedia, $mdDialog, sgConstant, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, sgSettings, focus, Dialog, Calendar, Component, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null;\n\n    // Expose controller\n    $window.$messageController = vm;\n\n    vm.$state = $state;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.toggleDetailedRecipients = toggleDetailedRecipients;\n    vm.filterMailtoLinks = filterMailtoLinks;\n    vm.deleteMessage = deleteMessage;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n    vm.print = print;\n    vm.convertToEvent = convertToEvent;\n    vm.convertToTask = convertToTask;\n\n    // One-way refresh of the parent window when modifying the message from a popup window.\n    if ($window.opener) {\n      // Update the message flags. The message must be displayed in the parent window.\n      $scope.$watchCollection('viewer.message.flags', function(newTags, oldTags) {\n        var ctrls;\n        if (newTags || oldTags) {\n          ctrls = $parentControllers();\n          if (ctrls.messageCtrl) {\n            ctrls.messageCtrl.service.$timeout(function() {\n              ctrls.messageCtrl.message.flags = newTags;\n            });\n          }\n        }\n      });\n      // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n      $scope.$watch('viewer.message.isflagged', function(isflagged, wasflagged) {\n        var ctrls = $parentControllers();\n        if (ctrls.mailboxCtrl) {\n          ctrls.mailboxCtrl.service.$timeout(function() {\n            var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n            message.isflagged = isflagged;\n          });\n        }\n      });\n    }\n    else {\n      // Flatten new tags when coming from the predefined list of tags (Message.$tags) and\n      // sync tags with server when adding or removing a tag.\n      $scope.$watchCollection('viewer.message.flags', function(_newTags, _oldTags) {\n        var newTags, oldTags, tags;\n        if (_newTags || _oldTags) {\n          newTags = _newTags || [];\n          oldTags = _oldTags || [];\n          _.forEach(newTags, function(tag, i) {\n            if (angular.isObject(tag))\n              newTags[i] = tag.name;\n          });\n          if (newTags.length > oldTags.length) {\n            tags = _.difference(newTags, oldTags);\n            _.forEach(tags, function(tag) {\n              vm.message.addTag(tag);\n            });\n          }\n          else if (newTags.length < oldTags.length) {\n            tags = _.difference(oldTags, newTags);\n            _.forEach(tags, function(tag) {\n              vm.message.removeTag(tag);\n            });\n          }\n        }\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    function toggleDetailedRecipients($event) {\n      vm.$showDetailedRecipients = !vm.$showDetailedRecipients;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function filterMailtoLinks($event) {\n      var href, match, to, cc, bcc, subject, body, data;\n      if ($event.target.tagName == 'A' && 'href' in $event.target.attributes) {\n        href = $event.target.attributes.href.value;\n        match = /^mailto:([^\\?]+)/.exec(href);\n        if (match) {\n          // Recipients\n          to = _.map(decodeURIComponent(match[1]).split(','), function(email) {\n            return '<' + email + '>';\n          });\n          data = { to: to };\n          // Subject & body\n          _.forEach(['subject', 'body'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            param = (param == 'body')? 'text' : param;\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          // Recipients\n          _.forEach(['cc', 'bcc'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          newMessage($event, data); // will stop event propagation\n        }\n      }\n    }\n\n    function deleteMessage() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage && $mdMedia(sgConstant['gt-md'])) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              if (nextIndex < mailbox.$topIndex)\n                mailbox.$topIndex = nextIndex;\n              else if (nextIndex > mailbox.$lastVisibleIndex)\n                mailbox.$topIndex = nextIndex - (mailbox.$lastVisibleIndex - mailbox.$topIndex);\n            }\n            else {\n              state.go('mail.account.mailbox').then(function() {\n                message = null;\n                delete mailbox.selectedMessage;\n              });\n            }\n          }\n          catch (error) {}\n        }\n        closePopup();\n      });\n    }\n\n    function showMailEditor($event, message) {\n      if (messageDialog === null) {\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateAccount: vm.account,\n              stateMessage: message\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n            closePopup();\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      if ($window.opener)\n        $window.close();\n    }\n\n    function newMessage($event, editableContent) {\n      vm.account.$newMessage().then(function(message) {\n        angular.extend(message.editable, editableContent);\n        showMailEditor($event, message);\n      });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.message.$rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.message.$rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n\n    function print($event) {\n      $window.print();\n    }\n\n    function convertToEvent($event) {\n      return convertToComponent($event, 'appointment');\n    }\n\n    function convertToTask($event) {\n      return convertToComponent($event, 'task');\n    }\n\n    function convertToComponent($event, type) {\n      vm.message.$plainContent().then(function(data) {\n        var componentData = {\n          pid: Calendar.$defaultCalendar(),\n          type: type,\n          summary: data.subject,\n          comment: data.content\n        };\n        var component = new Component(componentData);\n        // UI/Templates/SchedulerUI/UIxAppointmentEditorTemplate.wox or\n        // UI/Templates/SchedulerUI/UIxTaskEditorTemplate.wox\n        var templateUrl = [\n          sgSettings.activeUser('folderURL'),\n          'Calendar',\n          'UIx' + type.capitalize() + 'EditorTemplate'\n        ].join('/');\n        return $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: templateUrl,\n          controller: 'ComponentEditorController',\n          controllerAs: 'editor',\n          locals: {\n            stateComponent: component\n          }\n        });\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$window', '$stateParams', '$mdConstant', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccount', 'stateMessage', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($window, $stateParams, $mdConstant, $mdDialog, $mdToast, FileUploader, stateAccount, stateMessage, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this, semicolon = 186;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = (stateMessage.editable.cc.length === 0);\n    vm.hideBcc = (stateMessage.editable.bcc.length === 0);\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.send = send;\n    vm.removeAttachment = removeAttachment;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.map(stateAccount.identities, 'full');\n    vm.recipientSeparatorKeys = [$mdConstant.KEY_CODE.ENTER, $mdConstant.KEY_CODE.TAB, $mdConstant.KEY_CODE.COMMA, semicolon];\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Error while uploading the file \\\"%{0}\\\":', item.file.name))\n            .position('top right')\n            .hideDelay(3000));\n        this.removeFromQueue(item);\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n      if ($window.opener) {\n        if ($window.opener.$mailboxController) {\n          if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n            ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The draft is opened in the parent window\n              ctrls.draftMessageCtrl = $window.opener.$messageController;\n            }\n          }\n          else if (stateMessage.origin) {\n            originMessage = stateMessage.origin.message;\n            if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n              // The message mailbox is opened in the parent window\n              ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n            }\n          }\n        }\n      }\n      return ctrls;\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem, attrs = vm.message.editable.attachmentAttrs;\n      if (attrs)\n        for (i = 0; i < attrs.length; i++) {\n          data = {\n            name: attrs[i].filename,\n            type: attrs[i].mimetype,\n            size: parseInt(attrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = attrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n    }\n\n    function cancel() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      if (vm.message.isNew && vm.message.attachmentAttrs)\n        vm.message.$mailbox.$deleteMessages([vm.message]);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        vm.message.$rawSource = null;\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      var ctrls = $parentControllers();\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n        $mdDialog.hide();\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query).then(function(cards) {\n        // Divide the matching cards by email addresses so the user can select\n        // the recipient address of her choice\n        var explodedCards = [];\n        _.forEach(_.invokeMap(cards, 'explode'), function(manyCards) {\n          _.forEach(manyCards, function(card) {\n            explodedCards.push(card);\n          });\n        });\n        // Remove duplicates\n        return _.uniqBy(explodedCards, function(card) {\n          return card.$$fullname + ' ' + card.$$email;\n        });\n      });\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list;\n\n      if (angular.isString(contact))\n        return contact;\n\n      recipients = vm.message.editable[field];\n\n      if (contact.$isList({expandable: true})) {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.forEach(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}