{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","forEach","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","i","id","prototype","getLength","$flattenMailboxes","length","getItemAtIndex","index","expandedMailboxes","$getMailboxes","options","_this","$mailboxes","reload","$find","ready","expandedFolders","_visit","mailboxes","$expanded","indexOf","children","settings","Mail","ExpandedFolders","isString","fromJson","when","allMailboxes","push","all","$$flattenMailboxes","saveState","reduce","mailbox","post","$getMailboxByType","type","_find","find","$getMailboxByPath","path","$newMailbox","name","toString","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","isNew","$addDelegate","user","deferred","defer","param","uid","map","delegates","resolve","users","status","reject","promise","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","quotas","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","$isNoInferiors","isNoInferiors","isUndefined","$shadowData","$omit","selectFolder","$lastVisibleIndex","max","$loadMessage","$selectedCount","count","filter","selected","isSelectedMessage","messageId","selectedMessage","hasSelectedMessage","isDefined","$filter","sortingAttributes","filters","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","loaded","subject","min","loading","$unwrapHeaders","flags","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","operation","msgUIDs","saveSelectedMessages","selectedMessages","selectedUIDs","download","exportFolder","$delete","remove","$_deleteMessages","messages","unseen","firstIndex","isread","forEachRight","selectedIndex","findIndex","$deleteMessages","$markOrUnMarkMessagesAsJunk","method","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","$topIndex","invokeMap","threaded","msgs","msg","zipObject","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","filterTags","query","excludedTags","re","RegExp","results","keys","tag","pair","search","includes","color","buildPath","nocache","draftId","$setUID","oldUID","attr","constructor","shortname","replace","image","$shortRecipients","result","total","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","removeAttr","participants","participant","compile","$editableContent","from","toLowerCase","text","$plainContent","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","origin","response","$send","startsWith","isanswered","isforwarded","$futureMessageData","privateAttributes","saveMessage","VirtualMailbox","setMailboxes","startSearch","params","stopSearch","resetSelectedMessage","len","k","MailboxController","$window","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","Dialog","selectMessage","go","mailboxId","toggleMessageSelection","$event","vm","mode","multiple","preventDefault","stopPropagation","unselectMessages","confirmDeleteSelectedMessages","confirm","ok","deleteSelectedMessage","unselectMessage","markOrUnMarkMessagesAsJunk","moveSelectedMessage","nextMessage","previousMessage","nextIndex","console","warn","copySelectedMessages","moveSelectedMessages","selectAll","markSelectedMessagesAsFlagged","d","markSelectedMessagesAsUnread","field","sortedBy","cancelSearch","newMessage","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","stateMessage","stateRecipients","$mailboxController","service","accounts","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","$inject","decorator","MailboxesController","$mdToast","$mdMedia","$mdSidenav","sgConstant","focus","User","showAdvancedSearch","showingAdvancedSearch","close","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","saveFolder","compactFolder","simple","position","hideDelay","emptyTrashFolder","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","window","","MessageController","sgSettings","Calendar","Component","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","toggleDetailedRecipients","$showDetailedRecipients","filterMailtoLinks","href","target","tagName","attributes","exec","decodeURIComponent","deleteMessage","state","parentCtrls","closePopup","showMailEditor","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","editableContent","toggleRawSource","showRawSource","$rawSource","print","convertToEvent","convertToComponent","convertToTask","componentData","pid","$defaultCalendar","summary","comment","capitalize","stateComponent","tags","showFlags","$watchCollection","newTags","oldTags","$watch","wasflagged","_newTags","_oldTags","isObject","difference","MessageEditorController","$stateParams","$mdConstant","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","addAttachments","fileItem","attrs","mimetype","size","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","autosave","send","contactFilter","$filterAll","$cards","addRecipient","contact","recipients","recipient","list","$isList","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","semicolon","autocomplete","hideCc","hideBcc","recipientSeparatorKeys","KEY_CODE","ENTER","TAB","COMMA","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","actionName","msgObject","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode","event","on"],"mappings":"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","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.forEach(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    return collection;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of mailboxes in the account\n   */\n  Account.prototype.getLength = function() {\n    return this.$flattenMailboxes().length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the mailbox at the specified index\n   */\n  Account.prototype.getItemAtIndex = function(index) {\n    var expandedMailboxes;\n\n    expandedMailboxes = this.$flattenMailboxes();\n    if (index >= 0 && index < expandedMailboxes.length)\n      return expandedMailboxes[index];\n\n    return null;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.forEach(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          _.reduce(allMailboxes, function(expandedFolders, mailbox) {\n            if (mailbox.$expanded) {\n              expandedFolders.push('/' + mailbox.id);\n            }\n            return expandedFolders;\n          }, expandedMailboxes);\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        message.isNew = true;\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.map(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.map(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    this.$isNoInferiors = this.isNoInferiors();\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof Mailbox.prototype\n   * @desc Mark the folder as selected in the constructor unless virtual mode is active\n   */\n  Mailbox.prototype.selectFolder = function() {\n    if (!Mailbox.$virtualMode)\n      Mailbox.selectedFolder = this;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is selected.\n   * @param {string} messageId\n   * @returns true if the specified message is selected\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if a message is selected.\n   * @returns true if the a message is selected\n   */\n  Mailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(this.selectedMessage);\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return !filter.searchInput || filter.searchInput.length === 0;\n        });\n        // Decompose filters that match two fields\n        _.forEach(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter, null, filters);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        index,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (angular.isDefined(this.$messages[endIndex].subject) ||\n          angular.isDefined(this.$messages[endIndex].loading)) {\n        index = Math.max(startIndex - Mailbox.PRELOAD.LOOKAHEAD, 0);\n        if (!angular.isDefined(this.$messages[index].subject) &&\n            !angular.isDefined(this.$messages[index].loading)) {\n          // Previous messages not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - Mailbox.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next messages not load; preload more headers further down\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max - 1);\n\n      if (!angular.isDefined(this.$messages[startIndex].subject) &&\n          !angular.isDefined(this.$messages[startIndex].loading) ||\n          !angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function isNoInferiors\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can contain submailboxes\n   * @returns true if the mailbox can not contain submailboxes\n   */\n  Mailbox.prototype.isNoInferiors = function() {\n    return this.flags.indexOf('noinferiors') >= 0;\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.map(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.map(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function saveSelectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Download the selected messages\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.saveSelectedMessages = function() {\n    var selectedMessages, selectedUIDs;\n\n    selectedMessages = _.filter(this.$messages, function(message) { return message.selected; });\n    selectedUIDs = _.map(selectedMessages, 'uid');\n\n    return Mailbox.$$resource.download(this.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n  /**\n   * @function exportFolder\n   * @memberof Mailbox.prototype\n   * @desc Export this mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.exportFolder = function() {\n    return Mailbox.$$resource.download(this.id, 'exportFolder');\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.remove(this.id)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $_deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from Mailbox object.\n   * @param {string[]} uids - the messages uids\n   * @param {object[]} messages - the Message instances\n   * @return the index of the first deleted message\n   */\n  Mailbox.prototype.$_deleteMessages = function(uids, messages) {\n    var _this = this, selectedUIDs, _$messages, unseen, firstIndex = this.$messages.length;\n\n    // Decrement the unseen count\n    unseen = _.filter(messages, function(message, i) { return !message.isread; });\n    this.unseenCount -= unseen.length;\n\n    // Remove messages from $messages and uidsMap\n    _.forEachRight(this.$messages, function(message, index) {\n      var selectedIndex = _.findIndex(uids, function(uid) {\n        return message.uid == uid;\n      });\n      if (selectedIndex > -1) {\n        uids.splice(selectedIndex, 1);\n        delete _this.uidsMap[message.uid];\n        if (message.uid == _this.selectedMessage)\n          delete _this.selectedMessage;\n        _this.$messages.splice(index, 1);\n        //_this.$messages[index] = null;\n        if (index < firstIndex)\n          firstIndex = index;\n      }\n      else {\n        _this.uidsMap[message.uid] -= uids.length;\n      }\n    });\n\n    //_$messages = _.compact(this.$messages);\n    //this.$messages = _$messages;\n    this.getItemAtIndex(firstIndex);\n\n    // Return the index of the first deleted message\n    return firstIndex;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof Mailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messages) {\n    var _this = this, uids;\n    var method = (this.type == 'junk' ? 'markMessagesAsNotJunk' : 'markMessagesAsJunk');\n    uids = _.map(messages, 'uid');\n\n    return Mailbox.$$resource.post(this.id, method, {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(messages, folder) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder})\n      .then(function() {\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        if (!data.uids || _this.$topIndex > data.uids.length - 1)\n          _this.$topIndex = 0;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.zipObject(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.forEach(_this.headers, function(data) {\n            var msg = _.zipObject(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(messageHeaders) {\n            messageHeaders = _.zipObject(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser())\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query, excludedTags) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        if (!_.includes(excludedTags, tag))\n          results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    var _this = this, id = this.id;\n\n    function buildPath() {\n      var path;\n      path = _.map(_this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, _this.accountId); // insert account ID\n      return path.join('/');\n    }\n\n    if (angular.isUndefined(this.id) || options && options.nocache) {\n      this.id = buildPath() + '/' + this.uid; // add message UID\n      id = this.id;\n    }\n    if (options && options.asDraft && this.draftId) {\n      id = buildPath() + '/' + this.draftId; // add draft ID\n    }\n\n    return id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1), _this = this, index;\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      this.$absolutePath({nocache: true});\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          index = this.$mailbox.uidsMap[oldUID];\n          this.$mailbox.uidsMap[uid] = index;\n          delete this.$mailbox.uidsMap[oldUID];\n\n          // Update messages list of mailbox\n          _.forEach(['from', 'to', 'subject'], function(attr) {\n            _this.$mailbox.$messages[index][attr] = _this[attr];\n          });\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.map(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.forEach(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.forEach(_this[type], function(data) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          if (data.name.length < 10)\n            // Name is already short\n            data.shortname = data.name;\n          else if (data.name.split(' ').length)\n            // If we have \"Alice Foo\" as name, we grab \"Alice\"\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else if (data.email) {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function(max) {\n    var _this = this, result = [], count = 0, total = 0;\n\n    // Build short representation of email addresses\n    _.forEach(['to', 'cc', 'bcc'], function(type) {\n      total += _this[type]? _this[type].length : 0;\n      _.forEach(_this[type], function(data, i) {\n        if (count < max)\n          result.push(data.shortname);\n        count++;\n      });\n    });\n\n    if (total > max)\n      result.push(l('and %{0} more...', (total - max)));\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], _.bind(function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, this), recipientsCount);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.forEach(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.forEach(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        // Try to match a known account identity from the specified \"from\" address\n        var identity = _.find(_this.$mailbox.$account.identities, function(identity) {\n          return data.from.toLowerCase().indexOf(identity.email) !== -1;\n        });\n        if (identity)\n          data.from = identity.full;\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function $plainContent\n   * @memberof Message.prototype\n   * @returns the a plain text representation of the subject and body\n   */\n  Message.prototype.$plainContent = function() {\n    return Message.$$resource.fetch(this.$absolutePath(), 'viewplain');\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n      _this.isNew = false;\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable);\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n        return data;\n      }\n      else {\n        return Message.$q.reject(data);\n      }\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function(options) {\n    var message = {},\n        privateAttributes = options && options.privateAttributes;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$' || privateAttributes) {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n  /**\n   * @function saveMessage\n   * @memberof Message.prototype\n   * @desc Download the current message\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.saveMessage = function() {\n    var selectedUIDs;\n\n    selectedUIDs = [ this.uid ];\n\n    return Message.$$resource.download(this.$mailbox.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() {\n      _this.$isLoading = false;\n    });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof VirtualMailbox.prototype\n   * @desc A no-op for virtual mailbox\n   */\n  VirtualMailbox.prototype.selectFolder = function() {\n    return;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.forEach(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if a message is selected among the resulting mailboxes\n   * @returns true if one message is selected\n   */\n  VirtualMailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return angular.isDefined(mailbox.selectedMessage);\n    }));\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    // TODO\n    return 0;\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    // TODO\n    // var data = {msgUIDs: uids,\n    //             flags: flags,\n    //             operation: operation};\n\n    // return VirtualMailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(uids) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$timeout', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($window, $timeout, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    // Expose controller\n    $window.$mailboxController = vm;\n\n    stateMailbox.selectFolder();\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.unselectMessages = unselectMessages;\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.markOrUnMarkMessagesAsJunk = markOrUnMarkMessagesAsJunk;\n    vm.copySelectedMessages = copySelectedMessages;\n    vm.moveSelectedMessages = moveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false, multiple: 0 };\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      message.selected = !message.selected;\n      vm.mode.multiple += message.selected? 1 : -1;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function unselectMessages() {\n      _.forEach(vm.selectedFolder.$messages, function(message) {\n        message.selected = false;\n      });\n      vm.mode.multiple = 0;\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'),\n                     { ok: l('Delete') })\n        .then(function() {\n          var deleteSelectedMessage = false;\n          var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) {\n            if (message.selected &&\n                message.uid == vm.selectedFolder.selectedMessage)\n              deleteSelectedMessage = true;\n            return message.selected;\n          });\n          vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n            unselectMessage(deleteSelectedMessage, index);\n          });\n        });\n    }\n\n    function markOrUnMarkMessagesAsJunk() {\n      var moveSelectedMessage = false;\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) {\n        if (message.selected &&\n            message.uid == vm.selectedFolder.selectedMessage)\n          moveSelectedMessage = true;\n        return message.selected;\n      });\n\n      vm.selectedFolder.$markOrUnMarkMessagesAsJunk(selectedMessages).then(function() {\n        var folder = '/' + vm.account.id + '/folderINBOX';\n\n        if (vm.selectedFolder.type != 'junk') {\n          folder = '/' + vm.account.$getMailboxByType('junk').id;\n        }\n\n        vm.selectedFolder.$moveMessages(selectedMessages, folder).then(function(index) {\n          unselectMessage(moveSelectedMessage, index);\n        });\n      });\n    }\n\n    function unselectMessage(message, index) {\n      // Unselect current message and cleverly load the next message\n      var nextMessage, previousMessage, nextIndex = index;\n      vm.mode.multiple = vm.selectedFolder.$selectedCount();\n      if (message) {\n        if (Mailbox.$virtualMode) {\n          $state.go('mail.account.virtualMailbox');\n        }\n        else {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = vm.selectedFolder.$messages[nextIndex];\n          }\n          if (index < vm.selectedFolder.$messages.length)\n            previousMessage = vm.selectedFolder.$messages[index];\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n          if (nextMessage) {\n            vm.selectedFolder.$topIndex = nextIndex;\n            $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n          }\n          else {\n            $state.go('mail.account.mailbox');\n          }\n        }\n      }\n      else {\n        $timeout(function() {\n          console.warn('go to mailbox');\n          $state.go('mail.account.mailbox');\n        });\n      }\n    }\n\n    function copySelectedMessages(folder) {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.map(selectedMessages, 'uid');\n      vm.selectedFolder.$copyMessages(selectedUIDs, '/' + folder);\n    }\n\n    function moveSelectedMessages(folder) {\n      var moveSelectedMessage = false;\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) {\n        if (message.selected &&\n            message.uid == vm.selectedFolder.selectedMessage)\n          moveSelectedMessage = true;\n        return message.selected;\n      });\n      vm.selectedFolder.$moveMessages(selectedMessages, '/' + folder).then(function(index) {\n        unselectMessage(moveSelectedMessage, index);\n      });\n    }\n\n    function selectAll() {\n      var i = 0, length = vm.selectedFolder.$messages.length;\n      for (; i < length; i++)\n        vm.selectedFolder.$messages[i].selected = true;\n      vm.mode.multiple = length;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.map(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, '\\\\Flagged', 'add').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isflagged = true;\n        });\n      });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.map(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, 'seen', 'remove').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isread = false;\n          vm.selectedFolder.unseenCount++;\n        });\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter().then(function() {\n        if (vm.selectedFolder.selectedMessage) {\n          $timeout(function() {\n            vm.selectedFolder.$topIndex = vm.selectedFolder.uidsMap[vm.selectedFolder.selectedMessage];\n          });\n        }\n      });\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgConstant', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $mdDialog, $mdToast, $mdMedia, $mdSidenav, sgConstant, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.forEach(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder($event, account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Trash emptied'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail.account.inbox');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'junk')\n        return {name: l('JunkFolderName'), icon: 'thumb_down'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      return {name: folder.name, icon: 'folder_open'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdMedia', '$mdDialog', 'sgConstant', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Calendar', 'Component', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdMedia, $mdDialog, sgConstant, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, sgSettings, focus, Dialog, Calendar, Component, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null;\n\n    // Expose controller\n    $window.$messageController = vm;\n\n    vm.$state = $state;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.toggleDetailedRecipients = toggleDetailedRecipients;\n    vm.filterMailtoLinks = filterMailtoLinks;\n    vm.deleteMessage = deleteMessage;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n    vm.print = print;\n    vm.convertToEvent = convertToEvent;\n    vm.convertToTask = convertToTask;\n\n    // One-way refresh of the parent window when modifying the message from a popup window.\n    if ($window.opener) {\n      // Update the message flags. The message must be displayed in the parent window.\n      $scope.$watchCollection('viewer.message.flags', function(newTags, oldTags) {\n        var ctrls;\n        if (newTags || oldTags) {\n          ctrls = $parentControllers();\n          if (ctrls.messageCtrl) {\n            ctrls.messageCtrl.service.$timeout(function() {\n              ctrls.messageCtrl.message.flags = newTags;\n            });\n          }\n        }\n      });\n      // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n      $scope.$watch('viewer.message.isflagged', function(isflagged, wasflagged) {\n        var ctrls = $parentControllers();\n        if (ctrls.mailboxCtrl) {\n          ctrls.mailboxCtrl.service.$timeout(function() {\n            var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n            message.isflagged = isflagged;\n          });\n        }\n      });\n    }\n    else {\n      // Flatten new tags when coming from the predefined list of tags (Message.$tags) and\n      // sync tags with server when adding or removing a tag.\n      $scope.$watchCollection('viewer.message.flags', function(_newTags, _oldTags) {\n        var newTags, oldTags, tags;\n        if (_newTags || _oldTags) {\n          newTags = _newTags || [];\n          oldTags = _oldTags || [];\n          _.forEach(newTags, function(tag, i) {\n            if (angular.isObject(tag))\n              newTags[i] = tag.name;\n          });\n          if (newTags.length > oldTags.length) {\n            tags = _.difference(newTags, oldTags);\n            _.forEach(tags, function(tag) {\n              vm.message.addTag(tag);\n            });\n          }\n          else if (newTags.length < oldTags.length) {\n            tags = _.difference(oldTags, newTags);\n            _.forEach(tags, function(tag) {\n              vm.message.removeTag(tag);\n            });\n          }\n        }\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    function toggleDetailedRecipients($event) {\n      vm.$showDetailedRecipients = !vm.$showDetailedRecipients;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function filterMailtoLinks($event) {\n      var href, match, to, cc, bcc, subject, body, data;\n      if ($event.target.tagName == 'A' && 'href' in $event.target.attributes) {\n        href = $event.target.attributes.href.value;\n        match = /^mailto:([^\\?]+)/.exec(href);\n        if (match) {\n          // Recipients\n          to = _.map(decodeURIComponent(match[1]).split(','), function(email) {\n            return '<' + email + '>';\n          });\n          data = { to: to };\n          // Subject & body\n          _.forEach(['subject', 'body'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            param = (param == 'body')? 'text' : param;\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          // Recipients\n          _.forEach(['cc', 'bcc'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          newMessage($event, data); // will stop event propagation\n        }\n      }\n    }\n\n    function deleteMessage() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage && $mdMedia(sgConstant['gt-md'])) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              if (nextIndex < mailbox.$topIndex)\n                mailbox.$topIndex = nextIndex;\n              else if (nextIndex > mailbox.$lastVisibleIndex)\n                mailbox.$topIndex = nextIndex - (mailbox.$lastVisibleIndex - mailbox.$topIndex);\n            }\n            else {\n              state.go('mail.account.mailbox').then(function() {\n                message = null;\n                delete mailbox.selectedMessage;\n              });\n            }\n          }\n          catch (error) {}\n        }\n        closePopup();\n      });\n    }\n\n    function showMailEditor($event, message) {\n      if (messageDialog === null) {\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateAccount: vm.account,\n              stateMessage: message\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n            closePopup();\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      if ($window.opener)\n        $window.close();\n    }\n\n    function newMessage($event, editableContent) {\n      vm.account.$newMessage().then(function(message) {\n        angular.extend(message.editable, editableContent);\n        showMailEditor($event, message);\n      });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.message.$rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.message.$rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n\n    function print($event) {\n      $window.print();\n    }\n\n    function convertToEvent($event) {\n      return convertToComponent($event, 'appointment');\n    }\n\n    function convertToTask($event) {\n      return convertToComponent($event, 'task');\n    }\n\n    function convertToComponent($event, type) {\n      vm.message.$plainContent().then(function(data) {\n        var componentData = {\n          pid: Calendar.$defaultCalendar(),\n          type: type,\n          summary: data.subject,\n          comment: data.content\n        };\n        var component = new Component(componentData);\n        // UI/Templates/SchedulerUI/UIxAppointmentEditorTemplate.wox or\n        // UI/Templates/SchedulerUI/UIxTaskEditorTemplate.wox\n        var templateUrl = [\n          sgSettings.activeUser('folderURL'),\n          'Calendar',\n          'UIx' + type.capitalize() + 'EditorTemplate'\n        ].join('/');\n        return $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: templateUrl,\n          controller: 'ComponentEditorController',\n          controllerAs: 'editor',\n          locals: {\n            stateComponent: component\n          }\n        });\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$window', '$stateParams', '$mdConstant', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccount', 'stateMessage', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($window, $stateParams, $mdConstant, $mdDialog, $mdToast, FileUploader, stateAccount, stateMessage, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this, semicolon = 186;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = (stateMessage.editable.cc.length === 0);\n    vm.hideBcc = (stateMessage.editable.bcc.length === 0);\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.send = send;\n    vm.removeAttachment = removeAttachment;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.map(stateAccount.identities, 'full');\n    vm.recipientSeparatorKeys = [$mdConstant.KEY_CODE.ENTER, $mdConstant.KEY_CODE.TAB, $mdConstant.KEY_CODE.COMMA, semicolon];\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Error while uploading the file \\\"%{0}\\\":', item.file.name))\n            .position('top right')\n            .hideDelay(3000));\n        this.removeFromQueue(item);\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n      if ($window.opener) {\n        if ($window.opener.$mailboxController) {\n          if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n            ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The draft is opened in the parent window\n              ctrls.draftMessageCtrl = $window.opener.$messageController;\n            }\n          }\n          else if (stateMessage.origin) {\n            originMessage = stateMessage.origin.message;\n            if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n              // The message mailbox is opened in the parent window\n              ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n            }\n          }\n        }\n      }\n      return ctrls;\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem, attrs = vm.message.editable.attachmentAttrs;\n      if (attrs)\n        for (i = 0; i < attrs.length; i++) {\n          data = {\n            name: attrs[i].filename,\n            type: attrs[i].mimetype,\n            size: parseInt(attrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = attrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n    }\n\n    function cancel() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      if (vm.message.isNew && vm.message.attachmentAttrs)\n        vm.message.$mailbox.$deleteMessages([vm.message]);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        vm.message.$rawSource = null;\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      var ctrls = $parentControllers();\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n        $mdDialog.hide();\n      });\n    }\n\n    function contactFilter($query) {\n      AddressBook.$filterAll($query);\n      return AddressBook.$cards;\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list;\n\n      if (angular.isString(contact))\n        return contact;\n\n      recipients = vm.message.editable[field];\n\n      if (contact.$isList()) {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.forEach(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}