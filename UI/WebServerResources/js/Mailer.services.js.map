{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","each","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","forEach","i","id","prototype","$getMailboxes","options","_this","$mailboxes","reload","$find","ready","expandedFolders","_visit","mailboxes","$expanded","indexOf","children","length","settings","Mail","ExpandedFolders","isString","fromJson","$flattenMailboxes","when","allMailboxes","expandedMailboxes","push","all","$$flattenMailboxes","saveState","reduce","mailbox","post","$getMailboxByType","type","_find","find","console","specialMailboxes","$getMailboxByPath","path","$newMailbox","name","toString","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","$addDelegate","user","deferred","defer","param","uid","pluck","delegates","resolve","users","status","reject","l","promise","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","index","map","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","isUndefined","$shadowData","$omit","getLength","getItemAtIndex","$loadMessage","$selectedCount","count","filter","selected","isSelectedMessage","messageId","selectedMessage","$filter","sortingAttributes","filters","isDefined","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","max","loaded","subject","Math","min","loading","$unwrapHeaders","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","flags","operation","msgUIDs","$delete","remove","$deleteMessages","messages","unseen","isread","forEachRight","selectedIndex","findIndex","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","invoke","threaded","msgs","msg","object","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","filterTags","query","re","RegExp","results","keys","tag","pair","search","description","color","draftId","$setUID","oldUID","constructor","shortname","replace","image","$shortRecipients","result","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","attr","removeAttr","participants","participant","compile","$editableContent","text","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","origin","response","$send","startsWith","isanswered","isforwarded","$futureMessageData","VirtualMailbox","setMailboxes","startSearch","params","stopSearch","resetSelectedMessage","len","k","MailboxController","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","Dialog","selectMessage","go","mailboxId","toggleMessageSelection","$event","preventDefault","stopPropagation","unselectMessages","vm","confirmDeleteSelectedMessages","confirm","unselectMessage","selectedMessages","copySelectedMessages","selectedUIDs","saveSelectedMessages","window","location","href","ApplicationBaseURL","selectAll","markSelectedMessagesAsFlagged","d","markSelectedMessagesAsUnread","field","sortedBy","cancelSearch","mode","newMessage","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","accounts","stateMessage","stateRecipients","service","$inject","MailboxesController","$mdToast","$mdMedia","$mdSidenav","focus","User","showAdvancedSearch","showingAdvancedSearch","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","selectFolder","close","saveFolder","compactFolder","simple","position","hideDelay","emptyTrashFolder","exportMails","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","includes","","from","current","MessageController","$window","sgSettings","showDetailedRecipients","$showDetailedRecipients","doDelete","showMailEditor","recipients","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","closePopup","recipient","saveMessage","toggleRawSource","showRawSource","rawSource","tags","showFlags","$watchCollection","oldTags","newTags","difference","MessageEditorController","$stateParams","FileUploader","AddressBook","addAttachments","fileItem","mimetype","size","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","autosave","send","contactFilter","$filterAll","addRecipient","$$fullname","$$email","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideCc","hideBcc","flatten","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","actionName","msgObject","union","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","attrs","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode","event","target","tagName","on"],"mappings":"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","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.each(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    return collection;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.each(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          _.reduce(allMailboxes, function(expandedFolders, mailbox) {\n            if (mailbox.$expanded) {\n              expandedFolders.push('/' + mailbox.id);\n            }\n            return expandedFolders;\n          }, expandedMailboxes);\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    console.debug(mailbox);\n    console.debug(this.specialMailboxes);\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.pluck(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.pluck(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is selected.\n   * @param {string} messageId\n   * @returns true if the specified message is selected\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n    /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return angular.isUndefined(filter.searchInput) || filter.searchInput.length === 0;\n        });\n        _.each(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (!angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max);\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.pluck(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.pluck(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    return Mailbox.$$resource.post(this.id, 'expunge');\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function() {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.remove(this.id)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages) {\n    var _this = this, uids;\n\n    uids = _.pluck(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids})\n      .then(function() {\n        var selectedMessages, selectedUIDs, unseen;\n        // Decrement the unseenCount accordingly\n        unseen = _.filter(messages, function(message, i) { return !message.isread; });\n        _this.unseenCount -= unseen.length;\n        // Remove messages from $messages and uidsMap\n        _.forEachRight(_this.$messages, function(message, index) {\n          var selectedIndex = _.findIndex(uids, function(uid) {\n            return message.uid == uid;\n          });\n          if (selectedIndex > -1) {\n            uids.splice(selectedIndex, 1);\n            delete _this.uidsMap[message.uid];\n            if (message.uid == _this.selectedMessage)\n              delete _this.selectedMessage;\n            _this.$messages.splice(index, 1);\n          }\n          else {\n            _this.uidsMap[message.uid] -= uids.length;\n          }\n        });\n      });\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invoke(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.object(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.each(_this.headers, function(data) {\n            var msg = _.object(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invoke(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.each(data, function(messageHeaders) {\n            messageHeaders = _.object(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isDefined(lazy) && lazy) {\n        this.uid = futureMessageData.uid;\n      }\n      else {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser())\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    if (angular.isUndefined(this.id) || options) {\n      var path;\n      path = _.map(this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, this.accountId); // insert account ID\n      if (options && options.asDraft && this.draftId) {\n        path.push(this.draftId); // add draft ID\n      }\n      else {\n        path.push(this.uid); // add message UID\n      }\n\n      this.id = path.join('/');\n    }\n\n    return this.id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1);\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = uid;\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          this.$mailbox.uidsMap[uid] = this.$mailbox.uidsMap[oldUID];\n          delete this.$mailbox.uidsMap[oldUID];\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.pluck(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.each(_this[type], function(data, i) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          // If we have \"Alice Foo\" as name, we grab \"Alice\"\n          if (data.name.split(' ').length)\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function() {\n    var _this = this;\n    var result = [];\n\n    // Build long representation of email addresses\n    _.each(['to', 'cc', 'bcc'], function(type) {\n      _.each(_this[type], function(data, i) {\n        result.push(data.shortname);\n      });\n    });\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, recipientsCount, this);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.each(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.each(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload({asDraft: false}); // fetch a new viewable version of the message\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable),\n        deferred = Message.$q.defer();\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        deferred.resolve(data);\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n      }\n      else {\n        deferred.reject(data);\n      }\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function() {\n    var message = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        message[key] = value;\n      }\n    });\n\n    // Format addresses as arrays\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      if (message[type])\n        message[type] = _.invoke(message[type].split(','), 'trim');\n    });\n\n    //Message.$log.debug(JSON.stringify(message, undefined, 2));\n    return message;\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() { _this.$isLoading = false; });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.each(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    // TODO\n    return 0;\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    // TODO\n    // var data = {msgUIDs: uids,\n    //             flags: flags,\n    //             operation: operation};\n\n    // return VirtualMailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(uids) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$state', '$timeout', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($state, $timeout, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    Mailbox.selectedFolder = stateMailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.unselectMessages = unselectMessages;\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.copySelectedMessages = copySelectedMessages;\n    // vm.moveSelectedMessages = moveSelectedMessages;\n    vm.saveSelectedMessages = saveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false };\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      message.selected = !message.selected;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function unselectMessages() {\n      _.each(vm.selectedFolder.$messages, function(message) { message.selected = false; });\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'))\n        .then(function() {\n          // User confirmed the deletion\n          var unselectMessage = false;\n          var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) {\n            if (message.uid == vm.selectedFolder.selectedMessage)\n              unselectMessage = true;\n            return message.selected;\n          });\n          vm.selectedFolder.$deleteMessages(selectedMessages).then(function() {\n            if (unselectMessage) {\n              if (Mailbox.$virtualMode)\n                $state.go('mail.account.virtualMailbox',\n                          {\n                            accountId: stateAccount.id,\n                            mailboxId: encodeUriFilter(vm.selectedFolder.path)\n                          });\n              else\n                $state.go('mail.account.mailbox',\n                          {\n                            accountId: stateAccount.id,\n                            mailboxId: encodeUriFilter(vm.selectedFolder.path)\n                          });\n            }\n          });\n        });\n    }\n\n    function copySelectedMessages(folder) {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      vm.selectedFolder.$copyMessages(selectedUIDs, '/' + folder);\n    }\n\n    // function moveSelectedMessages(folder) {\n    //   var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected });\n    //   var selectedUIDs = _.pluck(selectedMessages, 'uid');\n    //   vm.selectedFolder.$moveMessages(selectedUIDs, '/' + folder).then(function() {\n    //     // TODO: refresh target mailbox?\n    //     vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n    //   });\n    // }\n\n    function saveSelectedMessages() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      window.location.href = ApplicationBaseURL + '/' + vm.selectedFolder.id + '/saveMessages?uid=' + selectedUIDs.join(\",\");\n    }\n\n    function selectAll() {\n      var i = 0, length = vm.selectedFolder.$messages.length;\n      for (; i < length; i++)\n        vm.selectedFolder.$messages[i].selected = true;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, '\\\\Flagged', 'add').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isflagged = true;\n        });\n      });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, 'seen', 'remove').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isread = false;\n          vm.selectedFolder.unseenCount++;\n        });\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter();\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $mdDialog, $mdToast, $mdMedia, $mdSidenav, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.exportMails = exportMails;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    if ($state.current.name == 'mail' && vm.accounts.length > 0 && vm.accounts[0].$mailboxes.length > 0) {\n      // Redirect to first mailbox of first account if no mailbox is selected\n      account = vm.accounts[0];\n      mailbox = account.$mailboxes[0];\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.each(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder(account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n        // Close sidenav on small devices\n      if ($mdMedia('sm'))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        }, function(data, status) {\n          Dialog.alert(l('Warning'), data);\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        // Success\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function exportMails(folder) {\n      window.location.href = ApplicationBaseURL + '/' + folder.id + '/exportFolder';\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      return {name: folder.name, icon: 'folder_open'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, sgSettings, focus, Dialog, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null;\n\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.showDetailedRecipients = showDetailedRecipients;\n    vm.doDelete = doDelete;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.saveMessage = saveMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n\n    // Watch the message model \"flags\" attribute to remove on-the-fly a tag from the IMAP message\n    // when removed from the message viewer.\n    // TODO: this approach should be reviewed once md-chips supports ng-change.\n    $scope.$watchCollection('viewer.message.flags', function(oldTags, newTags) {\n      _.each(_.difference(newTags, oldTags), function(tag) {\n        vm.message.removeTag(tag);\n      });\n    });\n\n    function showDetailedRecipients($event) {\n      vm.$showDetailedRecipients = true;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function doDelete() {\n      stateMailbox.$deleteMessages([stateMessage]).then(function() {\n        // Remove message from list of messages\n        var index = _.findIndex(stateMailbox.$messages, function(o) {\n          return o.uid == stateMessage.uid;\n        });\n        if (index != -1)\n          stateMailbox.$messages.splice(index, 1);\n        // Remove message object from scope\n        vm.message = null;\n        $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) });\n      });\n    }\n\n    function showMailEditor($event, message, recipients) {\n      if (messageDialog === null) {\n        if (!angular.isDefined(recipients))\n          recipients = [];\n\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: recipients\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) }).then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      $window.close();\n    }\n\n    function newMessage($event, recipient) {\n      var message = vm.account.$newMessage();\n      showMailEditor($event, message, [recipient]);\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveMessage() {\n      window.location.href = ApplicationBaseURL + '/' + vm.mailbox.id + '/saveMessages?uid=' + vm.message.uid;\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$stateParams', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccounts', 'stateMessage', 'stateRecipients', '$timeout', 'Dialog', 'AddressBook', 'Preferences'];\n  function MessageEditorController($stateParams, $mdDialog, $mdToast, FileUploader, stateAccounts, stateMessage, stateRecipients, $timeout, Dialog, AddressBook, Preferences) {\n    var vm = this;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = true;\n    vm.hideBcc = true;\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.send = send;\n    vm.removeAttachment = removeAttachment;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.pluck(_.flatten(_.pluck(stateAccounts, 'identities')), 'full');\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    if (angular.isDefined(stateRecipients)) {\n      vm.message.editable.to = _.union(vm.message.editable.to, _.pluck(stateRecipients, 'full'));\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem;\n      if (vm.message.attachmentAttrs)\n        for (i = 0; i < vm.message.attachmentAttrs.length; i++) {\n          data = {\n            name: vm.message.attachmentAttrs[i].filename,\n            type: vm.message.attachmentAttrs[i].mimetype,\n            size: parseInt(vm.message.attachmentAttrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = vm.message.attachmentAttrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n    }\n\n    function cancel() {\n      // TODO: delete draft?\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      vm.message.$save().then(function(data) {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n        $mdDialog.hide();\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query);\n    }\n\n    function addRecipient(user) {\n      var recipient = [];\n\n      if (angular.isString(user))\n        return user;\n      if (user.$$fullname)\n        recipient.push(user.$$fullname);\n      if (user.$$email)\n        recipient.push('<' + user.$$email + '>');\n\n      return recipient.join(' ');\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}