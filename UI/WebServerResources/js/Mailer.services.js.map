{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","forEach","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","i","id","$accounts","prototype","getLength","$flattenMailboxes","length","getItemAtIndex","index","expandedMailboxes","$getMailboxes","options","_this","$mailboxes","reload","$find","$expanded","ready","expandedFolders","_visit","mailboxes","indexOf","children","settings","Mail","ExpandedFolders","isString","fromJson","when","allMailboxes","push","all","$$flattenMailboxes","saveState","account","reduce","mailbox","post","$getMailboxByType","type","_find","find","$getMailboxByPath","path","$newMailbox","name","toString","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","accountId","mailboxPath","message","$absolutePath","asDraft","editable","isNew","$addDelegate","user","deferred","defer","param","uid","map","delegates","resolve","users","status","reject","promise","$removeDelegate","splice","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","quotas","split","component","asCSSIdentifier","join","isUndefined","uidsMap","headers","$isLoading","$messages","$id","$acl","$displayName","$isEditable","isEditable","$isSpecial","$icon","$isNoInferiors","isNoInferiors","$shadowData","$omit","selectFolder","$lastVisibleIndex","max","$loadMessage","$selectedMessages","filter","selected","$selectedCount","isSelectedMessage","messageId","selectedMessage","$selectedMessage","$selectedMessageIndex","hasSelectedMessage","isDefined","$filter","sortingAttributes","filters","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","loaded","subject","min","loading","$unwrapHeaders","flags","isNoSelect","$rename","findParent","parent","parentMailbox","$save","sibling","oldPath","localeCompare","pathRE","RegExp","_updateChildren","child","replace","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","messages","operation","msgUIDs","saveSelectedMessages","selectedMessages","selectedUIDs","filename","download","exportFolder","$delete","$_deleteMessages","unseen","firstIndex","isread","forEachRight","selectedIndex","findIndex","$deleteMessages","$markOrUnMarkMessagesAsJunk","method","$copyMessages","folder","$moveMessages","$reset","value","key","save","response","error","$futureMailboxData","$topIndex","invokeMap","threaded","msgs","msg","zipObject","isError","j","messageHeaders","$updateSubscribe","action","subscribed","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Message_STATUS","STATUS","$avatar","avatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","NOT_LOADED","DELAYED_LOADING","LOADING","LOADED","DELAYED_MS","filterTags","query","excludedTags","re","results","keys","tag","pair","search","includes","color","buildPath","nocache","draftId","withResourcePath","$setUID","oldUID","attr","constructor","shortname","first","last","image","$shortRecipients","result","count","total","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","removeAttr","compile","$editableContent","from","toLowerCase","text","$plainContent","addTag","$addOrRemoveTag","removeTag","$imipAction","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","attachmentAttrs","attachment","toggleFlag","isflagged","$loaded","useCache","$futureMessageData","$reply","$newDraft","$replyAll","$forward","origin","$send","startsWith","isanswered","isforwarded","privateAttributes","downloadAttachments","VirtualMailbox","setMailboxes","startSearch","params","finally","stopSearch","resetSelectedMessage","len","k","transform","messagesMap","sum","allMessages","promises","assign","flatten","MailboxController","$window","$scope","$state","$mdDialog","$mdToast","stateAccounts","stateAccount","stateMailbox","sgHotkeys","encodeUriFilter","sgSettings","focus","Dialog","_registerHotkeys","createHotkey","callback","searchMode","$event","vm","messageDialog","newMessage","markOrUnMarkMessagesAsJunk","toggleMessageSelection","_nextMessage","preventInClass","_previousMessage","_addNextMessageToSelection","_addPreviousMessageToSelection","confirmDeleteSelectedMessages","registerHotkey","_compactBeforeUnload","event","field","sortedBy","mode","cancelSearch","inPopup","_newMessageInPopup","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","stateMessage","url","baseURL","wId","random","console","open","selectMessage","preventDefault","go","mailboxId","nextSelectedIndex","multiple","shiftKey","stopPropagation","_currentMailboxes","_unselectMessage","nextMessage","previousMessage","nextIndex","warn","size","confirm","ok","deleteSelectedMessage","withoutTrash","moveSelectedMessage","dstFolder","copySelectedMessages","simple","position","hideDelay","moveSelectedMessages","selectAll","unselectMessages","markSelectedMessagesAsFlagged","markSelectedMessagesAsUnread","markSelectedMessagesAsRead","defaultWindowTitle","hotkeys","$mailboxController","service","accounts","on","$on","off","deregisterHotkey","$watch","title","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","$inject","decorator","MailboxesController","$mdMedia","$mdSidenav","sgConstant","User","confirmDelete","showAdvancedSearch","showingAdvancedSearch","close","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","toggleAccountState","triggerHandler","subscribe","SubscriptionsDialogController","srcAccount","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","userFilter","closeModal","hide","removeUser","catch","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","saveFolder","compactFolder","emptyTrashFolder","markFolderRead","share","$users","usersWithACL","setFolderAs","refreshUnseenCount","unseenCountFolders","isDroppableFolder","srcFolder","dragSelectedMessages","dstId","clearMessageView","success","","showSubscribedOnly","SOGoMailShowSubscribedFoldersOnly","MessageController","Calendar","Component","_messageDialog","arguments","_unlessInDialog","apply","reply","replyAll","forward","deleteMessage","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","toggleDetailedRecipients","$showDetailedRecipients","filterMailtoLinks","href","target","tagName","attributes","exec","decodeURIComponent","state","parentCtrls","closePopup","showMailEditor","edit","openPopup","popupWindow","editableContent","toggleRawSource","showRawSource","$rawSource","print","convertToEvent","convertToComponent","convertToTask","componentData","pid","$defaultCalendar","summary","comment","capitalize","stateComponent","tags","showFlags","$watchCollection","newTags","oldTags","wasflagged","_newTags","_oldTags","isObject","difference","MessageEditorController","$stateParams","$mdConstant","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","addAttachments","fileItem","attrs","mimetype","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","remove","getElementById","prop","autosave","send","sendState","errorMessage","statusText","toggleFullscreen","isFullscreen","contactFilter","$filterAll","cards","explodedCards","manyCards","card","uniqBy","$$fullname","$$email","addRecipient","contact","recipients","recipient","list","$isList","expandable","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideBcc","hideCc","recipientSeparatorKeys","KEY_CODE","ENTER","TAB","COMMA","SEMICOLON","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","destroy","actionName","msgObject","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode"],"mappings":"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","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n    function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.forEach(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    Account.$accounts = collection;\n\n    return collection;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of mailboxes in the account\n   */\n  Account.prototype.getLength = function() {\n    return this.$flattenMailboxes().length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the mailbox at the specified index\n   */\n  Account.prototype.getItemAtIndex = function(index) {\n    var expandedMailboxes;\n\n    expandedMailboxes = this.$flattenMailboxes();\n    if (index >= 0 && index < expandedMailboxes.length)\n      return expandedMailboxes[index];\n\n    return null;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this, options).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$expanded = false;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            _this.$expanded = (expandedFolders.indexOf('/' + _this.id) >= 0);\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          if (Account.$accounts)\n            _this.$expanded |= (Account.$accounts.length == 1); // Always expand single account\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - the following boolean attributes are available:\n   *   - reload: rebuild the flatten array of mailboxes from the original tree representation (this.$mailboxes)\n   *   - all: return all mailboxes, ignoring their expanstion state\n   *   - saveState: save expansion state of mailboxes to the server\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.forEach(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          // Save expansion state of mailboxes to the server\n          _.forEach(Account.$accounts, function(account) {\n            if (account.$expanded) {\n              expandedMailboxes.push('/' + account.id);\n            }\n            _.reduce(account.$$flattenMailboxes, function(expandedFolders, mailbox) {\n              if (mailbox.$expanded) {\n                expandedFolders.push('/' + mailbox.id);\n              }\n              return expandedFolders;\n            }, expandedMailboxes);\n          });\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        message.isNew = true;\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.map(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.map(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'arrival', asc: 0 }, // The default sort must match [UIxMailListActions defaultSortKey]\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account, options) {\n    var path, futureMailboxData;\n\n    if (options && options.all)\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'viewAll');\n    else\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    if (angular.isUndefined(this.uidsMap) || data.headers) {\n      this.$isLoading = true;\n      this.$messages = [];\n      this.uidsMap = {};\n    }\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    this.$displayName = this.name;\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n      this.$isSpecial = true;\n      if (this.type == 'inbox') {\n        this.$displayName = l('InboxFolderName');\n        this.$icon = 'inbox';\n      }\n      else if (this.type == 'draft') {\n        this.$displayName = l('DraftsFolderName');\n        this.$icon = 'drafts';\n      }\n      else if (this.type == 'sent') {\n        this.$displayName = l('SentFolderName');\n        this.$icon = 'send';\n      }\n      else if (this.type == 'trash') {\n        this.$displayName = l('TrashFolderName');\n        this.$icon = 'delete';\n      }\n      else if (this.type == 'junk') {\n        this.$displayName = l('JunkFolderName');\n        this.$icon = 'thumb_down';\n      }\n      else if (this.type == 'additional') {\n        this.$icon = 'folder_shared';\n      }\n      else {\n        this.$isSpecial = false;\n        this.$icon = 'folder_open';\n      }\n    }\n    this.$isNoInferiors = this.isNoInferiors();\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof Mailbox.prototype\n   * @desc Mark the folder as selected in the constructor unless virtual mode is active\n   */\n  Mailbox.prototype.selectFolder = function() {\n    if (!Mailbox.$virtualMode)\n      Mailbox.selectedFolder = this;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Return the messages selected by the user.\n   * @returns Message instances\n   */\n  Mailbox.prototype.$selectedMessages = function() {\n    return _.filter(this.$messages, function(message) { return message.selected; });\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    return this.$selectedMessages().length;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is displayed in the detailed view.\n   * @param {string} messageId\n   * @returns true if the specified message is displayed\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function $selectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Return the currently visible message.\n   * @returns a Message instance or undefined if no message is displayed\n   */\n  Mailbox.prototype.$selectedMessage = function() {\n    var _this = this;\n\n    return _.find(this.$messages, function(message) { return message.uid == _this.selectedMessage; });\n  };\n\n  /**\n   * @function $selectedMessageIndex\n   * @memberof Mailbox.prototype\n   * @desc Return the index of the currently visible message.\n   * @returns a number or undefined if no message is selected\n   */\n  Mailbox.prototype.$selectedMessageIndex = function() {\n    return this.uidsMap[this.selectedMessage];\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if a message is selected.\n   * @returns true if the a message is selected\n   */\n  Mailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(this.selectedMessage);\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return !filter.searchInput || filter.searchInput.length === 0;\n        });\n        // Decompose filters that match two fields\n        _.forEach(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter, null, filters);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        index,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (angular.isDefined(this.$messages[endIndex].subject) ||\n          angular.isDefined(this.$messages[endIndex].loading)) {\n        index = Math.max(startIndex - Mailbox.PRELOAD.LOOKAHEAD, 0);\n        if (!angular.isDefined(this.$messages[index].subject) &&\n            !angular.isDefined(this.$messages[index].loading)) {\n          // Previous messages not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - Mailbox.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next messages not load; preload more headers further down\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max - 1);\n\n      if (!angular.isDefined(this.$messages[startIndex].subject) &&\n          !angular.isDefined(this.$messages[startIndex].loading) ||\n          !angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function isNoInferiors\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can contain submailboxes\n   * @returns true if the mailbox can not contain submailboxes\n   */\n  Mailbox.prototype.isNoInferiors = function() {\n    return this.flags.indexOf('noinferiors') >= 0;\n  };\n\n  /**\n   * @function isNoSelect\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can be selected\n   * @returns true if the mailbox can not be selected\n   */\n  Mailbox.prototype.isNoSelect = function() {\n    return this.flags.indexOf('noselect') >= 0;\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.map(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling, oldPath = _this.path;\n      _this.init(data); // update the path and id\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.map(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n\n      // Update the path and id of children\n      var pathRE = new RegExp('^' + oldPath);\n      var _updateChildren = function(mailbox) {\n        _.forEach(mailbox.children, function(child) {\n          child.path = child.path.replace(pathRE, _this.path);\n          child.id = child.$id();\n          _updateChildren(child);\n        });\n      };\n      _updateChildren(_this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(messages, flags, operation) {\n    var data = {msgUIDs: _.map(messages, 'uid'),\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data).then(function() {\n      return messages;\n    });\n  };\n\n  /**\n   * @function saveSelectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Download the selected messages\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.saveSelectedMessages = function() {\n    var data, options, selectedMessages, selectedUIDs;\n\n    selectedMessages = _.filter(this.$messages, function(message) { return message.selected; });\n    selectedUIDs = _.map(selectedMessages, 'uid');\n    data = { uids: selectedUIDs };\n    options = { filename: l('Saved Messages.zip') };\n\n    return Mailbox.$$resource.download(this.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n  /**\n   * @function exportFolder\n   * @memberof Mailbox.prototype\n   * @desc Export this mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.exportFolder = function() {\n    var options;\n\n    options = { filename: this.name + '.zip' };\n\n    return Mailbox.$$resource.download(this.id, 'exportFolder', null, options);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @param {object} [options] - additional options (use {withoutTrash: true} to delete immediately)\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function(options) {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'delete', options)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $_deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from Mailbox object.\n   * @param {string[]} uids - the messages uids\n   * @param {object[]} messages - the Message instances\n   * @return the index of the first deleted message\n   */\n  Mailbox.prototype.$_deleteMessages = function(uids, messages) {\n    var _this = this, selectedUIDs, _$messages, unseen, firstIndex = this.$messages.length;\n\n    // Decrement the unseen count\n    unseen = _.filter(messages, function(message, i) { return !message.isread; });\n    this.unseenCount -= unseen.length;\n\n    // Remove messages from $messages and uidsMap\n    _.forEachRight(this.$messages, function(message, index) {\n      var selectedIndex = _.findIndex(uids, function(uid) {\n        return message.uid == uid;\n      });\n      if (selectedIndex > -1) {\n        uids.splice(selectedIndex, 1);\n        delete _this.uidsMap[message.uid];\n        if (message.uid == _this.selectedMessage)\n          delete _this.selectedMessage;\n        _this.$messages.splice(index, 1);\n        if (index < firstIndex)\n          firstIndex = index;\n      }\n      else {\n        _this.uidsMap[message.uid] -= uids.length;\n      }\n    });\n\n    // Return the index of the first deleted message\n    return firstIndex;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @param {object} [options] - additional options (use {withoutTrash: true} to delete immediately)\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages, options) {\n    var _this = this, uids, data;\n\n    uids = _.map(messages, 'uid');\n    data = { uids: uids };\n    if (options) angular.extend(data, options);\n\n    return Mailbox.$$resource.post(this.id, 'batchDelete', data)\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof Mailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messages) {\n    var _this = this,\n        uids = _.map(messages, 'uid'),\n        method = (this.type == 'junk' ? 'markMessagesAsNotJunk' : 'markMessagesAsJunk');\n\n    return Mailbox.$$resource.post(this.id, method, {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(messages, folder) {\n    var _this = this,\n        uids = _.map(messages, 'uid');\n\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(messages, folder) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder})\n      .then(function() {\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this.$shadowData, function(value, key) {\n      delete _this[key];\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(response) {\n      Mailbox.$log.error(JSON.stringify(response.data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n      return response.data;\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key != 'headers' &&\n          key != 'uids' &&\n          key != 'uidsMap' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        if (!data.uids || _this.$topIndex > data.uids.length - 1)\n          _this.$topIndex = 0;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + _this.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.zipObject(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.forEach(_this.headers, function(data) {\n            var msg = _.zipObject(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(messageHeaders) {\n            messageHeaders = _.zipObject(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n  /**\n   * @function $updateSubscribe\n   * @memberof Mailbox.prototype\n   * @desc Update mailbox subscription state with server.\n   */\n  Mailbox.prototype.$updateSubscribe = function() {\n    var action = this.subscribed? 'subscribe' : 'unsubscribe';\n\n    Mailbox.$$resource.post(this.id, action);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'sgMessage_STATUS', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Message_STATUS, Resource, Preferences) {\n    angular.extend(Message, {\n      STATUS: Message_STATUS,\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $avatar: angular.bind(Preferences, Preferences.avatar)\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMessage_STATUS', {\n      NOT_LOADED:      0,\n      DELAYED_LOADING: 1,\n      LOADING:         2,\n      LOADED:          3,\n      DELAYED_MS:      300\n    })\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query, excludedTags) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        if (!_.includes(excludedTags, tag))\n          results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    var _this = this, id = this.id;\n\n    function buildPath() {\n      var path;\n      path = _.map(_this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, _this.accountId); // insert account ID\n      return path.join('/');\n    }\n\n    if (angular.isUndefined(this.id) || options && options.nocache) {\n      this.id = buildPath() + '/' + this.uid; // add message UID\n      id = this.id;\n    }\n    if (options && options.asDraft && this.draftId) {\n      id = buildPath() + '/' + this.draftId; // add draft ID\n    }\n    if (options && options.withResourcePath) {\n      id = Message.$$resource.path(id); // return absolute URL\n    }\n\n    return id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1), _this = this, index;\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      this.$absolutePath({nocache: true});\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          index = this.$mailbox.uidsMap[oldUID];\n          this.$mailbox.uidsMap[uid] = index;\n          delete this.$mailbox.uidsMap[oldUID];\n\n          // Update messages list of mailbox\n          _.forEach(['from', 'to', 'subject'], function(attr) {\n            _this.$mailbox.$messages[index][attr] = _this[attr];\n          });\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates the avatar URL for each email address and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.map(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.forEach(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.forEach(_this[type], function(data) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          if (data.name.length < 10)\n            // Name is already short\n            data.shortname = data.name;\n          else if (data.name.split(' ').length)\n            // If we have \"Alice Foo\" or \"Foo, Alice\" as name, we grab \"Alice\"\n            data.shortname = _.first(_.last(data.name.split(/, */)).split(/ +/)).replace('\\'','');\n        }\n        else if (data.email) {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        data.image = Message.$avatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function(max) {\n    var _this = this, result = [], count = 0, total = 0;\n\n    // Build short representation of email addresses\n    _.forEach(['to', 'cc', 'bcc'], function(type) {\n      total += _this[type]? _this[type].length : 0;\n      _.forEach(_this[type], function(data, i) {\n        if (count < max)\n          result.push(data.shortname);\n        count++;\n      });\n    });\n\n    if (total > max)\n      result.push(l('and %{0} more...', (total - max)));\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], _.bind(function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, this), recipientsCount);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.forEach(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n\n    if (this.parts)\n      _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        // Try to match a known account identity from the specified \"from\" address\n        var identity = _.find(_this.$mailbox.$account.identities, function(identity) {\n          return data.from.toLowerCase().indexOf(identity.email) !== -1;\n        });\n        if (identity)\n          data.from = identity.full;\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function $plainContent\n   * @memberof Message.prototype\n   * @returns the a plain text representation of the subject and body\n   */\n  Message.prototype.$plainContent = function() {\n    return Message.$$resource.fetch(this.$absolutePath(), 'viewplain');\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part\n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info\n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var data = { 'filename': filename };\n    var _this = this;\n    Message.$$resource.fetch(this.$absolutePath({asDraft: true}), 'deleteAttachment', data).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $isLoading\n   * @memberof Message.prototype\n   * @returns true if the Message content is still being retrieved from server after a specific delay\n   * @see sgMessage_STATUS\n   */\n  Message.prototype.$isLoading = function() {\n    return this.$loaded == Message.STATUS.LOADING;\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @param {object} [options] - set {useCache: true} to use already fetched data\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var _this = this, futureMessageData;\n\n    if (options && options.useCache && this.$futureMessageData) {\n      if (!this.isread) {\n        Message.$$resource.fetch(this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return this;\n    }\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n      _this.isNew = false;\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable);\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(response) {\n      if (response.status == 'success') {\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n        return response;\n      }\n      else {\n        return Message.$q.reject(response.data);\n      }\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise.\n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Message is not loaded yet\n    this.$loaded = Message.STATUS.DELAYED_LOADING;\n    Message.$timeout(function() {\n      if (_this.$loaded != Message.STATUS.LOADED)\n        _this.$loaded = Message.STATUS.LOADING;\n    }, Message.STATUS.DELAYED_MS);\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        _this.isread = true;\n        _this.$mailbox.unseenCount--;\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        _this.$loaded = Message.STATUS.LOADED;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function(options) {\n    var message = {},\n        privateAttributes = options && options.privateAttributes;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$' || privateAttributes) {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n  /**\n   * @function download\n   * @memberof Message.prototype\n   * @desc Download the current message\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.download = function() {\n    var data, options;\n\n    data = { uids: [this.uid] };\n    options = { filename: this.subject + '.zip' };\n\n    return Message.$$resource.download(this.$mailbox.id, 'saveMessages', data, options);\n  };\n\n  /**\n   * @function downloadAttachments\n   * @memberof Message.prototype\n   * @desc Download an archive of all attachments\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.downloadAttachments = function() {\n    var options;\n\n    options = { filename: l('attachments') + \"-\" + this.uid + \".zip\" };\n\n    return Message.$$resource.download(this.$absolutePath(), 'archiveAttachments', null, options);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() {\n      _this.$isLoading = false;\n    });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof VirtualMailbox.prototype\n   * @desc A no-op for virtual mailbox\n   */\n  VirtualMailbox.prototype.selectFolder = function() {\n    return;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.forEach(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if a message is selected among the resulting mailboxes\n   * @returns true if one message is selected\n   */\n  VirtualMailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return angular.isDefined(mailbox.selectedMessage);\n    }));\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Return an associative array of the selected messages for each mailbox. Keys are the mailboxes ids.\n   * @returns an associative array\n   */\n  VirtualMailbox.prototype.$selectedMessages = function() {\n    var messagesMap = {};\n    return _.transform(this.$mailboxes, function(messagesMap, mailbox) {\n      messagesMap[mailbox.id] = mailbox.$selectedMessages();\n    }, {});\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    return _.sum(_.invokeMap(this.$mailboxes, '$selectedCount'));\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @param {object} messagesMap\n   * @param {array} flags\n   * @param {string} operation\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(messagesMap, flags, operation) {\n    var data = {\n      flags: flags,\n      operation: operation\n    };\n    var allMessages = [];\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var uids = _.map(messages, 'uid');\n        allMessages.push(messages);\n        var promise = VirtualMailbox.$$resource.post(id, 'addOrRemoveLabel', _.assign(data, {msgUIDs: uids}));\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises).then(function() {\n      return _.flatten(allMessages);\n    });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$deleteMessages(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof VirtualMailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$markOrUnMarkMessagesAsJunk(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$copyMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$moveMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$scope', '$timeout', '$q', '$state', '$mdDialog', '$mdToast', 'stateAccounts', 'stateAccount', 'stateMailbox', 'sgHotkeys', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($window, $scope, $timeout, $q, $state, $mdDialog, $mdToast, stateAccounts, stateAccount, stateMailbox, sgHotkeys, encodeUriFilter, sgSettings, focus, Dialog, Account, Mailbox) {\n    var vm = this,\n        defaultWindowTitle = angular.element($window.document).find('title').attr('sg-default') || \"SOGo\",\n        hotkeys = [];\n\n    // Expose controller for eventual popup windows\n    $window.$mailboxController = vm;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.messageDialog = null; // also access from Message controller\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.searchMode = searchMode;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false, multiple: 0 };\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.markOrUnMarkMessagesAsJunk = markOrUnMarkMessagesAsJunk;\n    vm.copySelectedMessages = copySelectedMessages;\n    vm.moveSelectedMessages = moveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.markSelectedMessagesAsRead = markSelectedMessagesAsRead;\n    vm.selectAll = selectAll;\n    vm.unselectMessages = unselectMessages;\n\n\n    stateMailbox.selectFolder();\n\n    _registerHotkeys(hotkeys);\n\n    // Expunge mailbox when leaving the Mail module\n    angular.element($window).on('beforeunload', _compactBeforeUnload);\n    $scope.$on('$destroy', function() {\n      angular.element($window).off('beforeunload', _compactBeforeUnload);\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n    // Update window's title with unseen messages count of selected mailbox\n    $scope.$watch(function() { return vm.selectedFolder.unseenCount; }, function(unseenCount) {\n      var title = defaultWindowTitle + ' - ';\n      if (unseenCount)\n        title += '(' + unseenCount + ') ';\n      title += vm.selectedFolder.$displayName;\n      $window.document.title = title;\n    });\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_search'),\n        description: l('Search'),\n        callback: searchMode\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_compose'),\n        description: l('Write a new message'),\n        callback: function($event) {\n          if (vm.messageDialog === null)\n            newMessage($event);\n        }\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_junk'),\n        description: l('Mark the selected messages as junk'),\n        callback: markOrUnMarkMessagesAsJunk\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'space',\n        description: l('Toggle item'),\n        callback: toggleMessageSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+space',\n        description: l('Toggle range of items'),\n        callback: toggleMessageSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'up',\n        description: l('View next item'),\n        callback: _nextMessage,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'down',\n        description: l('View previous item'),\n        callback: _previousMessage,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+up',\n        description: l('Add next item to selection'),\n        callback: _addNextMessageToSelection,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+down',\n        description: l('Add previous item to selection'),\n        callback: _addPreviousMessageToSelection,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        description: l('Delete selected message or folder'),\n        callback: confirmDeleteSelectedMessages\n      }));\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function _compactBeforeUnload(event) {\n      return vm.selectedFolder.$compact();\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function searchMode() {\n      vm.mode.search = true;\n      focus('search');\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter().then(function() {\n        if (vm.selectedFolder.selectedMessage) {\n          $timeout(function() {\n            vm.selectedFolder.$topIndex = vm.selectedFolder.uidsMap[vm.selectedFolder.selectedMessage];\n          });\n        }\n      });\n    }\n\n    function newMessage($event, inPopup) {\n      var message;\n\n      if (vm.messageDialog === null) {\n        if (inPopup)\n          _newMessageInPopup();\n        else {\n          message = vm.account.$newMessage();\n          vm.messageDialog = $mdDialog\n            .show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: 'UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccount: vm.account,\n                stateMessage: message\n              }\n            })\n            .finally(function() {\n              vm.messageDialog = null;\n            });\n        }\n      }\n    }\n\n    function _newMessageInPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#!/Mail',\n                 vm.account.id,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.selectedFolder.path)),\n                 'new']\n          .join('/'),\n          wId = vm.selectedFolder.$id() + '/' + Math.random(0, 1000);\n      console.debug(url);\n      $window.open(url, wId,\n                   [\"width=680\",\n                    \"height=520\",\n                    \"resizable=1\",\n                    \"scrollbars=1\",\n                    \"toolbar=0\",\n                    \"location=0\",\n                    \"directories=0\",\n                    \"status=0\",\n                    \"menubar=0\",\n                    \"copyhistory=0\"]\n                   .join(','));\n    }\n\n    /**\n     * User has pressed up arrow key\n     */\n    function _nextMessage($event) {\n      var index = vm.selectedFolder.$selectedMessageIndex();\n\n      if (angular.isDefined(index)) {\n        index--;\n        if (vm.selectedFolder.$topIndex > 0)\n          vm.selectedFolder.$topIndex--;\n      }\n      else {\n        // No message is selected, show oldest message\n        index = vm.selectedFolder.getLength() - 1;\n        vm.selectedFolder.$topIndex = vm.selectedFolder.getLength();\n      }\n\n      if (index > -1)\n        selectMessage(vm.selectedFolder.$messages[index]);\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    /**\n     * User has pressed the down arrow key\n     */\n    function _previousMessage($event) {\n      var index = vm.selectedFolder.$selectedMessageIndex();\n\n      if (angular.isDefined(index)) {\n        index++;\n        if (vm.selectedFolder.$topIndex < vm.selectedFolder.getLength())\n          vm.selectedFolder.$topIndex++;\n      }\n      else\n        // No message is selected, show newest\n        index = 0;\n\n      if (index < vm.selectedFolder.getLength())\n        selectMessage(vm.selectedFolder.$messages[index]);\n      else\n        index = -1;\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    function _addNextMessageToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedMessage()) {\n        index = _nextMessage($event);\n        if (index >= 0)\n          toggleMessageSelection($event, vm.selectedFolder.$messages[index]);\n      }\n    }\n\n    function _addPreviousMessageToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedMessage()) {\n        index = _previousMessage($event);\n        if (index >= 0)\n          toggleMessageSelection($event, vm.selectedFolder.$messages[index]);\n      }\n    }\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      var folder = vm.selectedFolder,\n          selectedIndex, nextSelectedIndex, i;\n\n      if (!message)\n        message = folder.$selectedMessage();\n      message.selected = !message.selected;\n      vm.mode.multiple += message.selected? 1 : -1;\n\n      // Select closest range of messages when shift key is pressed\n      if ($event.shiftKey && folder.$selectedCount() > 1) {\n        selectedIndex = folder.uidsMap[message.uid];\n        // Search for next selected message above\n        nextSelectedIndex = selectedIndex - 2;\n        while (nextSelectedIndex >= 0 &&\n               !folder.$messages[nextSelectedIndex].selected)\n          nextSelectedIndex--;\n        if (nextSelectedIndex < 0) {\n          // Search for next selected message bellow\n          nextSelectedIndex = selectedIndex + 2;\n          while (nextSelectedIndex < folder.getLength() &&\n                 !folder.$messages[nextSelectedIndex].selected)\n            nextSelectedIndex++;\n        }\n        if (nextSelectedIndex >= 0 && nextSelectedIndex < folder.getLength()) {\n          for (i = Math.min(selectedIndex, nextSelectedIndex);\n               i <= Math.max(selectedIndex, nextSelectedIndex);\n               i++)\n            folder.$messages[i].selected = true;\n        }\n      }\n\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    /**\n     * Batch operations\n     */\n\n    function _currentMailboxes() {\n      if (Mailbox.$virtualMode)\n        return vm.selectedFolder.$mailboxes;\n      else\n        return [vm.selectedFolder];\n    }\n\n    // Unselect current message and cleverly load the next message.\n    // This function must not be called in virtual mode.\n    function _unselectMessage(message, index) {\n      var nextMessage, previousMessage, nextIndex = index;\n      vm.mode.multiple = vm.selectedFolder.$selectedCount();\n      if (message) {\n        // Select either the next or previous message\n        if (index > 0) {\n          nextIndex -= 1;\n          nextMessage = vm.selectedFolder.$messages[nextIndex];\n        }\n        if (index < vm.selectedFolder.$messages.length)\n          previousMessage = vm.selectedFolder.$messages[index];\n        if (nextMessage) {\n          if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n        }\n        else if (previousMessage) {\n          nextIndex = index;\n          nextMessage = previousMessage;\n        }\n        if (nextMessage) {\n          vm.selectedFolder.$topIndex = nextIndex;\n          $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n        }\n        else {\n          $state.go('mail.account.mailbox');\n        }\n      }\n      else {\n        $timeout(function() {\n          console.warn('go to mailbox');\n          $state.go('mail.account.mailbox');\n        });\n      }\n    }\n\n    function confirmDeleteSelectedMessages($event) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n\n      if (vm.messageDialog === null && _.size(selectedMessages) > 0)\n        vm.messageDialog = Dialog.confirm(l('Confirmation'),\n                                       l('Are you sure you want to delete the selected messages?'),\n                                       { ok: l('Delete') })\n        .then(function() {\n          var deleteSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n          vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (deleteSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(deleteSelectedMessage, index);\n            }\n          }, function(response) {\n            vm.messageDialog = Dialog.confirm(l('Warning'),\n                                           l('The messages could not be moved to the trash folder. Would you like to delete them immediately?'),\n                                           { ok: l('Delete') })\n              .then(function() {\n                vm.selectedFolder.$deleteMessages(selectedMessages, { withoutTrash: true }).then(function(index) {\n                  if (Mailbox.$virtualMode) {\n                    // When performing an advanced search, we refresh the view if the selected message\n                    // was deleted, but only once all promises have completed.\n                    if (deleteSelectedMessage)\n                      $state.go('mail.account.virtualMailbox');\n                  }\n                  else {\n                    // In normal mode, we immediately unselect the selected message.\n                    _unselectMessage(deleteSelectedMessage, index);\n                  }\n                });\n              });\n          });\n        })\n        .finally(function() {\n          vm.messageDialog = null;\n        });\n\n      $event.preventDefault();\n    }\n\n    function markOrUnMarkMessagesAsJunk() {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) === 0 && moveSelectedMessage)\n        selectedMessages = [vm.selectedFolder.$selectedMessage()];\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$markOrUnMarkMessagesAsJunk(selectedMessages).then(function() {\n          var dstFolder = '/' + vm.account.id + '/folderINBOX';\n          if (vm.selectedFolder.type != 'junk') {\n            dstFolder = '/' + vm.account.$getMailboxByType('junk').id;\n          }\n          vm.selectedFolder.$moveMessages(selectedMessages, dstFolder).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (moveSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(moveSelectedMessage, index);\n            }\n          });\n        });\n    }\n\n    function copySelectedMessages(dstFolder) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$copyMessages(selectedMessages, '/' + dstFolder).then(function() {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) copied', vm.selectedFolder.$selectedCount()))\n              .position('top right')\n              .hideDelay(2000));\n        });\n    }\n\n    function moveSelectedMessages(dstFolder) {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      var count = vm.selectedFolder.$selectedCount();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$moveMessages(selectedMessages, '/' + dstFolder).then(function(index) {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) moved', count))\n              .position('top right')\n              .hideDelay(2000));\n          if (Mailbox.$virtualMode) {\n            // When performing an advanced search, we refresh the view if the selected message\n            // was moved, but only once all promises have completed.\n            if (moveSelectedMessage)\n              $state.go('mail.account.virtualMailbox');\n          }\n          else {\n            // In normal mode, we immediately unselect the selected message.\n            _unselectMessage(moveSelectedMessage, index);\n          }\n        });\n    }\n\n    function selectAll() {\n      var count = 0;\n      _.forEach(_currentMailboxes(), function(folder) {\n        var i = 0, length = folder.$messages.length;\n        for (; i < length; i++)\n          folder.$messages[i].selected = true;\n        count += length;\n      });\n      vm.mode.multiple = count;\n    }\n\n    function unselectMessages() {\n      _.forEach(_currentMailboxes(), function(folder) {\n        _.forEach(folder.$messages, function(message) {\n          message.selected = false;\n        });\n      });\n      vm.mode.multiple = 0;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$flagMessages(selectedMessages, '\\\\Flagged', 'add').then(function(messages) {\n          _.forEach(messages, function(message) {\n            message.isflagged = true;\n          });\n        });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0) {\n        vm.selectedFolder.$flagMessages(selectedMessages, 'seen', 'remove').then(function(messages) {\n          _.forEach(messages, function(message) {\n            if (message.isread)\n              message.$mailbox.unseenCount++;\n            message.isread = false;\n          });\n        });\n      }\n    }\n\n    function markSelectedMessagesAsRead() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0) {\n        vm.selectedFolder.$flagMessages(selectedMessages, 'seen', 'add').then(function(messages) {\n          _.forEach(messages, function(message) {\n            if (!message.isread)\n              message.$mailbox.unseenCount--;\n            message.isread = true;\n          });\n        });\n      }\n    }\n\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: js; indent-tabs-mode: nil; js-indent-level: 2; -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$scope', '$state', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgConstant', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'sgHotkeys', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($scope, $state, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, sgConstant, focus, encodeUriFilter, Dialog, Settings, sgHotkeys, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox,\n        hotkeys = [];\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.toggleAccountState = toggleAccountState;\n    vm.subscribe = subscribe;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n    vm.isDroppableFolder = isDroppableFolder;\n    vm.dragSelectedMessages = dragSelectedMessages;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': '',  // no placeholder when no criteria is active\n                subject: l('Enter Subject'),\n                from:    l('Enter From'),\n                to:      l('Enter To'),\n                cc:      l('Enter Cc'),\n                body:    l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n\n    Preferences.ready().then(function() {\n      vm.showSubscribedOnly = Preferences.defaults.SOGoMailShowSubscribedFoldersOnly;\n    });\n\n    vm.refreshUnseenCount();\n\n    _registerHotkeys(hotkeys);\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        description: l('Delete selected message or folder'),\n        callback: function() {\n          if (Mailbox.selectedFolder && !Mailbox.selectedFolder.hasSelectedMessage())\n            confirmDelete(Mailbox.selectedFolder);\n        }\n      }));\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.forEach(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function toggleAccountState(account) {\n      account.$expanded = !account.$expanded;\n      account.$flattenMailboxes({ reload: true, saveState: true });\n      // Fire a window resize to recompute the virtual-repeater.\n      // This is a fix until the following issue is officially resolved:\n      // https://github.com/angular/material/issues/7309\n      $timeout(function() {\n        angular.element($window).triggerHandler('resize');\n      }, 150);\n    }\n\n    function subscribe(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/subscribe',\n        controller: SubscriptionsDialogController,\n        controllerAs: 'subscriptions',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          srcAccount: account\n        }\n      }).finally(function() {\n          account.$getMailboxes({reload: true});\n      });\n\n      /**\n       * @ngInject\n       */\n      SubscriptionsDialogController.$inject = ['$scope', '$mdDialog', 'srcAccount'];\n      function SubscriptionsDialogController($scope, $mdDialog, srcAccount) {\n        var vm = this;\n\n        vm.loading = true;\n        vm.filter = { name: '' };\n        vm.account = new Account({\n          id: srcAccount.id,\n          name: srcAccount.name\n        });\n        vm.close = close;\n\n        vm.account.$getMailboxes({ reload: true, all: true }).then(function() {\n          vm.loading = false;\n        });\n\n        function close() {\n          $mdDialog.cancel();\n        }\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New Folder...'),\n                    l('Enter the new name of your folder'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder($event, account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Trash emptied'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Warning'),\n                     l('Do you really want to move this folder into the trash ?'),\n                     { ok: l('Delete') })\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail.account.inbox');\n            }, function(response) {\n              Dialog.confirm(l('Warning'),\n                             l('The mailbox could not be moved to the trash folder. Would you like to delete it immediately?'),\n                             { ok: l('Delete') })\n              .then(function() {\n                folder.$delete({ withoutTrash: true })\n                  .then(function() {\n                    $state.go('mail.account.inbox');\n                  }, function(response) {\n                    Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                                 l(response.error));\n                  });\n              });\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = $window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    function isDroppableFolder(srcFolder, dstFolder) {\n      return (dstFolder.id != srcFolder.id) && !dstFolder.isNoSelect();\n    }\n\n    function dragSelectedMessages(srcFolder, dstFolder, mode) {\n      var dstId, messages, uids, clearMessageView, promise, success;\n\n      dstId = '/' + dstFolder.id;\n      messages = srcFolder.$selectedMessages();\n      if (messages.length === 0)\n        messages = [srcFolder.$selectedMessage()];\n      uids = _.map(messages, 'uid');\n      clearMessageView = (srcFolder.selectedMessage && uids.indexOf(srcFolder.selectedMessage) >= 0);\n\n      if (mode == 'copy') {\n        promise = srcFolder.$copyMessages(messages, dstId);\n        success = l('%{0} message(s) copied', messages.length);\n      }\n      else {\n        promise = srcFolder.$moveMessages(messages, dstId);\n        success = l('%{0} message(s) moved', messages.length);\n      }\n\n      promise.then(function() {\n        if (clearMessageView)\n          $state.go('mail.account.mailbox');\n        $mdToast.show(\n          $mdToast.simple()\n            .content(success)\n            .position('top right')\n            .hideDelay(2000));\n      });\n    }\n\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxesController', MailboxesController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdMedia', '$mdDialog', 'sgConstant', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'sgHotkeys', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Calendar', 'Component', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdMedia, $mdDialog, sgConstant, stateAccounts, stateAccount, stateMailbox, stateMessage, sgHotkeys, encodeUriFilter, sgSettings, focus, Dialog, Calendar, Component, Account, Mailbox, Message) {\n    var vm = this, popupWindow = null, hotkeys = [];\n\n    // Expose controller\n    $window.$messageController = vm;\n\n    vm.$state = $state;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.toggleDetailedRecipients = toggleDetailedRecipients;\n    vm.filterMailtoLinks = filterMailtoLinks;\n    vm.deleteMessage = deleteMessage;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n    vm.print = print;\n    vm.convertToEvent = convertToEvent;\n    vm.convertToTask = convertToTask;\n\n    _registerHotkeys(hotkeys);\n\n    // One-way refresh of the parent window when modifying the message from a popup window.\n    if ($window.opener) {\n      // Update the message flags. The message must be displayed in the parent window.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(newTags, oldTags) {\n        var ctrls;\n        if (newTags || oldTags) {\n          ctrls = $parentControllers();\n          if (ctrls.messageCtrl) {\n            ctrls.messageCtrl.service.$timeout(function() {\n              ctrls.messageCtrl.showFlags = true;\n              ctrls.messageCtrl.message.flags = newTags;\n            });\n          }\n        }\n      });\n      // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n      $scope.$watch(function() { return vm.message.isflagged; }, function(isflagged, wasflagged) {\n        var ctrls = $parentControllers();\n        if (ctrls.mailboxCtrl) {\n          ctrls.mailboxCtrl.service.$timeout(function() {\n            var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n            message.isflagged = isflagged;\n          });\n        }\n      });\n    }\n    else {\n      // Flatten new tags when coming from the predefined list of tags (Message.$tags) and\n      // sync tags with server when adding or removing a tag.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(_newTags, _oldTags) {\n        var newTags, oldTags, tags;\n        if (_newTags || _oldTags) {\n          newTags = _newTags || [];\n          oldTags = _oldTags || [];\n          _.forEach(newTags, function(tag, i) {\n            if (angular.isObject(tag))\n              newTags[i] = tag.name;\n          });\n          if (newTags.length > oldTags.length) {\n            tags = _.difference(newTags, oldTags);\n            _.forEach(tags, function(tag) {\n              vm.message.addTag(tag);\n            });\n          }\n          else if (newTags.length < oldTags.length) {\n            tags = _.difference(oldTags, newTags);\n            _.forEach(tags, function(tag) {\n              vm.message.removeTag(tag);\n            });\n          }\n        }\n      });\n    }\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n\n    /**\n     * To keep track of the currently active dialog, we share a common variable with the parent controller.\n     */\n    function _messageDialog() {\n      if ($scope.mailbox) {\n        if (arguments.length > 0)\n          $scope.mailbox.messageDialog = arguments[0];\n        return $scope.mailbox.messageDialog;\n      }\n      return null;\n    }\n\n    function _unlessInDialog(callback) {\n      return function() {\n        // Check if a dialog is opened either from the current controller or the parent controller\n        if (_messageDialog() === null)\n          return callback.apply(vm, arguments);\n      };\n    }\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_reply'),\n        description: l('Reply to the message'),\n        callback: _unlessInDialog(reply)\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_replyall'),\n        description: l('Reply to sender and all recipients'),\n        callback: _unlessInDialog(replyAll)\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_forward'),\n        description: l('Forward selected message'),\n        callback: _unlessInDialog(forward)\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_flag'),\n        description: l('Flagged'),\n        callback: _unlessInDialog(angular.bind(stateMessage, stateMessage.toggleFlag))\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        callback: _unlessInDialog(function($event) {\n          if (vm.mailbox.$selectedCount() === 0)\n            deleteMessage();\n          $event.preventDefault();\n        })\n      }));\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    function toggleDetailedRecipients($event) {\n      vm.$showDetailedRecipients = !vm.$showDetailedRecipients;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function filterMailtoLinks($event) {\n      var href, match, to, cc, bcc, subject, body, data;\n      if ($event.target.tagName == 'A' && 'href' in $event.target.attributes) {\n        href = $event.target.attributes.href.value;\n        match = /^mailto:([^\\?]+)/.exec(href);\n        if (match) {\n          // Recipients\n          to = _.map(decodeURIComponent(match[1]).split(','), function(email) {\n            return '<' + email + '>';\n          });\n          data = { to: to };\n          // Subject & body\n          _.forEach(['subject', 'body'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            param = (param == 'body')? 'text' : param;\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          // Recipients\n          _.forEach(['cc', 'bcc'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          newMessage($event, data); // will stop event propagation\n        }\n      }\n    }\n\n    function deleteMessage() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage && $mdMedia(sgConstant['gt-md'])) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              if (nextIndex < mailbox.$topIndex)\n                mailbox.$topIndex = nextIndex;\n              else if (nextIndex > mailbox.$lastVisibleIndex)\n                mailbox.$topIndex = nextIndex - (mailbox.$lastVisibleIndex - mailbox.$topIndex);\n            }\n            else {\n              state.go('mail.account.mailbox').then(function() {\n                message = null;\n                delete mailbox.selectedMessage;\n              });\n            }\n          }\n          catch (error) {}\n        }\n        closePopup();\n      });\n    }\n\n    function showMailEditor($event, message) {\n      if (_messageDialog() === null) {\n        _messageDialog(\n          $mdDialog\n            .show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: 'UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccount: vm.account,\n                stateMessage: message\n              }\n            })\n            .finally(function() {\n              _messageDialog(null);\n              closePopup();\n            })\n        );\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#!/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      if ($window.opener)\n        $window.close();\n    }\n\n    function newMessage($event, editableContent) {\n      vm.account.$newMessage().then(function(message) {\n        angular.extend(message.editable, editableContent);\n        showMailEditor($event, message);\n      });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.message.$rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.message.$rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n\n    function print($event) {\n      $window.print();\n    }\n\n    function convertToEvent($event) {\n      return convertToComponent($event, 'appointment');\n    }\n\n    function convertToTask($event) {\n      return convertToComponent($event, 'task');\n    }\n\n    function convertToComponent($event, type) {\n      vm.message.$plainContent().then(function(data) {\n        var componentData = {\n          pid: Calendar.$defaultCalendar(),\n          type: type,\n          summary: data.subject,\n          comment: data.content\n        };\n        var component = new Component(componentData);\n        // UI/Templates/SchedulerUI/UIxAppointmentEditorTemplate.wox or\n        // UI/Templates/SchedulerUI/UIxTaskEditorTemplate.wox\n        var templateUrl = [\n          sgSettings.activeUser('folderURL'),\n          'Calendar',\n          'UIx' + type.capitalize() + 'EditorTemplate'\n        ].join('/');\n        return $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: templateUrl,\n          controller: 'ComponentEditorController',\n          controllerAs: 'editor',\n          locals: {\n            stateComponent: component\n          }\n        });\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$scope', '$window', '$stateParams', '$mdConstant', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccount', 'stateMessage', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($scope, $window, $stateParams, $mdConstant, $mdDialog, $mdToast, FileUploader, stateAccount, stateMessage, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this, hotkeys = [];\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.cancel = cancel;\n    vm.contactFilter = contactFilter;\n    vm.isFullscreen = false;\n    vm.hideBcc = (stateMessage.editable.bcc.length === 0);\n    vm.hideCc = (stateMessage.editable.cc.length === 0);\n    vm.identities = _.map(stateAccount.identities, 'full');\n    vm.message = stateMessage;\n    vm.recipientSeparatorKeys = [\n      $mdConstant.KEY_CODE.ENTER,\n      $mdConstant.KEY_CODE.TAB,\n      $mdConstant.KEY_CODE.COMMA,\n      $mdConstant.KEY_CODE.SEMICOLON\n    ];\n    vm.removeAttachment = removeAttachment;\n    vm.save = save;\n    vm.send = send;\n    vm.sendState = false;\n    vm.toggleFullscreen = toggleFullscreen;\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true, withResourcePath: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Error while uploading the file \\\"%{0}\\\":', item.file.name) +\n                     ' ' + (response.message? l(response.message) : ''))\n            .position('top right')\n            .action(l('OK'))\n            .hideDelay(false));\n        this.removeFromQueue(item);\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    // Destroy file uploader when the controller is being deactivated\n    $scope.$on('$destroy', function() { vm.uploader.destroy(); });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n\n      try {\n        if ($window.opener) {\n          if ('$mailboxController' in $window.opener &&\n              'selectedFolder' in $window.opener.$mailboxController) {\n            if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n              ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n              if ('$messageController' in $window.opener &&\n                  $window.opener.$messageController.message.uid == stateMessage.uid) {\n                // The draft is opened in the parent window\n                ctrls.draftMessageCtrl = $window.opener.$messageController;\n              }\n            }\n            else if (stateMessage.origin) {\n              originMessage = stateMessage.origin.message;\n              if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n                // The message mailbox is opened in the parent window\n                ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n              }\n            }\n          }\n        }\n      }\n      catch (e) {}\n\n      return ctrls;\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem, attrs = vm.message.editable.attachmentAttrs;\n      if (attrs)\n        for (i = 0; i < attrs.length; i++) {\n          data = {\n            name: attrs[i].filename,\n            type: attrs[i].mimetype,\n            size: parseInt(attrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = attrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item, id) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n      // Hack to allow adding the same file again\n      // See https://github.com/nervgh/angular-file-upload/issues/671\n      var element = $window.document.getElementById(id);\n      if (element)\n        angular.element(element).prop('value', null);\n    }\n\n    function cancel() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      if (vm.message.isNew && vm.message.attachmentAttrs)\n        vm.message.$mailbox.$deleteMessages([vm.message]);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        vm.message.$rawSource = null;\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      var ctrls = $parentControllers();\n\n      vm.sendState = 'sending';\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        vm.sendState = 'sent';\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n\n        // Let the user see the succesfull message before closing the dialog\n        $timeout($mdDialog.hide, 1000);\n      }, function(response) {\n        vm.sendState = 'error';\n        vm.errorMessage = response.data? response.data.message : response.statusText;\n      });\n    }\n\n    function toggleFullscreen() {\n      vm.isFullscreen = !vm.isFullscreen;\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query).then(function(cards) {\n        // Divide the matching cards by email addresses so the user can select\n        // the recipient address of her choice\n        var explodedCards = [];\n        _.forEach(_.invokeMap(cards, 'explode'), function(manyCards) {\n          _.forEach(manyCards, function(card) {\n            explodedCards.push(card);\n          });\n        });\n        // Remove duplicates\n        return _.uniqBy(explodedCards, function(card) {\n          return card.$$fullname + ' ' + card.$$email;\n        });\n      });\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list;\n\n      if (angular.isString(contact))\n        return contact;\n\n      recipients = vm.message.editable[field];\n\n      if (contact.$isList({expandable: true})) {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.forEach(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}