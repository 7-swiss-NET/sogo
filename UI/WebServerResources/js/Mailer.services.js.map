{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","fetchAll","then","angular","extend","this","_","forEach","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","isDefined","$getMailboxes","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","i","id","$accounts","prototype","getLength","$flattenMailboxes","length","getItemAtIndex","index","expandedMailboxes","options","_this","$mailboxes","reload","$find","$expanded","ready","expandedFolders","_visit","mailboxes","indexOf","children","settings","Mail","ExpandedFolders","isString","fromJson","when","allMailboxes","push","all","$$flattenMailboxes","saveState","account","reduce","mailbox","post","$getMailboxByType","type","_find","find","$getMailboxByPath","path","$newMailbox","name","toString","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","isNew","$addDelegate","user","deferred","defer","param","uid","map","delegates","resolve","users","status","reject","promise","$removeDelegate","splice","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","quotas","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","$isNoInferiors","isNoInferiors","isUndefined","$shadowData","$omit","selectFolder","$lastVisibleIndex","max","$loadMessage","$selectedMessages","filter","selected","$selectedCount","isSelectedMessage","messageId","selectedMessage","$selectedMessage","hasSelectedMessage","$filter","sortingAttributes","filters","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","loaded","subject","min","loading","$unwrapHeaders","flags","isNoSelect","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","messages","operation","msgUIDs","saveSelectedMessages","selectedMessages","selectedUIDs","download","exportFolder","$delete","remove","$_deleteMessages","unseen","firstIndex","isread","forEachRight","selectedIndex","findIndex","$deleteMessages","$markOrUnMarkMessagesAsJunk","method","$copyMessages","folder","$moveMessages","$reset","value","key","save","response","error","$futureMailboxData","headers","$topIndex","invokeMap","threaded","msgs","msg","zipObject","isError","j","messageHeaders","$toggleSubscribe","subscribed","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Message_STATUS","STATUS","$avatar","avatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","NOT_LOADED","DELAYED_LOADING","LOADING","LOADED","DELAYED_MS","filterTags","query","excludedTags","re","RegExp","results","keys","tag","pair","search","includes","color","buildPath","nocache","draftId","$setUID","oldUID","attr","constructor","shortname","first","last","replace","image","$shortRecipients","result","count","total","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","removeAttr","compile","$editableContent","from","toLowerCase","text","$plainContent","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$loaded","useCache","$futureMessageData","$reply","$newDraft","$replyAll","$forward","origin","$send","startsWith","isanswered","isforwarded","privateAttributes","saveMessage","VirtualMailbox","setMailboxes","startSearch","params","finally","stopSearch","resetSelectedMessage","len","k","transform","messagesMap","sum","allMessages","promises","assign","flatten","MailboxController","$window","$scope","$state","$mdDialog","$mdToast","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","focus","Dialog","_compactBeforeUnload","event","vm","field","sortedBy","searchMode","mode","cancelSearch","newMessage","$event","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","stateMessage","stateRecipients","selectMessage","go","mailboxId","toggleMessageSelection","multiple","preventDefault","stopPropagation","_currentMailboxes","_unselectMessage","nextMessage","previousMessage","nextIndex","console","warn","confirmDeleteSelectedMessages","confirm","ok","deleteSelectedMessage","size","markOrUnMarkMessagesAsJunk","moveSelectedMessage","dstFolder","copySelectedMessages","simple","position","hideDelay","moveSelectedMessages","selectAll","unselectMessages","markSelectedMessagesAsFlagged","markSelectedMessagesAsUnread","defaultWindowTitle","$mailboxController","service","accounts","on","$on","off","$watch","title","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","$inject","decorator","MailboxesController","$mdMedia","$mdSidenav","sgConstant","User","showAdvancedSearch","showingAdvancedSearch","close","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","toggleAccountState","triggerHandler","subscribe","SubscriptionsDialogController","srcApp","srcAccount","app","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","userFilter","closeModal","hide","removeUser","catch","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","saveFolder","compactFolder","emptyTrashFolder","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","special","setFolderAs","refreshUnseenCount","unseenCountFolders","window","isDroppableFolder","srcFolder","dragSelectedMessages","dstId","clearMessageView","success","","showSubscribedOnly","SOGoMailShowSubscribedFoldersOnly","MessageController","sgSettings","Calendar","Component","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","toggleDetailedRecipients","$showDetailedRecipients","filterMailtoLinks","href","target","tagName","attributes","exec","decodeURIComponent","deleteMessage","state","parentCtrls","closePopup","showMailEditor","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","editableContent","toggleRawSource","showRawSource","$rawSource","print","convertToEvent","convertToComponent","convertToTask","componentData","pid","$defaultCalendar","summary","comment","capitalize","stateComponent","tags","showFlags","$watchCollection","newTags","oldTags","wasflagged","_newTags","_oldTags","isObject","difference","MessageEditorController","$stateParams","$mdConstant","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","addAttachments","fileItem","attrs","mimetype","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","autosave","send","sendState","errorMessage","statusText","contactFilter","$filterAll","cards","explodedCards","manyCards","card","uniqBy","$$fullname","$$email","addRecipient","contact","recipients","recipient","list","$isList","expandable","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideCc","hideBcc","recipientSeparatorKeys","KEY_CODE","ENTER","TAB","COMMA","SEMICOLON","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","destroy","actionName","msgObject","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode"],"mappings":"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","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n    function Account(futureAccountData, fetchAll) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.forEach(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n\n    this.fetchAll = false;\n\n    // Check if we're displaying the IMAP subscription management dialog\n    if (angular.isDefined(fetchAll) && fetchAll) {\n      this.fetchAll = true;\n      this.$getMailboxes();\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    Account.$accounts = collection;\n\n    return collection;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of mailboxes in the account\n   */\n  Account.prototype.getLength = function() {\n    return this.$flattenMailboxes().length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the mailbox at the specified index\n   */\n  Account.prototype.getItemAtIndex = function(index) {\n    var expandedMailboxes;\n\n    expandedMailboxes = this.$flattenMailboxes();\n    if (index >= 0 && index < expandedMailboxes.length)\n      return expandedMailboxes[index];\n\n    return null;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$expanded = false;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            _this.$expanded = (expandedFolders.indexOf('/' + _this.id) >= 0);\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          if (Account.$accounts)\n            _this.$expanded |= (Account.$accounts.length == 1); // Always expand single account\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - the following boolean attributes are available:\n   *   - reload: rebuild the flatten array of mailboxes from the original tree representation (this.$mailboxes)\n   *   - all: return all mailboxes, ignoring their expanstion state\n   *   - saveState: save expansion state of mailboxes to the server\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.forEach(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          // Save expansion state of mailboxes to the server\n          _.forEach(Account.$accounts, function(account) {\n            if (account.$expanded) {\n              expandedMailboxes.push('/' + account.id);\n            }\n            _.reduce(account.$$flattenMailboxes, function(expandedFolders, mailbox) {\n              if (mailbox.$expanded) {\n                expandedFolders.push('/' + mailbox.id);\n              }\n              return expandedFolders;\n            }, expandedMailboxes);\n          });\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        message.isNew = true;\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.map(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.map(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    if (account.fetchAll)\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'viewAll');\n    else\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    this.$isNoInferiors = this.isNoInferiors();\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof Mailbox.prototype\n   * @desc Mark the folder as selected in the constructor unless virtual mode is active\n   */\n  Mailbox.prototype.selectFolder = function() {\n    if (!Mailbox.$virtualMode)\n      Mailbox.selectedFolder = this;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Return the messages selected by the user.\n   * @returns Message instances\n   */\n  Mailbox.prototype.$selectedMessages = function() {\n    return _.filter(this.$messages, function(message) { return message.selected; });\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    return this.$selectedMessages().length;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is displayed in the detailed view.\n   * @param {string} messageId\n   * @returns true if the specified message is displayed\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function $selectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Return the currently visible message.\n   * @returns a Message instance or undefined if no message is displayed\n   */\n  Mailbox.prototype.$selectedMessage = function() {\n    var _this = this;\n\n    return _.find(this.$messages, function(message) { return message.uid == _this.selectedMessage; });\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if a message is selected.\n   * @returns true if the a message is selected\n   */\n  Mailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(this.selectedMessage);\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return !filter.searchInput || filter.searchInput.length === 0;\n        });\n        // Decompose filters that match two fields\n        _.forEach(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter, null, filters);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        index,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (angular.isDefined(this.$messages[endIndex].subject) ||\n          angular.isDefined(this.$messages[endIndex].loading)) {\n        index = Math.max(startIndex - Mailbox.PRELOAD.LOOKAHEAD, 0);\n        if (!angular.isDefined(this.$messages[index].subject) &&\n            !angular.isDefined(this.$messages[index].loading)) {\n          // Previous messages not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - Mailbox.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next messages not load; preload more headers further down\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max - 1);\n\n      if (!angular.isDefined(this.$messages[startIndex].subject) &&\n          !angular.isDefined(this.$messages[startIndex].loading) ||\n          !angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function isNoInferiors\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can contain submailboxes\n   * @returns true if the mailbox can not contain submailboxes\n   */\n  Mailbox.prototype.isNoInferiors = function() {\n    return this.flags.indexOf('noinferiors') >= 0;\n  };\n\n  /**\n   * @function isNoSelect\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can be selected\n   * @returns true if the mailbox can not be selected\n   */\n  Mailbox.prototype.isNoSelect = function() {\n    return this.flags.indexOf('noselect') >= 0;\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.map(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.map(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(messages, flags, operation) {\n    var data = {msgUIDs: _.map(messages, 'uid'),\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data).then(function() {\n      return messages;\n    });\n  };\n\n  /**\n   * @function saveSelectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Download the selected messages\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.saveSelectedMessages = function() {\n    var selectedMessages, selectedUIDs;\n\n    selectedMessages = _.filter(this.$messages, function(message) { return message.selected; });\n    selectedUIDs = _.map(selectedMessages, 'uid');\n\n    return Mailbox.$$resource.download(this.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n  /**\n   * @function exportFolder\n   * @memberof Mailbox.prototype\n   * @desc Export this mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.exportFolder = function() {\n    return Mailbox.$$resource.download(this.id, 'exportFolder');\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.remove(this.id)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $_deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from Mailbox object.\n   * @param {string[]} uids - the messages uids\n   * @param {object[]} messages - the Message instances\n   * @return the index of the first deleted message\n   */\n  Mailbox.prototype.$_deleteMessages = function(uids, messages) {\n    var _this = this, selectedUIDs, _$messages, unseen, firstIndex = this.$messages.length;\n\n    // Decrement the unseen count\n    unseen = _.filter(messages, function(message, i) { return !message.isread; });\n    this.unseenCount -= unseen.length;\n\n    // Remove messages from $messages and uidsMap\n    _.forEachRight(this.$messages, function(message, index) {\n      var selectedIndex = _.findIndex(uids, function(uid) {\n        return message.uid == uid;\n      });\n      if (selectedIndex > -1) {\n        uids.splice(selectedIndex, 1);\n        delete _this.uidsMap[message.uid];\n        if (message.uid == _this.selectedMessage)\n          delete _this.selectedMessage;\n        _this.$messages.splice(index, 1);\n        if (index < firstIndex)\n          firstIndex = index;\n      }\n      else {\n        _this.uidsMap[message.uid] -= uids.length;\n      }\n    });\n\n    // Return the index of the first deleted message\n    return firstIndex;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof Mailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messages) {\n    var _this = this,\n        uids = _.map(messages, 'uid'),\n        method = (this.type == 'junk' ? 'markMessagesAsNotJunk' : 'markMessagesAsJunk');\n\n    return Mailbox.$$resource.post(this.id, method, {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(messages, folder) {\n    var _this = this,\n        uids = _.map(messages, 'uid');\n\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(messages, folder) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder})\n      .then(function() {\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this.$shadowData, function(value, key) {\n      delete _this[key];\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(response) {\n      Mailbox.$log.error(JSON.stringify(response.data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n      return response.data;\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key != 'headers' &&\n          key != 'uids' &&\n          key != 'uidsMap' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        if (!data.uids || _this.$topIndex > data.uids.length - 1)\n          _this.$topIndex = 0;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.zipObject(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.forEach(_this.headers, function(data) {\n            var msg = _.zipObject(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(messageHeaders) {\n            messageHeaders = _.zipObject(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n  /**\n   * @function $toggleSubscribe\n   * @memberof Mailbox.prototype\n   * @desc Subscribe or unsubscribe to a mailbox\n   */\n  Mailbox.prototype.$toggleSubscribe = function() {\n    if (this.subscribed)\n      return Mailbox.$$resource.post(this.id, 'subscribe');\n\n    return Mailbox.$$resource.post(this.id, 'unsubscribe');\n    };\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'sgMessage_STATUS', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Message_STATUS, Resource, Preferences) {\n    angular.extend(Message, {\n      STATUS: Message_STATUS,\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $avatar: angular.bind(Preferences, Preferences.avatar)\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMessage_STATUS', {\n      NOT_LOADED:      0,\n      DELAYED_LOADING: 1,\n      LOADING:         2,\n      LOADED:          3,\n      DELAYED_MS:      300\n    })\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query, excludedTags) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        if (!_.includes(excludedTags, tag))\n          results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    var _this = this, id = this.id;\n\n    function buildPath() {\n      var path;\n      path = _.map(_this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, _this.accountId); // insert account ID\n      return path.join('/');\n    }\n\n    if (angular.isUndefined(this.id) || options && options.nocache) {\n      this.id = buildPath() + '/' + this.uid; // add message UID\n      id = this.id;\n    }\n    if (options && options.asDraft && this.draftId) {\n      id = buildPath() + '/' + this.draftId; // add draft ID\n    }\n\n    return id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1), _this = this, index;\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      this.$absolutePath({nocache: true});\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          index = this.$mailbox.uidsMap[oldUID];\n          this.$mailbox.uidsMap[uid] = index;\n          delete this.$mailbox.uidsMap[oldUID];\n\n          // Update messages list of mailbox\n          _.forEach(['from', 'to', 'subject'], function(attr) {\n            _this.$mailbox.$messages[index][attr] = _this[attr];\n          });\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates the avatar URL for each email address and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.map(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.forEach(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.forEach(_this[type], function(data) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          if (data.name.length < 10)\n            // Name is already short\n            data.shortname = data.name;\n          else if (data.name.split(' ').length)\n            // If we have \"Alice Foo\" or \"Foo, Alice\" as name, we grab \"Alice\"\n            data.shortname = _.first(_.last(data.name.split(/, */)).split(/ +/)).replace('\\'','');\n        }\n        else if (data.email) {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        data.image = Message.$avatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function(max) {\n    var _this = this, result = [], count = 0, total = 0;\n\n    // Build short representation of email addresses\n    _.forEach(['to', 'cc', 'bcc'], function(type) {\n      total += _this[type]? _this[type].length : 0;\n      _.forEach(_this[type], function(data, i) {\n        if (count < max)\n          result.push(data.shortname);\n        count++;\n      });\n    });\n\n    if (total > max)\n      result.push(l('and %{0} more...', (total - max)));\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], _.bind(function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, this), recipientsCount);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.forEach(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        // Try to match a known account identity from the specified \"from\" address\n        var identity = _.find(_this.$mailbox.$account.identities, function(identity) {\n          return data.from.toLowerCase().indexOf(identity.email) !== -1;\n        });\n        if (identity)\n          data.from = identity.full;\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function $plainContent\n   * @memberof Message.prototype\n   * @returns the a plain text representation of the subject and body\n   */\n  Message.prototype.$plainContent = function() {\n    return Message.$$resource.fetch(this.$absolutePath(), 'viewplain');\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $isLoading\n   * @memberof Message.prototype\n   * @returns true if the Message content is still being retrieved from server after a specific delay\n   * @see sgMessage_STATUS\n   */\n  Message.prototype.$isLoading = function() {\n    return this.$loaded == Message.STATUS.LOADING;\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @param {object} [options] - set {useCache: true} to use already fetched data\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var _this = this, futureMessageData;\n\n    if (options && options.useCache && this.$futureMessageData) {\n      if (!this.isread) {\n        Message.$$resource.fetch(this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return this;\n    }\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n      _this.isNew = false;\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable);\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(response) {\n      if (response.status == 'success') {\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n        return response;\n      }\n      else {\n        return Message.$q.reject(response.data);\n      }\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Message is not loaded yet\n    this.$loaded = Message.STATUS.DELAYED_LOADING;\n    Message.$timeout(function() {\n      if (_this.$loaded != Message.STATUS.LOADED)\n        _this.$loaded = Message.STATUS.LOADING;\n    }, Message.STATUS.DELAYED_MS);\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        _this.$loaded = Message.STATUS.LOADED;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function(options) {\n    var message = {},\n        privateAttributes = options && options.privateAttributes;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$' || privateAttributes) {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n  /**\n   * @function saveMessage\n   * @memberof Message.prototype\n   * @desc Download the current message\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.saveMessage = function() {\n    var selectedUIDs;\n\n    selectedUIDs = [ this.uid ];\n\n    return Message.$$resource.download(this.$mailbox.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() {\n      _this.$isLoading = false;\n    });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof VirtualMailbox.prototype\n   * @desc A no-op for virtual mailbox\n   */\n  VirtualMailbox.prototype.selectFolder = function() {\n    return;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.forEach(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if a message is selected among the resulting mailboxes\n   * @returns true if one message is selected\n   */\n  VirtualMailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return angular.isDefined(mailbox.selectedMessage);\n    }));\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Return an associative array of the selected messages for each mailbox. Keys are the mailboxes ids.\n   * @returns an associative array\n   */\n  VirtualMailbox.prototype.$selectedMessages = function() {\n    var messagesMap = {};\n    return _.transform(this.$mailboxes, function(messagesMap, mailbox) {\n      messagesMap[mailbox.id] = mailbox.$selectedMessages();\n    }, {});\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    return _.sum(_.invokeMap(this.$mailboxes, '$selectedCount'));\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @param {object} messagesMap\n   * @param {array} flags\n   * @param {string} operation\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(messagesMap, flags, operation) {\n    var data = {\n      flags: flags,\n      operation: operation\n    };\n    var allMessages = [];\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var uids = _.map(messages, 'uid');\n        allMessages.push(messages);\n        var promise = VirtualMailbox.$$resource.post(id, 'addOrRemoveLabel', _.assign(data, {msgUIDs: uids}));\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises).then(function() {\n      return _.flatten(allMessages);\n    });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$deleteMessages(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof VirtualMailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$markOrUnMarkMessagesAsJunk(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$copyMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$moveMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$scope', '$timeout', '$q', '$state', '$mdDialog', '$mdToast', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($window, $scope, $timeout, $q, $state, $mdDialog, $mdToast, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, focus, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null,\n        defaultWindowTitle = angular.element($window.document).find('title').attr('sg-default') || \"SOGo\";\n\n    // Expose controller for eventual popup windows\n    $window.$mailboxController = vm;\n\n    stateMailbox.selectFolder();\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.searchMode = searchMode;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false, multiple: 0 };\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.markOrUnMarkMessagesAsJunk = markOrUnMarkMessagesAsJunk;\n    vm.copySelectedMessages = copySelectedMessages;\n    vm.moveSelectedMessages = moveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.unselectMessages = unselectMessages;\n\n    // Expunge mailbox when leaving the Mail module\n    angular.element($window).on('beforeunload', _compactBeforeUnload);\n    $scope.$on('$destroy', function() {\n      angular.element($window).off('beforeunload', _compactBeforeUnload);\n    });\n\n    // Update window's title with unseen messages count of selected mailbox\n    $scope.$watch(function() { return vm.selectedFolder.unseenCount; }, function(unseenCount) {\n      var title = defaultWindowTitle + ' - ';\n      if (unseenCount)\n        title += '(' + unseenCount + ') ';\n      title += vm.selectedFolder.name;\n      $window.document.title = title;\n    });\n\n    function _compactBeforeUnload(event) {\n      return vm.selectedFolder.$compact();\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function searchMode() {\n      vm.mode.search = true;\n      focus('search');\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter().then(function() {\n        if (vm.selectedFolder.selectedMessage) {\n          $timeout(function() {\n            vm.selectedFolder.$topIndex = vm.selectedFolder.uidsMap[vm.selectedFolder.selectedMessage];\n          });\n        }\n      });\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      message.selected = !message.selected;\n      vm.mode.multiple += message.selected? 1 : -1;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    /**\n     * Batch operations\n     */\n\n    function _currentMailboxes() {\n      if (Mailbox.$virtualMode)\n        return vm.selectedFolder.$mailboxes;\n      else\n        return [vm.selectedFolder];\n    }\n\n    function _unselectMessage(message, index) {\n      // Unselect current message and cleverly load the next message.\n      // This function must not be called in virtual mode.\n      var nextMessage, previousMessage, nextIndex = index;\n      vm.mode.multiple = vm.selectedFolder.$selectedCount();\n      if (message) {\n        // Select either the next or previous message\n        if (index > 0) {\n          nextIndex -= 1;\n          nextMessage = vm.selectedFolder.$messages[nextIndex];\n        }\n        if (index < vm.selectedFolder.$messages.length)\n          previousMessage = vm.selectedFolder.$messages[index];\n        if (nextMessage) {\n          if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n        }\n        else if (previousMessage) {\n          nextIndex = index;\n          nextMessage = previousMessage;\n        }\n        if (nextMessage) {\n          vm.selectedFolder.$topIndex = nextIndex;\n          $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n        }\n        else {\n          $state.go('mail.account.mailbox');\n        }\n      }\n      else {\n        $timeout(function() {\n          console.warn('go to mailbox');\n          $state.go('mail.account.mailbox');\n        });\n      }\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'),\n                     { ok: l('Delete') })\n        .then(function() {\n          var deleteSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n          var selectedMessages = vm.selectedFolder.$selectedMessages();\n          if (_.size(selectedMessages) > 0)\n            vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n              if (Mailbox.$virtualMode) {\n                // When performing an advanced search, we refresh the view if the selected message\n                // was deleted, but only once all promises have completed.\n                if (deleteSelectedMessage)\n                  $state.go('mail.account.virtualMailbox');\n              }\n              else {\n                // In normal mode, we immediately unselect the selected message.\n                _unselectMessage(deleteSelectedMessage, index);\n              }\n            });\n        });\n    }\n\n    function markOrUnMarkMessagesAsJunk() {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$markOrUnMarkMessagesAsJunk(selectedMessages).then(function() {\n          var dstFolder = '/' + vm.account.id + '/folderINBOX';\n          if (vm.selectedFolder.type != 'junk') {\n            dstFolder = '/' + vm.account.$getMailboxByType('junk').id;\n          }\n          vm.selectedFolder.$moveMessages(selectedMessages, dstFolder).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (moveSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(moveSelectedMessage, index);\n            }\n          });\n        });\n    }\n\n    function copySelectedMessages(dstFolder) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$copyMessages(selectedMessages, '/' + dstFolder).then(function() {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) copied', vm.selectedFolder.$selectedCount()))\n              .position('top right')\n              .hideDelay(2000));\n        });\n    }\n\n    function moveSelectedMessages(dstFolder) {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      var count = vm.selectedFolder.$selectedCount();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$moveMessages(selectedMessages, '/' + dstFolder).then(function(index) {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) moved', count))\n              .position('top right')\n              .hideDelay(2000));\n          if (Mailbox.$virtualMode) {\n            // When performing an advanced search, we refresh the view if the selected message\n            // was moved, but only once all promises have completed.\n            if (moveSelectedMessage)\n              $state.go('mail.account.virtualMailbox');\n          }\n          else {\n            // In normal mode, we immediately unselect the selected message.\n            _unselectMessage(moveSelectedMessage, index);\n          }\n        });\n    }\n\n    function selectAll() {\n      var count = 0;\n      _.forEach(_currentMailboxes(), function(folder) {\n        var i = 0, length = folder.$messages.length;\n        for (; i < length; i++)\n          folder.$messages[i].selected = true;\n        count += length;\n      });\n      vm.mode.multiple = count;\n    }\n\n    function unselectMessages() {\n      _.forEach(_currentMailboxes(), function(folder) {\n        _.forEach(folder.$messages, function(message) {\n          message.selected = false;\n        });\n      });\n      vm.mode.multiple = 0;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$flagMessages(selectedMessages, '\\\\Flagged', 'add').then(function(messages) {\n          _.forEach(messages, function(message) {\n            message.isflagged = true;\n          });\n        });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$flagMessages(selectedMessages, 'seen', 'remove').then(function(messages) {\n          _.forEach(messages, function(message) {\n            message.isread = false;\n            message.$mailbox.unseenCount++;\n          });\n        });\n    }\n\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgConstant', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, sgConstant, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.toggleAccountState = toggleAccountState;\n    vm.subscribe = subscribe;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n    vm.isDroppableFolder = isDroppableFolder;\n    vm.dragSelectedMessages = dragSelectedMessages;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    Preferences.ready().then(function() {\n      vm.showSubscribedOnly = Preferences.defaults.SOGoMailShowSubscribedFoldersOnly;\n    });\n\n    vm.refreshUnseenCount();\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.forEach(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function toggleAccountState(account) {\n      account.$expanded = !account.$expanded;\n      account.$flattenMailboxes({ reload: true, saveState: true });\n      // Fire a window resize to recompute the virtual-repeater.\n      // This is a fix until the following issue is officially resolved:\n      // https://github.com/angular/material/issues/7309\n      $timeout(function() {\n        angular.element($window).triggerHandler('resize');\n      }, 150);\n    }\n\n    function subscribe(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/subscribe',\n        controller: SubscriptionsDialogController,\n        controllerAs: 'subscriptions',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          srcApp: vm,\n          srcAccount: account\n        }\n      }).finally(function() {\n          account.$getMailboxes({reload: true});\n      });\n\n      /**\n       * @ngInject\n       */\n      SubscriptionsDialogController.$inject = ['$scope', '$mdDialog', 'srcApp', 'srcAccount'];\n      function SubscriptionsDialogController($scope, $mdDialog, srcApp, srcAccount) {\n        var vm = this;\n\n        vm.app = srcApp;\n        vm.account = new Account({id: srcAccount.id,\n                                  name: srcAccount.name},\n                                 true);\n        vm.close = close;\n\n        function close() {\n          $mdDialog.cancel();\n        }\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder($event, account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Trash emptied'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail.account.inbox');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox', special: true};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts', special: true};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send', special: true};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete', special: true};\n      else if (folder.type == 'junk')\n        return {name: l('JunkFolderName'), icon: 'thumb_down', special: true};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared', special: true};\n\n      return {name: folder.name, icon: 'folder_open', special: false};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    function isDroppableFolder(srcFolder, dstFolder) {\n      return (dstFolder.id != srcFolder.id) && !dstFolder.isNoSelect();\n    }\n\n    function dragSelectedMessages(srcFolder, dstFolder, mode) {\n      var dstId, messages, uids, clearMessageView, promise, success;\n\n      dstId = '/' + dstFolder.id;\n      messages = srcFolder.$selectedMessages();\n      if (messages.length === 0)\n        messages = [srcFolder.$selectedMessage()];\n      uids = _.map(messages, 'uid');\n      clearMessageView = (srcFolder.selectedMessage && uids.indexOf(srcFolder.selectedMessage) >= 0);\n\n      if (mode == 'copy') {\n        promise = srcFolder.$copyMessages(messages, dstId);\n        success = l('%{0} message(s) copied', messages.length);\n      }\n      else {\n        promise = srcFolder.$moveMessages(messages, dstId);\n        success = l('%{0} message(s) moved', messages.length);\n      }\n\n      promise.then(function() {\n        if (clearMessageView)\n          $state.go('mail.account.mailbox');\n        $mdToast.show(\n          $mdToast.simple()\n            .content(success)\n            .position('top right')\n            .hideDelay(2000));\n      });\n    }\n\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxesController', MailboxesController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdMedia', '$mdDialog', 'sgConstant', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Calendar', 'Component', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdMedia, $mdDialog, sgConstant, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, sgSettings, focus, Dialog, Calendar, Component, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null;\n\n    // Expose controller\n    $window.$messageController = vm;\n\n    vm.$state = $state;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.toggleDetailedRecipients = toggleDetailedRecipients;\n    vm.filterMailtoLinks = filterMailtoLinks;\n    vm.deleteMessage = deleteMessage;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n    vm.print = print;\n    vm.convertToEvent = convertToEvent;\n    vm.convertToTask = convertToTask;\n\n    // One-way refresh of the parent window when modifying the message from a popup window.\n    if ($window.opener) {\n      // Update the message flags. The message must be displayed in the parent window.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(newTags, oldTags) {\n        var ctrls;\n        if (newTags || oldTags) {\n          ctrls = $parentControllers();\n          if (ctrls.messageCtrl) {\n            ctrls.messageCtrl.service.$timeout(function() {\n              ctrls.messageCtrl.showFlags = true;\n              ctrls.messageCtrl.message.flags = newTags;\n            });\n          }\n        }\n      });\n      // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n      $scope.$watch(function() { return vm.message.isflagged; }, function(isflagged, wasflagged) {\n        var ctrls = $parentControllers();\n        if (ctrls.mailboxCtrl) {\n          ctrls.mailboxCtrl.service.$timeout(function() {\n            var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n            message.isflagged = isflagged;\n          });\n        }\n      });\n    }\n    else {\n      // Flatten new tags when coming from the predefined list of tags (Message.$tags) and\n      // sync tags with server when adding or removing a tag.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(_newTags, _oldTags) {\n        var newTags, oldTags, tags;\n        if (_newTags || _oldTags) {\n          newTags = _newTags || [];\n          oldTags = _oldTags || [];\n          _.forEach(newTags, function(tag, i) {\n            if (angular.isObject(tag))\n              newTags[i] = tag.name;\n          });\n          if (newTags.length > oldTags.length) {\n            tags = _.difference(newTags, oldTags);\n            _.forEach(tags, function(tag) {\n              vm.message.addTag(tag);\n            });\n          }\n          else if (newTags.length < oldTags.length) {\n            tags = _.difference(oldTags, newTags);\n            _.forEach(tags, function(tag) {\n              vm.message.removeTag(tag);\n            });\n          }\n        }\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    function toggleDetailedRecipients($event) {\n      vm.$showDetailedRecipients = !vm.$showDetailedRecipients;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function filterMailtoLinks($event) {\n      var href, match, to, cc, bcc, subject, body, data;\n      if ($event.target.tagName == 'A' && 'href' in $event.target.attributes) {\n        href = $event.target.attributes.href.value;\n        match = /^mailto:([^\\?]+)/.exec(href);\n        if (match) {\n          // Recipients\n          to = _.map(decodeURIComponent(match[1]).split(','), function(email) {\n            return '<' + email + '>';\n          });\n          data = { to: to };\n          // Subject & body\n          _.forEach(['subject', 'body'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            param = (param == 'body')? 'text' : param;\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          // Recipients\n          _.forEach(['cc', 'bcc'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          newMessage($event, data); // will stop event propagation\n        }\n      }\n    }\n\n    function deleteMessage() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage && $mdMedia(sgConstant['gt-md'])) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              if (nextIndex < mailbox.$topIndex)\n                mailbox.$topIndex = nextIndex;\n              else if (nextIndex > mailbox.$lastVisibleIndex)\n                mailbox.$topIndex = nextIndex - (mailbox.$lastVisibleIndex - mailbox.$topIndex);\n            }\n            else {\n              state.go('mail.account.mailbox').then(function() {\n                message = null;\n                delete mailbox.selectedMessage;\n              });\n            }\n          }\n          catch (error) {}\n        }\n        closePopup();\n      });\n    }\n\n    function showMailEditor($event, message) {\n      if (messageDialog === null) {\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n            closePopup();\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      if ($window.opener)\n        $window.close();\n    }\n\n    function newMessage($event, editableContent) {\n      vm.account.$newMessage().then(function(message) {\n        angular.extend(message.editable, editableContent);\n        showMailEditor($event, message);\n      });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.message.$rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.message.$rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n\n    function print($event) {\n      $window.print();\n    }\n\n    function convertToEvent($event) {\n      return convertToComponent($event, 'appointment');\n    }\n\n    function convertToTask($event) {\n      return convertToComponent($event, 'task');\n    }\n\n    function convertToComponent($event, type) {\n      vm.message.$plainContent().then(function(data) {\n        var componentData = {\n          pid: Calendar.$defaultCalendar(),\n          type: type,\n          summary: data.subject,\n          comment: data.content\n        };\n        var component = new Component(componentData);\n        // UI/Templates/SchedulerUI/UIxAppointmentEditorTemplate.wox or\n        // UI/Templates/SchedulerUI/UIxTaskEditorTemplate.wox\n        var templateUrl = [\n          sgSettings.activeUser('folderURL'),\n          'Calendar',\n          'UIx' + type.capitalize() + 'EditorTemplate'\n        ].join('/');\n        return $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: templateUrl,\n          controller: 'ComponentEditorController',\n          controllerAs: 'editor',\n          locals: {\n            stateComponent: component\n          }\n        });\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$scope', '$window', '$stateParams', '$mdConstant', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccount', 'stateMessage', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($scope, $window, $stateParams, $mdConstant, $mdDialog, $mdToast, FileUploader, stateAccount, stateMessage, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = (stateMessage.editable.cc.length === 0);\n    vm.hideBcc = (stateMessage.editable.bcc.length === 0);\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.send = send;\n    vm.sendState = false;\n    vm.removeAttachment = removeAttachment;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.map(stateAccount.identities, 'full');\n    vm.recipientSeparatorKeys = [\n      $mdConstant.KEY_CODE.ENTER,\n      $mdConstant.KEY_CODE.TAB,\n      $mdConstant.KEY_CODE.COMMA,\n      $mdConstant.KEY_CODE.SEMICOLON\n    ];\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Error while uploading the file \\\"%{0}\\\":', item.file.name))\n            .position('top right')\n            .hideDelay(3000));\n        this.removeFromQueue(item);\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    // Destroy file uploader when the controller is being deactivated\n    $scope.$on('$destroy', function() { vm.uploader.destroy(); });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n      if ($window.opener) {\n        if ($window.opener.$mailboxController) {\n          if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n            ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The draft is opened in the parent window\n              ctrls.draftMessageCtrl = $window.opener.$messageController;\n            }\n          }\n          else if (stateMessage.origin) {\n            originMessage = stateMessage.origin.message;\n            if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n              // The message mailbox is opened in the parent window\n              ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n            }\n          }\n        }\n      }\n      return ctrls;\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem, attrs = vm.message.editable.attachmentAttrs;\n      if (attrs)\n        for (i = 0; i < attrs.length; i++) {\n          data = {\n            name: attrs[i].filename,\n            type: attrs[i].mimetype,\n            size: parseInt(attrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = attrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n    }\n\n    function cancel() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      if (vm.message.isNew && vm.message.attachmentAttrs)\n        vm.message.$mailbox.$deleteMessages([vm.message]);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        vm.message.$rawSource = null;\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      var ctrls = $parentControllers();\n\n      vm.sendState = 'sending';\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        vm.sendState = 'sent';\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n\n        // Let the user see the succesfull message before closing the dialog\n        $timeout($mdDialog.hide, 1000);\n      }, function(response) {\n        vm.sendState = 'error';\n        vm.errorMessage = response.data? response.data.message : response.statusText;\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query).then(function(cards) {\n        // Divide the matching cards by email addresses so the user can select\n        // the recipient address of her choice\n        var explodedCards = [];\n        _.forEach(_.invokeMap(cards, 'explode'), function(manyCards) {\n          _.forEach(manyCards, function(card) {\n            explodedCards.push(card);\n          });\n        });\n        // Remove duplicates\n        return _.uniqBy(explodedCards, function(card) {\n          return card.$$fullname + ' ' + card.$$email;\n        });\n      });\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list;\n\n      if (angular.isString(contact))\n        return contact;\n\n      recipients = vm.message.editable[field];\n\n      if (contact.$isList({expandable: true})) {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.forEach(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}