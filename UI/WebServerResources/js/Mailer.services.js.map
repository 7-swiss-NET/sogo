{"version":3,"sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","forEach","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","i","id","$accounts","prototype","getLength","$flattenMailboxes","length","getItemAtIndex","index","expandedMailboxes","$getMailboxes","options","_this","$mailboxes","reload","$find","$expanded","ready","expandedFolders","_visit","mailboxes","indexOf","children","settings","Mail","ExpandedFolders","isString","fromJson","when","allMailboxes","push","all","$$flattenMailboxes","saveState","account","reduce","mailbox","post","$getMailboxByType","type","_find","find","$getMailboxByPath","path","$newMailbox","name","toString","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","isNew","$addDelegate","user","deferred","defer","param","uid","map","delegates","resolve","users","status","reject","promise","$removeDelegate","splice","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","quotas","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","$isNoInferiors","isNoInferiors","isUndefined","$shadowData","$omit","selectFolder","$lastVisibleIndex","max","$loadMessage","$selectedMessages","filter","selected","$selectedCount","isSelectedMessage","messageId","selectedMessage","$selectedMessage","$selectedMessageIndex","hasSelectedMessage","isDefined","$filter","sortingAttributes","filters","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","loaded","subject","min","loading","$unwrapHeaders","flags","isNoSelect","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","messages","operation","msgUIDs","saveSelectedMessages","selectedMessages","selectedUIDs","filename","download","exportFolder","$delete","$_deleteMessages","unseen","firstIndex","isread","forEachRight","selectedIndex","findIndex","$deleteMessages","$markOrUnMarkMessagesAsJunk","method","$copyMessages","folder","$moveMessages","$reset","value","key","save","response","error","$futureMailboxData","headers","$topIndex","invokeMap","threaded","msgs","msg","zipObject","isError","j","messageHeaders","$updateSubscribe","action","subscribed","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Message_STATUS","STATUS","$avatar","avatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","NOT_LOADED","DELAYED_LOADING","LOADING","LOADED","DELAYED_MS","filterTags","query","excludedTags","re","RegExp","results","keys","tag","pair","search","includes","color","buildPath","nocache","draftId","$setUID","oldUID","attr","constructor","shortname","first","last","replace","image","$shortRecipients","result","count","total","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","removeAttr","compile","$editableContent","from","toLowerCase","text","$plainContent","addTag","$addOrRemoveTag","removeTag","$imipAction","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","attachmentAttrs","attachment","toggleFlag","isflagged","$loaded","useCache","$futureMessageData","$reply","$newDraft","$replyAll","$forward","origin","$send","startsWith","isanswered","isforwarded","privateAttributes","downloadAttachments","VirtualMailbox","setMailboxes","startSearch","params","finally","stopSearch","resetSelectedMessage","len","k","transform","messagesMap","sum","allMessages","promises","assign","flatten","MailboxController","$window","$scope","$state","$mdDialog","$mdToast","stateAccounts","stateAccount","stateMailbox","sgHotkeys","encodeUriFilter","focus","Dialog","_registerHotkeys","createHotkey","callback","searchMode","newMessage","markOrUnMarkMessagesAsJunk","toggleMessageSelection","_nextMessage","preventInClass","_previousMessage","_addNextMessageToSelection","_addPreviousMessageToSelection","confirmDeleteSelectedMessages","registerHotkey","_compactBeforeUnload","event","vm","field","sortedBy","mode","cancelSearch","$event","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","stateMessage","stateRecipients","selectMessage","preventDefault","go","mailboxId","nextSelectedIndex","multiple","shiftKey","stopPropagation","_currentMailboxes","_unselectMessage","nextMessage","previousMessage","nextIndex","console","warn","size","confirm","ok","deleteSelectedMessage","withoutTrash","moveSelectedMessage","dstFolder","copySelectedMessages","simple","position","hideDelay","moveSelectedMessages","selectAll","unselectMessages","markSelectedMessagesAsFlagged","markSelectedMessagesAsUnread","markSelectedMessagesAsRead","defaultWindowTitle","hotkeys","$mailboxController","service","accounts","on","$on","off","deregisterHotkey","$watch","title","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","$inject","decorator","MailboxesController","$mdMedia","$mdSidenav","sgConstant","User","confirmDelete","showAdvancedSearch","showingAdvancedSearch","close","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","toggleAccountState","triggerHandler","subscribe","SubscriptionsDialogController","metadataForFolder","srcAccount","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","userFilter","closeModal","hide","removeUser","catch","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","saveFolder","compactFolder","emptyTrashFolder","markFolderRead","share","$users","usersWithACL","icon","special","setFolderAs","refreshUnseenCount","unseenCountFolders","isDroppableFolder","srcFolder","dragSelectedMessages","dstId","clearMessageView","success","","showSubscribedOnly","SOGoMailShowSubscribedFoldersOnly","MessageController","sgSettings","Calendar","Component","reply","replyAll","forward","deleteMessage","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","toggleDetailedRecipients","$showDetailedRecipients","filterMailtoLinks","href","target","tagName","attributes","exec","decodeURIComponent","state","parentCtrls","closePopup","showMailEditor","edit","openPopup","url","baseURL","wId","popupWindow","open","editableContent","toggleRawSource","showRawSource","$rawSource","print","convertToEvent","convertToComponent","convertToTask","componentData","pid","$defaultCalendar","summary","comment","capitalize","stateComponent","tags","showFlags","$watchCollection","newTags","oldTags","wasflagged","_newTags","_oldTags","isObject","difference","MessageEditorController","$stateParams","$mdConstant","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","addAttachments","fileItem","attrs","mimetype","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","remove","getElementById","prop","autosave","send","sendState","errorMessage","statusText","contactFilter","$filterAll","cards","explodedCards","manyCards","card","uniqBy","$$fullname","$$email","addRecipient","contact","recipients","recipient","list","$isList","expandable","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideCc","hideBcc","recipientSeparatorKeys","KEY_CODE","ENTER","TAB","COMMA","SEMICOLON","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","destroy","actionName","msgObject","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode"],"mappings":"CAEA,WACE,YAOE,SAASA,GAAQC,GAEqB,kBAA3BA,GAAkBC,OAC3BC,QAAQC,OAAOC,KAAMJ,GACrBK,EAAEC,QAAQF,KAAKG,WAAY,SAASC,GAC9BA,EAASC,SACXD,EAASE,KAAOF,EAASC,SAAW,KAAOD,EAASG,MAAQ,IAE5DH,EAASE,KAAO,IAAMF,EAASG,MAAQ,MAE3CZ,EAAQa,KAAKC,MAAM,YAAcC,KAAKC,UAAUf,EAAmBgB,OAAW,KAalFjB,EAAQkB,UAAY,KAAM,WAAY,OAAQ,aAAc,WAAY,cAAe,UAAW,UAAW,SAASC,EAAIC,EAAUP,EAAMQ,EAAUC,EAAUC,EAAaC,EAASC,GAWlL,MAVAtB,SAAQC,OAAOJ,GACbmB,GAAIA,EACJC,SAAUA,EACVP,KAAMA,EACNa,WAAY,GAAIJ,GAASD,EAASM,WAAW,aAAe,OAAQN,EAASM,cAC7EC,aAAcL,EACdM,SAAUL,EACVM,SAAUL,IAGLzB,GAOT,KACEG,QAAQ4B,OAAO,iBAEjB,MAAMC,GACJ7B,QAAQ4B,OAAO,iBAAkB,gBAEnC5B,QAAQ4B,OAAO,iBACZE,QAAQ,UAAWjC,EAAQkB,UAQ9BlB,EAAQkC,SAAW,SAASC,GAC1B,MAAKA,GAKEnC,EAAQoC,kBAAkBD,GAJxBnC,EAAQ0B,WAAWW,MAAM,GAAI,gBAAgBnC,KAAK,SAASoC,GAChE,MAAOtC,GAAQoC,kBAAkBE,MAYvCtC,EAAQoC,kBAAoB,SAASD,GACnC,GAAII,KAQJ,OANApC,SAAQI,QAAQ4B,EAAM,SAASG,EAAGE,GAChCF,EAAEG,GAAKD,EACPD,EAAWC,GAAK,GAAIxC,GAAQsC,KAE9BtC,EAAQ0C,UAAYH,EAEbA,GASTvC,EAAQ2C,UAAUC,UAAY,WAC5B,MAAOvC,MAAKwC,oBAAoBC,QASlC9C,EAAQ2C,UAAUI,eAAiB,SAASC,GAC1C,GAAIC,EAGJ,OADAA,GAAoB5C,KAAKwC,oBACrBG,GAAS,GAAKA,EAAQC,EAAkBH,OACnCG,EAAkBD,GAEpB,MAUThD,EAAQ2C,UAAUO,cAAgB,SAASC,GACzC,GAAIC,GAAQ/C,IAEZ,QAAIA,KAAKgD,YAAgBF,GAAWA,EAAQG,OAInCtD,EAAQ6B,SAAS0B,MAAMlD,KAAM8C,GAASjD,KAAK,SAASiC,GA+BzD,MA9BAiB,GAAMC,WAAalB,EACnBiB,EAAMI,WAAY,EAGlBxD,EAAQ4B,aAAa6B,QAAQvD,KAAK,WAChC,GAAIwD,GACAC,EAAS,SAASC,GAChBtD,EAAEC,QAAQqD,EAAW,SAAStB,GAC5BA,EAAEkB,UAAaE,EAAgBG,QAAQ,IAAMvB,EAAEG,KAAO,EAClDH,EAAEwB,UAAYxB,EAAEwB,SAAShB,OAAS,GACpCa,EAAOrB,EAAEwB,YAIf9D,GAAQ4B,aAAamC,SAASC,KAAKC,kBAGnCP,EAFEvD,QAAQ+D,SAASlE,EAAQ4B,aAAamC,SAASC,KAAKC,iBAEpC9D,QAAQgE,SAASnE,EAAQ4B,aAAamC,SAASC,KAAKC,iBAEpDjE,EAAQ4B,aAAamC,SAASC,KAAKC,gBACvDb,EAAMI,UAAaE,EAAgBG,QAAQ,IAAMT,EAAMX,KAAO,EAC1DiB,EAAgBZ,OAAS,GAC3Ba,EAAOP,EAAMC,aAGbrD,EAAQ0C,YACVU,EAAMI,WAA0C,GAA5BxD,EAAQ0C,UAAUI,QACxCM,EAAMP,mBAAmBS,QAAQ,MAG5BF,EAAMC,aAlCRrD,EAAQmB,GAAGiD,KAAK/D,KAAKgD,aAiDhCrD,EAAQ2C,UAAUE,kBAAoB,SAASM,GAC7C,GAAIC,GAAQ/C,KACRgE,KACApB,KACAU,EAAS,SAASC,GAChBtD,EAAEC,QAAQqD,EAAW,SAAStB,GAC5B+B,EAAaC,KAAKhC,IACba,GAAWA,EAAQoB,KAAOjC,EAAEkB,YAAclB,EAAEwB,UAAYxB,EAAEwB,SAAShB,OAAS,GAC/Ea,EAAOrB,EAAEwB,YA8BnB,QAzBIzD,KAAKmE,oBAAwBrB,IAAYA,EAAQG,QAAUH,EAAQoB,MAIrEZ,EAAOtD,KAAKgD,YACPF,GAAYA,EAAQoB,MACvBnB,EAAMoB,mBAAqBH,EACvBlB,GAAWA,EAAQsB,YAErBnE,EAAEC,QAAQP,EAAQ0C,UAAW,SAASgC,GAChCA,EAAQlB,WACVP,EAAkBqB,KAAK,IAAMI,EAAQjC,IAEvCnC,EAAEqE,OAAOD,EAAQF,mBAAoB,SAASd,EAAiBkB,GAI7D,MAHIA,GAAQpB,WACVE,EAAgBY,KAAK,IAAMM,EAAQnC,IAE9BiB,GACNT,KAELjD,EAAQ0B,WAAWmD,KAAK,KAAM,mBAAoB5B,MAnBtDoB,EAAehE,KAAKmE,mBAwBfH,GAGTrE,EAAQ2C,UAAUmC,kBAAoB,SAASC,GAC7C,GAAIH,GAEAI,EAAQ,SAASpB,GACf,GAAIgB,GAAUtE,EAAE2E,KAAKrB,EAAW,SAAStB,GACvC,MAAOA,GAAEyC,MAAQA,GASnB,OAPKH,IACHzE,QAAQI,QAAQqD,EAAW,SAAStB,IAC7BsC,GAAWtC,EAAEwB,UAAYxB,EAAEwB,SAAShB,OAAS,IAChD8B,EAAUI,EAAM1C,EAAEwB,aAIjBc,EAIb,OAFAA,GAAUI,EAAM3E,KAAKgD,aAWvBrD,EAAQ2C,UAAUuC,kBAAoB,SAASC,GAC7C,GAAIP,GAAU,KAEVI,EAAQ,SAASpB,GACf,GAAIgB,GAAUtE,EAAE2E,KAAKrB,EAAW,SAAStB,GACvC,MAAOA,GAAE6C,MAAQA,GASnB,OAPKP,IACHzE,QAAQI,QAAQqD,EAAW,SAAStB,IAC7BsC,GAAWtC,EAAEwB,UAAYxB,EAAEwB,SAAShB,OAAS,IAChD8B,EAAUI,EAAM1C,EAAEwB,aAIjBc,EAIb,OAFAA,GAAUI,EAAM3E,KAAKgD,aAWvBrD,EAAQ2C,UAAUyC,YAAc,SAASD,EAAME,GAC7C,GAAIjC,GAAQ/C,IAEZ,OAAOL,GAAQ0B,WAAWmD,KAAKM,EAAKG,WAAY,gBAAiBD,KAAMA,IAAOnF,KAAK,WACjFkD,EAAMF,eAAeI,QAAQ,OAUjCtD,EAAQ2C,UAAU4C,YAAc,SAASpD,GACvC,GAAIqD,GAASC,EAAQC,CAErBF,GAAWG,KAAKC,MAAuB,IAAjBzD,EAAK0D,UAAoB1D,EAAK2D,UAAY,IAChEL,EAASM,EAAE,gBACXL,EAAcD,EAAOO,UAAUR,EAASG,KAAKC,MAAMzD,EAAK2D,SAAS,OAAO,KAExEzF,KAAK4F,QAAWT,QAASA,EAASE,YAAaA,IASjD1F,EAAQ2C,UAAUuD,YAAc,WAC9B,GAAI9C,GAAQ/C,IAGZ,OAAOL,GAAQ0B,WAAWW,MAAMhC,KAAKoC,GAAG6C,WAAY,WAAWpF,KAAK,SAASiC,GAC3EnC,EAAQa,KAAKC,MAAM,0BAA4BC,KAAKC,UAAUmB,EAAMlB,OAAW,GAC/E,IAAIkF,GAAU,GAAInG,GAAQ8B,SAASK,EAAKiE,UAAWhD,EAAM8B,kBAAkB/C,EAAKkE,aAAclE,EAC9F,OAAOgE,KACNjG,KAAK,SAASiG,GAEf,MAAOnG,GAAQ0B,WAAWW,MAAM8D,EAAQG,eAAeC,SAAS,IAAQ,QAAQrG,KAAK,SAASiC,GAI5F,MAHAnC,GAAQa,KAAKC,MAAM,uBAAyBC,KAAKC,UAAUmB,EAAMlB,OAAW,IAC5Ed,QAAQC,OAAO+F,EAAQK,SAAUrE,GACjCgE,EAAQM,OAAQ,EACTN,OAYbnG,EAAQ2C,UAAU+D,aAAe,SAASC,GACxC,GAAIvD,GAAQ/C,KACRuG,EAAW5G,EAAQmB,GAAG0F,QACtBC,GAASC,IAAKJ,EAAKI,IAavB,QAZKJ,EAAKI,KAAOzG,EAAEuD,QAAQvD,EAAE0G,IAAI3G,KAAK4G,UAAW,OAAQN,EAAKI,MAAO,EAEnEH,EAASM,UAGTlH,EAAQ0B,WAAWW,MAAMhC,KAAKoC,GAAG6C,WAAY,cAAewB,GAAO5G,KAAK,WACtEkD,EAAM6D,UAAU3C,KAAKqC,GACrBC,EAASM,QAAQ9D,EAAM+D,QACtB,SAAShF,EAAMiF,GAChBR,EAASS,OAAOtB,EAAE,yCAGfa,EAASU,SAUlBtH,EAAQ2C,UAAU4E,gBAAkB,SAASR,GAC3C,GAAI3D,GAAQ/C,KACRyG,GAASC,IAAKA,EAClB,OAAO/G,GAAQ0B,WAAWW,MAAMhC,KAAKoC,GAAG6C,WAAY,iBAAkBwB,GAAO5G,KAAK,WAChF,GAAIsC,GAAIlC,EAAEuD,QAAQvD,EAAE0G,IAAI5D,EAAM6D,UAAW,OAAQF,EAC7CvE,IAAK,GACPY,EAAM6D,UAAUO,OAAOhF,EAAG,SCxWlC,WACE,YAOA,SAAShB,GAAQkD,EAAS+C,GAGxB,GAFApH,KAAKqH,SAAWhD,EAEsB,kBAA3B+C,GAAkBvH,MAE3B,GADAG,KAAKsH,KAAKF,GACNpH,KAAKgF,OAAShF,KAAK8E,KAAM,CAE3B,GAAIyC,GAAiBpG,EAAQE,WAAWmG,OAAO,eAAgBxH,KAAKgF,KACpEhF,MAAKyH,QAAQF,QAMfvH,MAAKyH,QAAQL,GASjBjG,EAAQN,UAAY,KAAM,WAAY,OAAQ,aAAc,WAAY,UAAW,MAAO,cAAe,oBAAqB,SAASC,EAAIC,EAAUP,EAAMQ,EAAUC,EAAUG,EAASsG,EAAKxG,EAAayG,GAuBxM,MAtBA7H,SAAQC,OAAOoB,GACbL,GAAIA,EACJC,SAAUA,EACVP,KAAMA,EACNa,WAAY,GAAIJ,GAASD,EAASM,WAAW,aAAe,OAAQN,EAASM,cAC7EG,SAAUL,EACVwG,MAAOF,EACPnG,aAAcL,EACd2G,QAAUC,KAAM,UAAWC,IAAK,GAChCC,eAAgB,KAChBC,gBAAiB,KACjBC,cAAc,EACdP,QAASA,IAGXzG,EAAYkC,QAAQvD,KAAK,WACnBqB,EAAYwC,SAASC,KAAKwE,eAC5BhH,EAAQ0G,OAAOC,KAAO5G,EAAYwC,SAASC,KAAKwE,aAAa,GAC7DhH,EAAQ0G,OAAOE,IAAMK,SAASlH,EAAYwC,SAASC,KAAKwE,aAAa,OAIlEhH,GAOT,KACErB,QAAQ4B,OAAO,iBAEjB,MAAMC,GACJ7B,QAAQ4B,OAAO,iBAAkB,gBAEnC5B,QAAQ4B,OAAO,iBACZ2G,SAAS,qBACRC,UAAW,GACXC,KAAM,MAEP3G,QAAQ,UAAWT,EAAQN,UAS9BM,EAAQ+B,MAAQ,SAASmB,EAASvB,GAChC,GAAUsE,EAOV,OAJEA,GADEtE,GAAWA,EAAQoB,IACDlE,KAAKqB,WAAWW,MAAMqC,EAAQjC,GAAG6C,WAAY,WAE7CjF,KAAKqB,WAAWW,MAAMqC,EAAQjC,GAAG6C,WAAY,QAE5D9D,EAAQY,kBAAkBsC,EAAS+C,IAU5CjG,EAAQY,kBAAoB,SAASsC,EAAS+C,GAC5C,GAAIlF,MAEAsG,EAAkB,SAASC,EAAOlE,GAChC,IAAK,GAAIpC,GAAI,EAAGA,EAAIoC,EAAQd,SAAShB,OAAQN,IAC3CoC,EAAQd,SAAStB,GAAGsG,MAAQA,EAC5BlE,EAAQd,SAAStB,GAAK,GAAIhB,GAAQkD,EAASE,EAAQd,SAAStB,IAC5DqG,EAAgBC,EAAM,EAAGlE,EAAQd,SAAStB,IAKlD,OAAOiF,GAAkBvH,KAAK,SAASiC,GACrC,MAAOX,GAAQJ,SAAS,WAWtB,MATAjB,SAAQI,QAAQ4B,EAAKyB,UAAW,SAASzB,EAAMa,GAC7Cb,EAAK2G,MAAQ,CACb,IAAIlE,GAAU,GAAIpD,GAAQkD,EAASvC,EACnC0G,GAAgB,EAAGjE,GACnBrC,EAAW+B,KAAKM,KAGdzC,EAAK4G,QACPrE,EAAQa,YAAYpD,EAAK4G,QACpBxG,OAYbf,EAAQ8E,cAAgB,SAASF,EAAWC,GAC1C,GAAIlB,KAUJ,OARIkB,KACFlB,EAAO7E,EAAE0G,IAAIX,EAAY2C,MAAM,KAAM,SAASC,GAC5C,MAAO,SAAWA,EAAUC,qBAIhC/D,EAAKqC,OAAO,EAAG,EAAGpB,GAEXjB,EAAKgE,KAAK,MASnB3H,EAAQmB,UAAUgF,KAAO,SAASxF,GAEhC9B,KAAK+I,YAAa,EAClB/I,KAAKgJ,aACLhJ,KAAKiJ,WACLnJ,QAAQC,OAAOC,KAAM8B,GACjB9B,KAAK8E,OACP9E,KAAKoC,GAAKpC,KAAKkJ,MACflJ,KAAKmJ,KAAO,GAAIhI,GAAQyG,MAAM,QAAU5H,KAAKoC,KAE3CpC,KAAK0E,OACP1E,KAAKoJ,YAAcpJ,KAAKqJ,cAE1BrJ,KAAKsJ,eAAiBtJ,KAAKuJ,gBACvBzJ,QAAQ0J,YAAYxJ,KAAKyJ,eAE3BzJ,KAAKyJ,YAAczJ,KAAK0J,UAS5BvI,EAAQmB,UAAUqH,aAAe,WAC1BxI,EAAQ+G,eACX/G,EAAQ6G,eAAiBhI,OAS7BmB,EAAQmB,UAAUC,UAAY,WAC5B,MAAOvC,MAAKgJ,UAAUvG,QASxBtB,EAAQmB,UAAUI,eAAiB,SAASC,GAC1C,GAAImD,EAEJ,OAAInD,IAAS,GAAKA,EAAQ3C,KAAKgJ,UAAUvG,SACvCqD,EAAU9F,KAAKgJ,UAAUrG,GACzB3C,KAAK4J,kBAAoBtE,KAAKuE,IAAI,EAAGlH,EAAQ,GAEzC3C,KAAK8J,aAAahE,EAAQY,MACrBZ,EAEJ,MAST3E,EAAQmB,UAAU4G,IAAM,WACtB,MAAO/H,GAAQ8E,cAAcjG,KAAKqH,SAASjF,GAAIpC,KAAK8E,OAStD3D,EAAQmB,UAAUyH,kBAAoB,WACpC,MAAO9J,GAAE+J,OAAOhK,KAAKgJ,UAAW,SAASlD,GAAW,MAAOA,GAAQmE,YASrE9I,EAAQmB,UAAU4H,eAAiB,WACjC,MAAOlK,MAAK+J,oBAAoBtH,QAUlCtB,EAAQmB,UAAU6H,kBAAoB,SAASC,GAC7C,MAAOpK,MAAKqK,iBAAmBD,GASjCjJ,EAAQmB,UAAUgI,iBAAmB,WACnC,GAAIvH,GAAQ/C,IAEZ,OAAOC,GAAE2E,KAAK5E,KAAKgJ,UAAW,SAASlD,GAAW,MAAOA,GAAQY,KAAO3D,EAAMsH,mBAShFlJ,EAAQmB,UAAUiI,sBAAwB,WACxC,MAAOvK,MAAKiJ,QAAQjJ,KAAKqK,kBAS3BlJ,EAAQmB,UAAUkI,mBAAqB,WACrC,MAAO1K,SAAQ2K,UAAUzK,KAAKqK,kBAiBhClJ,EAAQmB,UAAUoI,QAAU,SAASC,EAAmBC,GACtD,GAAI7H,GAAQ/C,KAAM8C,IASlB,OAPKhD,SAAQ2K,UAAUzK,KAAK6K,eAC1B7K,KAAK6K,YAAc,GAErB1J,EAAQJ,SAAS,WACfgC,EAAMgG,YAAa,IAGd5H,EAAQI,aAAa6B,QAAQvD,KAAK,WA6BvC,GA3BIsB,EAAQ8G,iBACV9G,EAAQJ,SAAS+J,OAAO3J,EAAQ8G,iBAE9B0C,GAEF7K,QAAQC,OAAOoB,EAAQ0G,OAAQ8C,GAEjC7K,QAAQC,OAAO+C,GAAW6H,kBAAmBxJ,EAAQ0G,SACjD/H,QAAQ2K,UAAUG,KACpB9H,EAAQ8H,QAAU3K,EAAE+G,OAAO4D,EAAS,SAASZ,GAC3C,OAAQA,EAAOe,aAA6C,IAA9Bf,EAAOe,YAAYtI,SAGnDxC,EAAEC,QAAQ4C,EAAQ8H,QAAS,SAASZ,GAClC,GAAIgB,GACAC,EAAQjB,EAAOkB,SAASD,MAAM,iBAC9BA,KACFnI,EAAQ6H,kBAAkBM,MAAQ,KAClCjB,EAAOkB,SAAWD,EAAM,GACxBD,EAAelL,QAAQqL,KAAKnB,GAC5BgB,EAAaE,SAAWD,EAAM,GAC9BnI,EAAQ8H,QAAQ3G,KAAK+G,QAMtB7J,EAAQ+G,aAAc,CACzB,GAAIkD,GAAmBjK,EAAQI,aAAa8J,SAASC,oBACrD,IAAIF,GAAwC,YAApBA,EAAgC,CACtD,GAAIG,GAAIzL,QAAQ0L,KAAKzI,EAAO5B,EAAQmB,UAAUoI,QAAS,KAAME,EAC7DzJ,GAAQ8G,gBAAkB9G,EAAQJ,SAASwK,EAAmC,IAAhCH,EAAiBK,iBAInE,GAAIrE,GAAoBjG,EAAQE,WAAWmD,KAAKzB,EAAMX,GAAI,OAAQU,EAClE,OAAOC,GAAM0E,QAAQL,MAUzBjG,EAAQmB,UAAUwH,aAAe,SAASM,GACxC,GACIsB,GACA/I,EAGAgJ,EACAC,EANAC,EAAa7L,KAAKiJ,QAAQmB,GAG1BP,EAAM7J,KAAKgJ,UAAUvG,OACrBqJ,GAAS,CAGb,IAAIhM,QAAQ2K,UAAUzK,KAAKiJ,QAAQmB,KAAeyB,EAAa7L,KAAKgJ,UAAUvG,SAExE3C,QAAQ2K,UAAUzK,KAAKgJ,UAAU6C,GAAYE,WAE/CD,GAAS,GAIXJ,EAAWpG,KAAK0G,IAAIH,EAAa1K,EAAQwG,QAAQW,UAAWuB,EAAM,GAC9D/J,QAAQ2K,UAAUzK,KAAKgJ,UAAU0C,GAAUK,UAC3CjM,QAAQ2K,UAAUzK,KAAKgJ,UAAU0C,GAAUO,UAC7CtJ,EAAQ2C,KAAKuE,IAAIgC,EAAa1K,EAAQwG,QAAQW,UAAW,GACpDxI,QAAQ2K,UAAUzK,KAAKgJ,UAAUrG,GAAOoJ,UACxCjM,QAAQ2K,UAAUzK,KAAKgJ,UAAUrG,GAAOsJ,WAE3CP,EAAWG,EACXA,EAAavG,KAAKuE,IAAIgC,EAAa1K,EAAQwG,QAAQY,KAAM,KAK3DmD,EAAWpG,KAAK0G,IAAIH,EAAa1K,EAAQwG,QAAQY,KAAMsB,EAAM,IAE1D/J,QAAQ2K,UAAUzK,KAAKgJ,UAAU6C,GAAYE,WAC7CjM,QAAQ2K,UAAUzK,KAAKgJ,UAAU6C,GAAYI,WAC7CnM,QAAQ2K,UAAUzK,KAAKgJ,UAAU0C,GAAUK,WAC3CjM,QAAQ2K,UAAUzK,KAAKgJ,UAAU0C,GAAUO,UAAU,CAExD,IAAKN,KAAWE,EAAaH,GAAYG,EAAahC,EAAKgC,IACrD/L,QAAQ2K,UAAUzK,KAAKgJ,UAAU6C,GAAYE,UAAY/L,KAAKgJ,UAAU6C,GAAYI,QAEtFP,KAIAC,EAAK1H,KAAKjE,KAAKgJ,UAAU6C,GAAYnF,KACrC1G,KAAKgJ,UAAU6C,GAAYI,SAAU,EAIzC9K,GAAQX,KAAKC,MAAM,gBAAkBkL,EAAK7C,KAAK,MAC/C8C,EAAoBzK,EAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,WAAYuJ,KAAMA,IACvE3L,KAAKkM,eAAeN,GAGxB,MAAOE,IAST3K,EAAQmB,UAAU+G,WAAa,WAC7B,MAAoB,UAAbrJ,KAAK0E,MASdvD,EAAQmB,UAAUiH,cAAgB,WAChC,MAAOvJ,MAAKmM,MAAM3I,QAAQ,gBAAkB,GAS9CrC,EAAQmB,UAAU8J,WAAa,WAC7B,MAAOpM,MAAKmM,MAAM3I,QAAQ,aAAe,GAU3CrC,EAAQmB,UAAU+J,QAAU,WAC1B,GACIC,GACAC,EACA9I,EACAtB,EAJAY,EAAQ/C,IAMZ,OAAIA,MAAKgF,MAAQhF,KAAKyJ,YAAYzE,KAEzB7D,EAAQL,GAAGiD,QAIpBuI,EAAa,SAASC,EAAQ9I,GAC5B,GAAI+I,GAAgB,KAChBjI,EAAUtE,EAAE2E,KAAKnB,EAAU,SAASxB,GAClC,MAAOA,GAAE6C,MAAQ/B,EAAM+B,MAY7B,OAVIP,GACFiI,EAAgBD,EAGhBzM,QAAQI,QAAQuD,EAAU,SAASxB,IAC5BuK,GAAiBvK,EAAEwB,UAAYxB,EAAEwB,SAAShB,OAAS,IACtD+J,EAAgBF,EAAWrK,EAAGA,EAAEwB,aAI/B+I,GAITD,EAASD,EAAW,KAAMtM,KAAKqH,SAASrE,YAEtCS,EADa,OAAX8I,EACSvM,KAAKqH,SAASrE,WAEduJ,EAAO9I,SAGpBtB,EAAIlC,EAAEuD,QAAQvD,EAAE0G,IAAIlD,EAAU,MAAOzD,KAAKoC,IAEnCpC,KAAKyM,QAAQ5M,KAAK,SAASiC,GAChC,GAAI4K,EACJ5M,SAAQC,OAAOgD,EAAOjB,GACtBiB,EAAMX,GAAKW,EAAMmG,MAGjBzF,EAAS0D,OAAOhF,EAAG,GACnBuK,EAAUzM,EAAE2E,KAAKnB,EAAU,SAASxB,GAElC,MADAd,GAAQX,KAAKC,MAAMwB,EAAE+C,KAAO,MAAQjC,EAAMiC,MACxB,UAAV/C,EAAEyC,MAAoBzC,EAAE+C,KAAK2H,cAAc5J,EAAMiC,MAAQ,IAGjE7C,EADEuK,EACEzM,EAAEuD,QAAQvD,EAAE0G,IAAIlD,EAAU,MAAOiJ,EAAQtK,IAGzCqB,EAAShB,OAEfgB,EAAS0D,OAAOhF,EAAG,EAAGY,OAU1B5B,EAAQmB,UAAUsK,SAAW,WAC3B,GAAI7J,GAAQ/C,IACZ,OAAOmB,GAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,WACrCvC,KAAK,SAASiC,GAETA,EAAK4G,QACP3F,EAAMsE,SAASnC,YAAYpD,EAAK4G,WAUxCvH,EAAQmB,UAAUuK,aAAe,SAASnI,GACxC,MAAOvD,GAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,QAAUsC,EAAO,WAS3DvD,EAAQmB,UAAUwK,YAAc,WAC9B,GAAI/J,GAAQ/C,IAEZ,OAAOmB,GAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,cAAcvC,KAAK,SAASiC,GAElEiB,EAAMiG,aACNjG,EAAMkG,WACNlG,EAAM8H,YAAc,EAGhB/K,QAAQ2K,UAAU1H,EAAMU,WAAaV,EAAMU,SAAShB,QACtDM,EAAMsE,SAASxE,eAAeI,QAAQ,IAGpCnB,EAAK4G,QACP3F,EAAMsE,SAASnC,YAAYpD,EAAK4G,WAUtCvH,EAAQmB,UAAUyK,YAAc,WAC9B,MAAO5L,GAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,aAS1CjB,EAAQmB,UAAU0K,cAAgB,SAASC,EAAUd,EAAOe,GAC1D,GAAIpL,IAAQqL,QAASlN,EAAE0G,IAAIsG,EAAU,OACzBd,MAAOA,EACPe,UAAWA,EAEvB,OAAO/L,GAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,mBAAoBN,GAAMjC,KAAK,WACrE,MAAOoN,MAUX9L,EAAQmB,UAAU8K,qBAAuB,WACvC,GAAItL,GAAMgB,EAASuK,EAAkBC,CAOrC,OALAD,GAAmBpN,EAAE+J,OAAOhK,KAAKgJ,UAAW,SAASlD,GAAW,MAAOA,GAAQmE,WAC/EqD,EAAerN,EAAE0G,IAAI0G,EAAkB,OACvCvL,GAAS6J,KAAM2B,GACfxK,GAAYyK,SAAU7H,EAAE,uBAEjBvE,EAAQE,WAAWmM,SAASxN,KAAKoC,GAAI,gBAAiBuJ,KAAM2B,KASrEnM,EAAQmB,UAAUmL,aAAe,WAC/B,GAAI3K,EAIJ,OAFAA,IAAYyK,SAAUvN,KAAKgF,KAAO,QAE3B7D,EAAQE,WAAWmM,SAASxN,KAAKoC,GAAI,eAAgB,KAAMU,IAUpE3B,EAAQmB,UAAUoL,QAAU,SAAS5K,GACnC,GAAIC,GAAQ/C,IAEZ,OAAOmB,GAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,SAAUU,GAC/CjD,KAAK,WAEJ,MADAkD,GAAMsE,SAASxE,eAAeI,QAAQ,KAC/B,KAYb9B,EAAQmB,UAAUqL,iBAAmB,SAAShC,EAAMsB,GAClD,GAA4CW,GAAxC7K,EAAQ/C,KAAwC6N,EAAa7N,KAAKgJ,UAAUvG,MA0BhF,OAvBAmL,GAAS3N,EAAE+J,OAAOiD,EAAU,SAASnH,EAAS3D,GAAK,OAAQ2D,EAAQgI,SACnE9N,KAAK6K,aAAe+C,EAAOnL,OAG3BxC,EAAE8N,aAAa/N,KAAKgJ,UAAW,SAASlD,EAASnD,GAC/C,GAAIqL,GAAgB/N,EAAEgO,UAAUtC,EAAM,SAASjF,GAC7C,MAAOZ,GAAQY,KAAOA,GAEpBsH,IAAgB,GAClBrC,EAAKxE,OAAO6G,EAAe,SACpBjL,GAAMkG,QAAQnD,EAAQY,KACzBZ,EAAQY,KAAO3D,EAAMsH,uBAChBtH,GAAMsH,gBACftH,EAAMiG,UAAU7B,OAAOxE,EAAO,GAC1BA,EAAQkL,IACVA,EAAalL,IAGfI,EAAMkG,QAAQnD,EAAQY,MAAQiF,EAAKlJ,SAKhCoL,GAUT1M,EAAQmB,UAAU4L,gBAAkB,SAASjB,EAAUnK,GACrD,GAAkB6I,GAAM7J,EAApBiB,EAAQ/C,IAMZ,OAJA2L,GAAO1L,EAAE0G,IAAIsG,EAAU,OACvBnL,GAAS6J,KAAMA,GACX7I,GAAShD,QAAQC,OAAO+B,EAAMgB,GAE3B3B,EAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,cAAeN,GACpDjC,KAAK,SAASiC,GAKb,MAHIA,GAAK4G,QACP3F,EAAMsE,SAASnC,YAAYpD,EAAK4G,QAE3B3F,EAAM4K,iBAAiBhC,EAAMsB,MAU1C9L,EAAQmB,UAAU6L,4BAA8B,SAASlB,GACvD,GACItB,GAAO1L,EAAE0G,IAAIsG,EAAU,OACvBmB,EAAuB,QAAbpO,KAAK0E,KAAiB,wBAA0B,oBAE9D,OAAOvD,GAAQE,WAAWmD,KAAKxE,KAAKoC,GAAIgM,GAASzC,KAAMA,KASzDxK,EAAQmB,UAAU+L,cAAgB,SAASpB,EAAUqB,GACnD,GAAIvL,GAAQ/C,KACR2L,EAAO1L,EAAE0G,IAAIsG,EAAU,MAE3B,OAAO9L,GAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,gBAAiBuJ,KAAMA,EAAM2C,OAAQA,IAC1EzO,KAAK,SAASiC,GAETA,EAAK4G,QACP3F,EAAMsE,SAASnC,YAAYpD,EAAK4G,WAUxCvH,EAAQmB,UAAUiM,cAAgB,SAAStB,EAAUqB,GACnD,GAAkB3C,GAAd5I,EAAQ/C,IAGZ,OADA2L,GAAO1L,EAAE0G,IAAIsG,EAAU,OAChB9L,EAAQE,WAAWmD,KAAKxE,KAAKoC,GAAI,gBAAiBuJ,KAAMA,EAAM2C,OAAQA,IAC1EzO,KAAK,WACJ,MAAOkD,GAAM4K,iBAAiBhC,EAAMsB,MAS1C9L,EAAQmB,UAAUkM,OAAS,WACzB,GAAIzL,GAAQ/C,IACZF,SAAQI,QAAQF,KAAKyJ,YAAa,SAASgF,EAAOC,SACzC3L,GAAM2L,KAEf5O,QAAQC,OAAOC,KAAMA,KAAKyJ,aAC1BzJ,KAAKyJ,YAAczJ,KAAK0J,SAS1BvI,EAAQmB,UAAUmK,MAAQ,WACxB,GAAI1J,GAAQ/C,IAEZ,OAAOmB,GAAQE,WAAWsN,KAAK3O,KAAKoC,GAAIpC,KAAK0J,SAAS7J,KAAK,SAASiC,GAIlE,MAFAiB,GAAM0G,YAAc1G,EAAM2G,QAC1BvI,EAAQX,KAAKC,MAAMC,KAAKC,UAAUmB,EAAMlB,OAAW,IAC5CkB,GACN,SAAS8M,GAIV,MAHAzN,GAAQX,KAAKqO,MAAMnO,KAAKC,UAAUiO,EAAS9M,KAAMlB,OAAW,IAE5DmC,EAAMyL,SACCI,EAAS9M,QAUpBX,EAAQmB,UAAUyC,YAAc,SAASD,EAAME,GAC7C,MAAOhF,MAAKqH,SAAStC,YAAYD,EAAME,IASzC7D,EAAQmB,UAAUoH,MAAQ,WACxB,GAAInF,KAWJ,OAVAzE,SAAQI,QAAQF,KAAM,SAASyO,EAAOC,GACzB,eAAPA,GACO,YAAPA,GACO,WAAPA,GACO,QAAPA,GACO,WAAPA,GACU,KAAVA,EAAI,KACNnK,EAAQmK,GAAOD,KAGZlK,GAUTpD,EAAQmB,UAAUmF,QAAU,SAASL,GACnC,GAAIrE,GAAQ/C,KACRuG,EAAWpF,EAAQL,GAAG0F,OA0D1B,OAxDAxG,MAAK8O,mBAAqB1H,EAC1BpH,KAAK8O,mBAAmBjP,KAAK,SAASiC,GACpCX,EAAQJ,SAAS,WACf,GAAI4K,GAAMoD,IAELjN,EAAK6J,MAAQ5I,EAAMiM,UAAYlN,EAAK6J,KAAKlJ,OAAS,KACrDM,EAAMiM,UAAY,GAEpBjM,EAAMuE,KAAKxF,GAEPiB,EAAM4I,OACRxK,EAAQX,KAAKC,MAAM,cAAgBqB,EAAK6J,KAAKlJ,OAAS,aAGtDsM,EAAU9O,EAAEgP,UAAUlM,EAAMgM,QAAQ,GAAI,eACxChM,EAAMgM,QAAQ5H,OAAO,EAAG,GAGpBpE,EAAMmM,WACRvD,EAAO5I,EAAM4I,KAAK,GAClB5I,EAAM4I,KAAKxE,OAAO,EAAG,IAIvBlH,EAAEqE,OAAOvB,EAAM4I,KAAM,SAASwD,EAAMC,EAAKjN,GACvC,GAAIL,EAWJ,OATEA,GADEiB,EAAMmM,SACDjP,EAAEoP,UAAU1D,EAAMyD,IAEjB1I,IAAK0I,EAAInK,YAGnBlC,EAAMkG,QAAQnH,EAAK4E,KAAOvE,EAE1BgN,EAAKlL,KAAK,GAAI9C,GAAQM,SAASsB,EAAMsE,SAASjF,GAAIW,EAAOjB,IAAM,KAExDqN,GACNpM,EAAMiG,WAGT/I,EAAEC,QAAQ6C,EAAMgM,QAAS,SAASjN,GAChC,GAAIsN,GAAMnP,EAAEoP,UAAUN,EAASjN,GAC3BK,EAAIY,EAAMkG,QAAQmG,EAAI1I,IAAIzB,WAC9BhF,GAAEF,OAAOgD,EAAMiG,UAAU7G,GAAIiN,MAGjCjO,EAAQX,KAAKC,MAAM,WAAasC,EAAMX,GAAK,UAC3CW,EAAMgG,YAAa,EACnBxC,EAASM,QAAQ9D,EAAMiG,cAExB,SAASlH,GACVhC,QAAQC,OAAOgD,EAAOjB,GACtBiB,EAAMuM,SAAU,EAChB/I,EAASS,WAGJT,EAASU,SASlB9F,EAAQmB,UAAU4J,eAAiB,SAASN,GAC1C,GAAI7I,GAAQ/C,IAEZ4L,GAAkB/L,KAAK,SAASiC,GAC9BX,EAAQJ,SAAS,WACf,GAAIgO,GAASQ,CACTzN,GAAKW,OAAS,IAEhBsM,EAAU9O,EAAEgP,UAAUnN,EAAK,GAAI,eAC/BA,EAAKqF,OAAO,EAAG,GACflH,EAAEC,QAAQ4B,EAAM,SAAS0N,GACvBA,EAAiBvP,EAAEoP,UAAUN,EAASS,GACtCD,EAAIxM,EAAMkG,QAAQuG,EAAe9I,IAAIzB,YACjCnF,QAAQ2K,UAAU8E,IACpBtP,EAAEF,OAAOgD,EAAMiG,UAAUuG,GAAIC,WAazCrO,EAAQmB,UAAUmN,iBAAmB,WACnC,GAAIC,GAAS1P,KAAK2P,WAAY,YAAc,aAE5CxO,GAAQE,WAAWmD,KAAKxE,KAAKoC,GAAIsN,OC15BrC,WACE,YAUA,SAAStO,GAAQ2E,EAAWxB,EAASqL,EAAmBC,GACtD7P,KAAK+F,UAAYA,EACjB/F,KAAK8P,SAAWvL,EAChBvE,KAAK+P,mBAAoB,EACzB/P,KAAKgQ,oBAAqB,EAC1BhQ,KAAKmG,UAAY8J,MAAQC,MAAQC,QACjCnQ,KAAKiK,UAAW,EAGsB,kBAA3B2F,GAAkB/P,OAEvBC,QAAQ0J,YAAYqG,IAAUA,IAChC/P,QAAQC,OAAOC,KAAM4P,GACrB5P,KAAKoQ,wBAEPpQ,KAAK0G,IAAM0B,SAASwH,EAAkBlJ,MAItC1G,KAAKyH,QAAQmI,GASjBxO,EAAQP,UAAY,KAAM,WAAY,OAAQ,aAAc,mBAAoB,WAAY,cAAe,SAASC,EAAIC,EAAUP,EAAMQ,EAAUqP,EAAgBpP,EAAUC,GAoB1K,MAnBApB,SAAQC,OAAOqB,GACbkP,OAAQD,EACRvP,GAAIA,EACJC,SAAUA,EACVP,KAAMA,EACNa,WAAY,GAAIJ,GAASD,EAASM,WAAW,aAAe,OAAQN,EAASM,cAC7EiP,QAASzQ,QAAQ0L,KAAKtK,EAAaA,EAAYsP,UAGjDtP,EAAYkC,QAAQvD,KAAK,WACnBqB,EAAYmK,SAASoF,uBACvBrP,EAAQsP,MAAQxP,EAAYmK,SAASoF,sBAEnCvP,EAAYmK,SAASsF,mCACqC,UAA1DzP,EAAYmK,SAASsF,oCACvBvP,EAAQwP,4BAA6B,KAIlCxP,GAOT,KACEtB,QAAQ4B,OAAO,iBAEjB,MAAMC,GACJ7B,QAAQ4B,OAAO,iBAAkB,gBAEnC5B,QAAQ4B,OAAO,iBACZ2G,SAAS,oBACRwI,WAAiB,EACjBC,gBAAiB,EACjBC,QAAiB,EACjBC,OAAiB,EACjBC,WAAiB,MAElBrP,QAAQ,UAAWR,EAAQP,UAS9BO,EAAQ8P,WAAa,SAASC,EAAOC,GACnC,GAAIC,GAAK,GAAIC,QAAOH,EAAO,KACvBI,IAUJ,OARAtR,GAAEC,QAAQD,EAAEuR,KAAKpQ,EAAQsP,OAAQ,SAASe,GACxC,GAAIC,GAAOtQ,EAAQsP,MAAMe,EACrBC,GAAK,GAAGC,OAAON,KAAO,IACnBpR,EAAE2R,SAASR,EAAcK,IAC5BF,EAAQtN,MAAOe,KAAMyM,EAAKpM,YAAaqM,EAAK,GAAIG,MAAOH,EAAK,QAI3DH,GASTnQ,EAAQkB,UAAU2D,cAAgB,SAASnD,GAGzC,QAASgP,KACP,GAAIhN,EAKJ,OAJAA,GAAO7E,EAAE0G,IAAI5D,EAAM+M,SAAShL,KAAK6D,MAAM,KAAM,SAASC,GACpD,MAAO,SAAWA,EAAUC,oBAE9B/D,EAAKqC,OAAO,EAAG,EAAGpE,EAAMgD,WACjBjB,EAAKgE,KAAK,KARnB,GAAI/F,GAAQ/C,KAAMoC,EAAKpC,KAAKoC,EAmB5B,QARItC,QAAQ0J,YAAYxJ,KAAKoC,KAAOU,GAAWA,EAAQiP,WACrD/R,KAAKoC,GAAK0P,IAAc,IAAM9R,KAAK0G,IACnCtE,EAAKpC,KAAKoC,IAERU,GAAWA,EAAQoD,SAAWlG,KAAKgS,UACrC5P,EAAK0P,IAAc,IAAM9R,KAAKgS,SAGzB5P,GASThB,EAAQkB,UAAU2P,QAAU,SAASvL,GACnC,GAA6C/D,GAAzCuP,EAAUlS,KAAK0G,MAAO,EAAK3D,EAAQ/C,IAEnCkS,IAAU9J,SAAS1B,KACrB1G,KAAK0G,IAAM0B,SAAS1B,GACpB1G,KAAKiG,eAAe8L,SAAS,IACzBG,GAAS,GACXA,EAASA,EAAOjN,WACZnF,QAAQ2K,UAAUzK,KAAK8P,SAAS7G,QAAQiJ,MAC1CvP,EAAQ3C,KAAK8P,SAAS7G,QAAQiJ,GAC9BlS,KAAK8P,SAAS7G,QAAQvC,GAAO/D,QACtB3C,MAAK8P,SAAS7G,QAAQiJ,GAG7BjS,EAAEC,SAAS,OAAQ,KAAM,WAAY,SAASiS,GAC5CpP,EAAM+M,SAAS9G,UAAUrG,GAAOwP,GAAQpP,EAAMoP,OAM9CnS,KAAK8P,SAASsC,YAAYpK,gBACuB,SAAjDhI,KAAK8P,SAASsC,YAAYpK,eAAetD,MAC3C1E,KAAK8P,SAASsC,YAAYpK,eAAe0C,YAYjDtJ,EAAQkB,UAAU8N,qBAAuB,WACvC,GAAIrN,GAAQ/C,KACRG,EAAaF,EAAE0G,IAAI5D,EAAM+M,SAASzI,SAASlH,WAAY,QAG3DF,GAAEC,SAAS,OAAQ,KAAM,KAAM,MAAO,YAAa,SAASwE,GAC1DzE,EAAEC,QAAQ6C,EAAM2B,GAAO,SAAS5C,GAC1BA,EAAKkD,MAAQlD,EAAKkD,MAAQlD,EAAKvB,OACjCuB,EAAKxB,KAAOwB,EAAKkD,KAAO,KAAOlD,EAAKvB,MAAQ,IAExCuB,EAAKkD,KAAKvC,OAAS,GAErBX,EAAKuQ,UAAYvQ,EAAKkD,KACflD,EAAKkD,KAAK2D,MAAM,KAAKlG,SAE5BX,EAAKuQ,UAAYpS,EAAEqS,MAAMrS,EAAEsS,KAAKzQ,EAAKkD,KAAK2D,MAAM,QAAQA,MAAM,OAAO6J,QAAQ,IAAK,MAE7E1Q,EAAKvB,QACZuB,EAAKxB,KAAO,IAAMwB,EAAKvB,MAAQ,IAC/BuB,EAAKuQ,UAAYvQ,EAAKvB,MAAMoI,MAAM,KAAK,IAGzC7G,EAAK2Q,MAAQrR,EAAQmP,QAAQzO,EAAKvB,MAAO,IAIrCN,EAAEuD,QAAQrD,EAAY2B,EAAKvB,QAAU,IACvCuB,EAAKuQ,UAAY3M,EAAE,YAW3BtE,EAAQkB,UAAUoQ,iBAAmB,SAAS7I,GAC5C,GAAI9G,GAAQ/C,KAAM2S,KAAaC,EAAQ,EAAGC,EAAQ,CAelD,OAZA5S,GAAEC,SAAS,KAAM,KAAM,OAAQ,SAASwE,GACtCmO,GAAS9P,EAAM2B,GAAO3B,EAAM2B,GAAMjC,OAAS,EAC3CxC,EAAEC,QAAQ6C,EAAM2B,GAAO,SAAS5C,EAAMK,GAChCyQ,EAAQ/I,GACV8I,EAAO1O,KAAKnC,EAAKuQ,WACnBO,QAIAC,EAAQhJ,GACV8I,EAAO1O,KAAKyB,EAAE,mBAAqBmN,EAAQhJ,IAEtC8I,EAAO7J,KAAK,OASrB1H,EAAQkB,UAAUwQ,cAAgB,SAASpO,GACzC,GAAIqO,GAAU,EAKd,OAJI/S,MAAK0E,IAAS1E,KAAK0E,GAAMjC,OAAS,IACpCsQ,EAAU/S,KAAK0E,GAAM,GAAGM,MAAQhF,KAAK0E,GAAM,GAAGnE,OAAS,IAGlDwS,GAST3R,EAAQkB,UAAU0Q,cAAgB,WAChC,GAAIC,GAAkB,CAQtB,OAPAA,GAAkBhT,EAAEqE,QAAQ,KAAM,MAAOrE,EAAEuL,KAAK,SAASoH,EAAOlO,GAC9D,MAAI1E,MAAK0E,GACAkO,EAAQ5S,KAAK0E,GAAMjC,OAEnBmQ,GACR5S,MAAOiT,IAEFjT,KAAKkT,SAAWD,EAAkB,GAQ5C7R,EAAQkB,UAAU6Q,kBAAoB,WACpCnT,KAAKgQ,oBAAqB,GAS5B5O,EAAQkB,UAAU8Q,SAAW,WAC3B,GAAIrQ,GAAQ/C,KACRqT,KACA/P,EAAS,SAASgQ,GAEhB,GADAA,EAAKC,SAAW,uBACC,gCAAbD,EAAK5O,KACPpB,EAAOrD,EAAE2E,KAAK0O,EAAKE,QAAS,SAASC,GACnC,MAAOH,GAAKI,eAAiBD,EAAcE,mBAI1C,IAAI7T,QAAQ8T,QAAQN,EAAKE,SAAU,CACtC,GAAiB,2BAAbF,EAAK5O,MAAgE,IAA3B4O,EAAK,kBAAyB,CAE1E,GAAIO,GAAmB,MAAQP,EAAKzE,MAAM2D,QAAQ,KAAM,6BACxDqB,GAAmBA,EAAiBrB,QAAQ,MAAO,8BAAkC,OACrFzP,EAAM+Q,QACJC,eAAgBT,EAAKU,MACrBlO,QAAS+N,GAGb5T,EAAEC,QAAQoT,EAAKE,QAAS,SAASS,GAC/B3Q,EAAO2Q,SAILnU,SAAQ0J,YAAY8J,EAAKY,eAE3BZ,EAAKY,YAAcZ,EAAKE,QACxBzQ,EAAMgN,mBAAsBuD,EAAKY,YAAY1Q,QAAQ,aAAc,GAEpD,yBAAb8P,EAAK5O,MACP4O,EAAKa,MAAO,EACRpR,EAAMiN,oBAAsB5O,EAAQwP,4BAClC9Q,QAAQ0J,YAAY8J,EAAKc,iBAC3Bd,EAAKc,cAAgBC,SAASC,cAAc,OAC5ChB,EAAKc,cAAcG,UAAYjB,EAAKY,YACpCpU,QAAQI,SAAS,MAAO,OAAQ,UAAW,aAAc,SAAU,SAASsU,GAC1E,GACIC,GACAhG,EACAtM,EAHAuS,EAAWpB,EAAKc,cAAcO,iBAAiB,WAAaH,EAAS,IAIzE,KAAKrS,EAAI,EAAGA,EAAIuS,EAASjS,OAAQN,IAC/BsS,EAAU3U,QAAQ2U,QAAQC,EAASvS,IACnCsM,EAAQgG,EAAQtC,KAAK,UAAYqC,GACjCC,EAAQtC,KAAKqC,EAAQ/F,GACrBgG,EAAQG,WAAW,UAAYJ,KAGnCzR,EAAMgN,mBAAoB,GAE5BuD,EAAKE,QAAUF,EAAKc,cAAcG,WAGlCjB,EAAKE,QAAUF,EAAKY,YAEtBb,EAAMpP,KAAKqP,IAES,yBAAbA,EAAK5O,MACQ,0BAAb4O,EAAK5O,MACQ,yBAAb4O,EAAK5O,MAEK,0BAAb4O,EAAK5O,KACP4O,EAAKC,SAAW,uBACI,yBAAbD,EAAK5O,OACZ4O,EAAKC,SAAW,uBAGlBD,EAAKuB,SAAU,EACfxB,EAAMpP,KAAKqP,KAGXA,EAAKa,MAAO,EACZb,EAAKE,QAAUF,EAAKY,YACpBb,EAAMpP,KAAKqP,IAQrB,OAHItT,MAAKqT,OACP/P,EAAOtD,KAAKqT,OAEPA,GAUTjS,EAAQkB,UAAUwS,iBAAmB,WACnC,GAAI/R,GAAQ/C,IAEZ,OAAOoB,GAAQC,WAAWW,MAAMhC,KAAKiG,gBAAiB,QAAQpG,KAAK,SAASiC,GAE1E,MADAhC,SAAQC,OAAOgD,EAAOjB,GACfV,EAAQC,WAAWW,MAAMe,EAAMkD,eAAeC,SAAS,IAAQ,QAAQrG,KAAK,SAASiC,GAE1F,GAAI1B,GAAWH,EAAE2E,KAAK7B,EAAM+M,SAASzI,SAASlH,WAAY,SAASC,GACjE,MAAO0B,GAAKiT,KAAKC,cAAcxR,QAAQpD,EAASG,UAAW,GAM7D,OAJIH,KACF0B,EAAKiT,KAAO3U,EAASE,MACvBc,EAAQZ,KAAKC,MAAM,cAAgBC,KAAKC,UAAUmB,EAAMlB,OAAW,IACnEd,QAAQC,OAAOgD,EAAMoD,SAAUrE,GACxBA,EAAKmT,UAUlB7T,EAAQkB,UAAU4S,cAAgB,WAChC,MAAO9T,GAAQC,WAAWW,MAAMhC,KAAKiG,gBAAiB,cAUxD7E,EAAQkB,UAAU6S,OAAS,SAAS1D,GAClC,MAAOzR,MAAKoV,gBAAgB,MAAO3D,IAUrCrQ,EAAQkB,UAAU+S,UAAY,SAAS5D,GACrC,MAAOzR,MAAKoV,gBAAgB,SAAU3D,IAWxCrQ,EAAQkB,UAAU8S,gBAAkB,SAASlI,EAAWuE,GACtD,GAAI3P,IACFoL,UAAWA,EACXC,SAAUnN,KAAK0G,KACfyF,MAAOsF,EAGT,IAAIA,EACF,MAAOrQ,GAAQC,WAAWmD,KAAKxE,KAAK8P,SAAS5G,MAAO,mBAAoBpH,IAW5EV,EAAQkB,UAAUgT,YAAc,SAASxQ,EAAM4K,EAAQ5N,GACrD,GAAIiB,GAAQ/C,IACZoB,GAAQC,WAAWmD,MAAMxE,KAAKiG,gBAAiBnB,GAAMgE,KAAK,KAAM4G,EAAQ5N,GAAMjC,KAAK,SAASiC,GAC1FV,EAAQL,SAAS,WACfgC,EAAMwS,eAUZnU,EAAQkB,UAAUkT,SAAW,WAE3B,MADAxV,MAAKyV,iBAAmB,EACjBrU,EAAQC,WAAWmD,KAAKxE,KAAKiG,gBAAiB,YASvD7E,EAAQkB,UAAUoT,kBAAoB,SAASnI,GAC7C,GAAImC,GAAS,6BAA+BnC,EACxCxK,EAAQ/C,IACZoB,GAAQC,WAAWmD,KAAKxE,KAAKiG,eAAeC,SAAS,IAAQwJ,GAAQ7P,KAAK,SAASiC,GACjFV,EAAQL,SAAS,WACfgC,EAAMoD,SAASwP,gBAAkB1V,EAAE+J,OAAOjH,EAAMoD,SAASwP,gBAAiB,SAASC,GACjF,MAAOA,GAAWrI,UAAYA,SAYtCnM,EAAQkB,UAAUuT,WAAa,WAC7B,GAAI9S,GAAQ/C,KACR0P,EAAS,oBAKb,OAHI1P,MAAK8V,YACPpG,EAAS,wBAEJtO,EAAQC,WAAWmD,KAAKxE,KAAKiG,gBAAiByJ,GAAQ7P,KAAK,SAASiC,GACzEV,EAAQL,SAAS,WACfgC,EAAM+S,WAAa/S,EAAM+S,eAW/B1U,EAAQkB,UAAUyG,WAAa,WAC7B,MAAO/I,MAAK+V,SAAW3U,EAAQkP,OAAOS,SAUxC3P,EAAQkB,UAAUiT,QAAU,SAASzS,GACnC,GAAkB8M,GAAd7M,EAAQ/C,IAEZ,OAAI8C,IAAWA,EAAQkT,UAAYhW,KAAKiW,oBACjCjW,KAAK8N,QACR1M,EAAQC,WAAWW,MAAMhC,KAAKiG,gBAAiB,mBAAmBpG,KAAK,WACrEuB,EAAQL,SAAS,WACfgC,EAAM+K,QAAS,EACf/K,EAAM+M,SAASjF,kBAId7K,OAGT4P,EAAoBxO,EAAQC,WAAWW,MAAMhC,KAAKiG,cAAcnD,GAAU,QAEnE9C,KAAKyH,QAAQmI,KAStBxO,EAAQkB,UAAU4T,OAAS,WACzB,MAAOlW,MAAKmW,UAAU,UASxB/U,EAAQkB,UAAU8T,UAAY,WAC5B,MAAOpW,MAAKmW,UAAU,aASxB/U,EAAQkB,UAAU+T,SAAW,WAC3B,MAAOrW,MAAKmW,UAAU,YAgBxB/U,EAAQkB,UAAU6T,UAAY,SAASzG,GACrC,GAAI3M,GAAQ/C,IAGZ,OAAOoB,GAAQC,WAAWW,MAAMhC,KAAKiG,gBAAiByJ,GAAQ7P,KAAK,SAASiC,GAC1E,GAAIyC,GAASuB,CAKb,OAJA1E,GAAQZ,KAAKC,MAAM,OAASiP,EAAS,KAAOhP,KAAKC,UAAUmB,EAAMlB,OAAW,IAC5E2D,EAAUxB,EAAM+M,SAASzI,SAASxC,kBAAkB/C,EAAKkE,aACzDF,EAAU,GAAI1E,GAAQU,EAAKiE,UAAWxB,EAASzC,GAExCV,EAAQC,WAAWW,MAAM8D,EAAQG,eAAeC,SAAS,IAAQ,QAAQrG,KAAK,SAASiC,GAM5F,MALAV,GAAQZ,KAAKC,MAAM,OAASiP,EAAS,KAAOhP,KAAKC,UAAUmB,EAAMlB,OAAW,GAAK,kBAAoBmC,EAAM2D,KAC3G5G,QAAQC,OAAO+F,EAAQK,SAAUrE,GAGjCgE,EAAQwQ,QAAUxQ,QAAS/C,EAAO2M,OAAQA,GACnC5J,OAWb1E,EAAQkB,UAAUmK,MAAQ,WACxB,GAAI1J,GAAQ/C,KACR8B,EAAO9B,KAAKmG,QAIhB,OAFA/E,GAAQZ,KAAKC,MAAM,UAAYC,KAAKC,UAAUmB,EAAMlB,OAAW,IAExDQ,EAAQC,WAAWsN,KAAK3O,KAAKiG,eAAeC,SAAS,IAAQpE,GAAMjC,KAAK,SAAS+O,GACtFxN,EAAQZ,KAAKC,MAAM,UAAYC,KAAKC,UAAUiO,EAAUhO,OAAW,IACnEmC,EAAMkP,QAAQrD,EAASlI,KACvB3D,EAAMwS,UACNxS,EAAMqD,OAAQ,KAUlBhF,EAAQkB,UAAUiU,MAAQ,WACxB,GAAIxT,GAAQ/C,KACR8B,EAAOhC,QAAQqL,KAAKnL,KAAKmG,SAI7B,OAFA/E,GAAQZ,KAAKC,MAAM,UAAYC,KAAKC,UAAUmB,EAAMlB,OAAW,IAExDQ,EAAQC,WAAWmD,KAAKxE,KAAKiG,eAAeC,SAAS,IAAQ,OAAQpE,GAAMjC,KAAK,SAAS+O,GAC9F,MAAuB,WAAnBA,EAAS7H,QACPjH,QAAQ2K,UAAU1H,EAAMuT,UACtBvT,EAAMuT,OAAO5G,OAAO8G,WAAW,SACjCzT,EAAMuT,OAAOxQ,QAAQ2Q,YAAa,EACJ,WAAvB1T,EAAMuT,OAAO5G,SACpB3M,EAAMuT,OAAOxQ,QAAQ4Q,aAAc,IAEhC9H,GAGAxN,EAAQN,GAAGkG,OAAO4H,EAAS9M,SAWxCV,EAAQkB,UAAUmF,QAAU,SAASmI,GACnC,GAAI7M,GAAQ/C,IAyBZ,OAtBAA,MAAK+V,QAAU3U,EAAQkP,OAAOQ,gBAC9B1P,EAAQL,SAAS,WACXgC,EAAMgT,SAAW3U,EAAQkP,OAAOU,SAClCjO,EAAMgT,QAAU3U,EAAQkP,OAAOS,UAChC3P,EAAQkP,OAAOW,YAGlBjR,KAAKiW,mBAAqBrG,EAAkB/P,KAAK,SAASiC,GAMxD,MAJqB,KAAjBiB,EAAM+K,SACR/K,EAAM+K,QAAS,EACf/K,EAAM+M,SAASjF,eAEVzJ,EAAQL,SAAS,WAKtB,MAJAjB,SAAQC,OAAOgD,EAAOjB,GACtBiB,EAAMqN,uBACNrN,EAAMiN,oBAAqB,EAC3BjN,EAAMgT,QAAU3U,EAAQkP,OAAOU,OACxBjO,MAIJ/C,KAAKiW,oBASd7U,EAAQkB,UAAUoH,MAAQ,SAAS5G,GACjC,GAAIgD,MACA6Q,EAAoB7T,GAAWA,EAAQ6T,iBAO3C,OANA7W,SAAQI,QAAQF,KAAM,SAASyO,EAAOC,IACzB,eAAPA,GAAkC,KAAVA,EAAI,IAAaiI,KAC3C7Q,EAAQ4I,GAAOD,KAIZ3I,GAST1E,EAAQkB,UAAUkL,SAAW,WAC3B,GAAI1L,GAAMgB,CAKV,OAHAhB,IAAS6J,MAAO3L,KAAK0G,MACrB5D,GAAYyK,SAAUvN,KAAK+L,QAAU,QAE9B3K,EAAQC,WAAWmM,SAASxN,KAAK8P,SAAS1N,GAAI,eAAgBN,EAAMgB,IAS7E1B,EAAQkB,UAAUsU,oBAAsB,WACtC,GAAI9T,EAIJ,OAFAA,IAAYyK,SAAU7H,EAAE,eAAiB,IAAM1F,KAAK0G,IAAM,QAEnDtF,EAAQC,WAAWmM,SAASxN,KAAKiG,gBAAiB,qBAAsB,KAAMnD,OC7tBzF,WACE,YAOA,SAAS+T,GAAexS,GACtBrE,KAAKqH,SAAWhD,EAQlBwS,EAAehW,UAAY,KAAM,WAAY,OAAQ,aAAc,WAAY,UAAW,UAAW,oBAAqB,SAASC,EAAIC,EAAUP,EAAMQ,EAAUC,EAAUE,EAASC,EAASuG,GAW3L,MAVA7H,SAAQC,OAAO8W,GACb/V,GAAIA,EACJC,SAAUA,EACVP,KAAMA,EACNa,WAAY,GAAIJ,GAASD,EAASM,WAAW,aAAe,OAAQN,EAASM,cAC7EG,SAAUL,EACV4G,eAAgB,KAChBL,QAASA,IAGJkP,GAOT,KACE/W,QAAQ4B,OAAO,iBAEjB,MAAMC,GACJ7B,QAAQ4B,OAAO,iBAAkB,gBAEnC5B,QAAQ4B,OAAO,iBACZ2G,SAAS,qBACRC,UAAW,GACXC,KAAM,MAEP3G,QAAQ,iBAAkBiV,EAAehW,UAQ5CgW,EAAe5Q,cAAgB,SAASF,GACtC,OAAQA,EAAW,WAAW+C,KAAK,MASrC+N,EAAevU,UAAUgF,KAAO,SAASxF,GACvC9B,KAAK+I,YAAa,EAClB/I,KAAKgD,cACLhD,KAAKiJ,WACLnJ,QAAQC,OAAOC,KAAM8B,GACrB9B,KAAKoC,GAAKpC,KAAKkJ,OAGjB2N,EAAevU,UAAUwU,aAAe,SAAShV,GAC/C9B,KAAKgD,WAAalB,EAElB7B,EAAEC,QAAQF,KAAKgD,WAAY,SAASuB,GAClCA,EAAQyE,aACRzE,EAAQ0E,cAIZ4N,EAAevU,UAAUyU,YAAc,SAAS9L,EAAO+L,GACrD,GAAIjU,GAAQ/C,KACR2R,EAASkF,EAAe/V,GAAGiD,MAE/B/D,MAAK+I,YAAa,EAElB9I,EAAEC,QAAQF,KAAKgD,WAAY,SAASuB,GAClCoN,EAASA,EAAO9R,KAAK,WACnB,GAAIkD,EAAMgG,WAER,MADA8N,GAAerW,KAAKC,MAAM,qBAAuB8D,EAAQO,MAClDP,EAAQmG,SAAU5C,KAAM,OAAQC,KAAK,EAAOkD,MAAOA,GAAQ+L,OAKxErF,EAAOsF,QAAQ,WACblU,EAAMgG,YAAa,KAIvB8N,EAAevU,UAAU4U,WAAa,WACpCL,EAAerW,KAAKC,MAAM,sBAC1BT,KAAK+I,YAAa,GAQpB8N,EAAevU,UAAUqH,aAAe,aASxCkN,EAAevU,UAAU6U,qBAAuB,WAC9ClX,EAAEC,QAAQF,KAAKgD,WAAY,SAASuB,SAC3BA,GAAQ8F,mBAUnBwM,EAAevU,UAAUkI,mBAAqB,WAC5C,MAAO1K,SAAQ2K,UAAUxK,EAAE2E,KAAK5E,KAAKgD,WAAY,SAASuB,GACxD,MAAOzE,SAAQ2K,UAAUlG,EAAQ8F,qBAYrCwM,EAAevU,UAAU6H,kBAAoB,SAASC,EAAWpE,GAC/D,MAAOlG,SAAQ2K,UAAUxK,EAAE2E,KAAK5E,KAAKgD,WAAY,SAASuB,GACxD,MAAOA,GAAQO,MAAQkB,GAAezB,EAAQ8F,iBAAmBD,MAUrEyM,EAAevU,UAAUC,UAAY,WACnC,GAAI6U,GAAM,CAEV,OAAKtX,SAAQ2K,UAAUzK,KAAKgD,aAG5B/C,EAAEC,QAAQF,KAAKgD,WAAY,SAASuB,GAClC6S,GAAO7S,EAAQyE,UAAUvG,SAGpB2U,GANEA,GAeXP,EAAevU,UAAUI,eAAiB,SAASC,GACjD,GAAIR,GAAGoN,EAAG8H,EAAG9S,EAASuB,CAEtB,IAAIhG,QAAQ2K,UAAUzK,KAAKgD,aAAeL,GAAS,EAEjD,IADAR,EAAI,EACCoN,EAAI,EAAGA,EAAIvP,KAAKgD,WAAWP,OAAQ8M,IAEtC,IADAhL,EAAUvE,KAAKgD,WAAWuM,GACrB8H,EAAI,EAAGA,EAAI9S,EAAQyE,UAAUvG,OAAQN,IAAKkV,IAE7C,GADAvR,EAAUvB,EAAQyE,UAAUqO,GACxBlV,GAAKQ,GACH4B,EAAQuF,aAAahE,EAAQY,KAC/B,MAAOZ,EAMjB,OAAO,OAST+Q,EAAevU,UAAU4G,IAAM,WAC7B,MAAO2N,GAAe5Q,cAAcjG,KAAKqH,SAASjF,KASpDyU,EAAevU,UAAUyH,kBAAoB,WAE3C,MAAO9J,GAAEqX,UAAUtX,KAAKgD,WAAY,SAASuU,EAAahT,GACxDgT,EAAYhT,EAAQnC,IAAMmC,EAAQwF,0BAUtC8M,EAAevU,UAAU4H,eAAiB,WACxC,MAAOjK,GAAEuX,IAAIvX,EAAEgP,UAAUjP,KAAKgD,WAAY,oBAY5C6T,EAAevU,UAAU0K,cAAgB,SAASuK,EAAapL,EAAOe,GACpE,GAAIpL,IACFqK,MAAOA,EACPe,UAAWA,GAETuK,KACAC,IAWJ,OATAzX,GAAEC,QAAQqX,EAAa,SAAStK,EAAU7K,GACxC,GAAI6K,EAASxK,OAAS,EAAG,CACvB,GAAIkJ,GAAO1L,EAAE0G,IAAIsG,EAAU,MAC3BwK,GAAYxT,KAAKgJ,EACjB,IAAIhG,GAAU4P,EAAexV,WAAWmD,KAAKpC,EAAI,mBAAoBnC,EAAE0X,OAAO7V,GAAOqL,QAASxB,IAC9F+L,GAASzT,KAAKgD,MAIX4P,EAAe/V,GAAGoD,IAAIwT,GAAU7X,KAAK,WAC1C,MAAOI,GAAE2X,QAAQH,MAWrBZ,EAAevU,UAAU4L,gBAAkB,SAASqJ,GAClD,GAAIG,KAUJ,OARAzX,GAAEC,QAAQqX,EAAa,SAAStK,EAAU7K,GACxC,GAAI6K,EAASxK,OAAS,EAAG,CACvB,GAAI8B,GAAU0I,EAAS,GAAG6C,SACtB7I,EAAU1C,EAAQ2J,gBAAgBjB,EACtCyK,GAASzT,KAAKgD,MAIX4P,EAAe/V,GAAGoD,IAAIwT,IAU/Bb,EAAevU,UAAU6L,4BAA8B,SAASoJ,GAC9D,GAAIG,KAUJ,OARAzX,GAAEC,QAAQqX,EAAa,SAAStK,EAAU7K,GACxC,GAAI6K,EAASxK,OAAS,EAAG,CACvB,GAAI8B,GAAU0I,EAAS,GAAG6C,SACtB7I,EAAU1C,EAAQ4J,4BAA4BlB,EAClDyK,GAASzT,KAAKgD,MAIX4P,EAAe/V,GAAGoD,IAAIwT,IAW/Bb,EAAevU,UAAU+L,cAAgB,SAASkJ,EAAajJ,GAC7D,GAAIoJ,KAUJ,OARAzX,GAAEC,QAAQqX,EAAa,SAAStK,EAAU7K,GACxC,GAAI6K,EAASxK,OAAS,EAAG,CACvB,GAAI8B,GAAU0I,EAAS,GAAG6C,SACtB7I,EAAU1C,EAAQ8J,cAAcpB,EAAUqB,EAC9CoJ,GAASzT,KAAKgD,MAIX4P,EAAe/V,GAAGoD,IAAIwT,IAW/Bb,EAAevU,UAAUiM,cAAgB,SAASgJ,EAAajJ,GAC7D,GAAIoJ,KAUJ,OARAzX,GAAEC,QAAQqX,EAAa,SAAStK,EAAU7K,GACxC,GAAI6K,EAASxK,OAAS,EAAG,CACvB,GAAI8B,GAAU0I,EAAS,GAAG6C,SACtB7I,EAAU1C,EAAQgK,cAActB,EAAUqB,EAC9CoJ,GAASzT,KAAKgD,MAIX4P,EAAe/V,GAAGoD,IAAIwT,OCxVjC,WACE,YAMA,SAASG,GAAkBC,EAASC,EAAQhX,EAAUD,EAAIkX,EAAQC,EAAWC,EAAUC,EAAeC,EAAcC,EAAcC,EAAWC,EAAiBC,EAAOC,EAAQ9Y,EAASwB,GAuDpL,QAASuX,GAAiBlH,GACxBA,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAKhJ,EAAE,iBACPL,YAAaK,EAAE,UACfkT,SAAUC,KAEZrH,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAKhJ,EAAE,kBACPL,YAAaK,EAAE,uBACfkT,SAAUE,KAEZtH,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAKhJ,EAAE,eACPL,YAAaK,EAAE,sCACfkT,SAAUG,KAEZvH,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAK,QACLrJ,YAAaK,EAAE,eACfkT,SAAUI,KAEZxH,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAK,cACLrJ,YAAaK,EAAE,yBACfkT,SAAUI,KAEZxH,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAK,KACLrJ,YAAaK,EAAE,kBACfkT,SAAUK,EACVC,gBAAiB,mBAEnB1H,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAK,OACLrJ,YAAaK,EAAE,sBACfkT,SAAUO,EACVD,gBAAiB,mBAEnB1H,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAK,WACLrJ,YAAaK,EAAE,8BACfkT,SAAUQ,EACVF,gBAAiB,mBAEnB1H,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAK,aACLrJ,YAAaK,EAAE,kCACfkT,SAAUS,EACVH,gBAAiB,mBAEnB1H,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAK,YACLrJ,YAAaK,EAAE,qCACfkT,SAAUU,KAIZrZ,EAAEC,QAAQsR,EAAM,SAAS9C,GACvB4J,EAAUiB,eAAe7K,KAI7B,QAAS8K,GAAqBC,GAC5B,MAAOC,GAAG1R,eAAe4E,WAG3B,QAAS9E,GAAK6R,GACZD,EAAG1R,eAAe0C,SAAU5C,KAAM6R,IAGpC,QAASC,GAASD,GAChB,MAAOxY,GAAQ0G,OAAOC,MAAQ6R,EAGhC,QAASd,KACPa,EAAGG,KAAKlI,QAAS,EACjB6G,EAAM,UAGR,QAASsB,KACPJ,EAAGG,KAAKlI,QAAS,EACjB+H,EAAG1R,eAAe0C,UAAU7K,KAAK,WAC3B6Z,EAAG1R,eAAeqC,iBACpBtJ,EAAS,WACP2Y,EAAG1R,eAAegH,UAAY0K,EAAG1R,eAAeiB,QAAQyQ,EAAG1R,eAAeqC,qBAMlF,QAASyO,GAAWiB,GAClB,GAAIjU,EAEkB,QAAlBkU,IACFlU,EAAU4T,EAAGrV,QAAQwB,cACrBmU,EAAgB/B,EACbgC,MACC1N,OAAQzM,QAAQ2U,QAAQJ,SAAS6F,MACjCC,YAAaJ,EACbK,qBAAqB,EACrBC,eAAe,EACfC,YAAa,gBACbC,WAAY,0BACZC,aAAc,SACdC,QACErC,aAAcsB,EAAGrV,QACjBqW,aAAc5U,EACd6U,sBAGH1D,QAAQ,WACP+C,EAAgB,QAQxB,QAASf,GAAac,GACpB,GAAIpX,GAAQ+W,EAAG1R,eAAeuC,uBAkB9B,OAhBIzK,SAAQ2K,UAAU9H,IACpBA,IACI+W,EAAG1R,eAAegH,UAAY,GAChC0K,EAAG1R,eAAegH,cAIpBrM,EAAQ+W,EAAG1R,eAAezF,YAAc,EACxCmX,EAAG1R,eAAegH,UAAY0K,EAAG1R,eAAezF,aAG9CI,GAAQ,GACViY,EAAclB,EAAG1R,eAAegB,UAAUrG,IAE5CoX,EAAOc,iBAEAlY,EAMT,QAASwW,GAAiBY,GACxB,GAAIpX,GAAQ+W,EAAG1R,eAAeuC,uBAkB9B,OAhBIzK,SAAQ2K,UAAU9H,IACpBA,IACI+W,EAAG1R,eAAegH,UAAY0K,EAAG1R,eAAezF,aAClDmX,EAAG1R,eAAegH,aAIpBrM,EAAQ,EAENA,EAAQ+W,EAAG1R,eAAezF,YAC5BqY,EAAclB,EAAG1R,eAAegB,UAAUrG,IAE1CA,GAAQ,EAEVoX,EAAOc,iBAEAlY,EAGT,QAASyW,GAA2BW,GAClC,GAAIpX,EAEA+W,GAAG1R,eAAewC,uBACpB7H,EAAQsW,EAAac,GACjBpX,GAAS,GACXqW,EAAuBe,EAAQL,EAAG1R,eAAegB,UAAUrG,KAIjE,QAAS0W,GAA+BU,GACtC,GAAIpX,EAEA+W,GAAG1R,eAAewC,uBACpB7H,EAAQwW,EAAiBY,GACrBpX,GAAS,GACXqW,EAAuBe,EAAQL,EAAG1R,eAAegB,UAAUrG,KAIjE,QAASiY,GAAc9U,GACjB3E,EAAQ+G,aACV8P,EAAO8C,GAAG,uCAAwCC,UAAWxC,EAAgBzS,EAAQgK,SAAShL,MAAOsF,UAAWtE,EAAQY,MAExHsR,EAAO8C,GAAG,gCAAiC1Q,UAAWtE,EAAQY,MAGlE,QAASsS,GAAuBe,EAAQjU,GACtC,GACIkI,GAAegN,EAAmB7Y,EADlCmM,EAASoL,EAAG1R,cAShB,IANKlC,IACHA,EAAUwI,EAAOhE,oBACnBxE,EAAQmE,UAAYnE,EAAQmE,SAC5ByP,EAAGG,KAAKoB,UAAYnV,EAAQmE,SAAU,GAAI,EAGtC8P,EAAOmB,UAAY5M,EAAOpE,iBAAmB,EAAG,CAIlD,IAHA8D,EAAgBM,EAAOrF,QAAQnD,EAAQY,KAEvCsU,EAAoBhN,EAAgB,EAC7BgN,GAAqB,IACpB1M,EAAOtF,UAAUgS,GAAmB/Q,UAC1C+Q,GACF,IAAIA,EAAoB,EAGtB,IADAA,EAAoBhN,EAAgB,EAC7BgN,EAAoB1M,EAAO/L,cAC1B+L,EAAOtF,UAAUgS,GAAmB/Q,UAC1C+Q,GAEJ,IAAIA,GAAqB,GAAKA,EAAoB1M,EAAO/L,YACvD,IAAKJ,EAAImD,KAAK0G,IAAIgC,EAAegN,GAC5B7Y,GAAKmD,KAAKuE,IAAImE,EAAegN,GAC7B7Y,IACHmM,EAAOtF,UAAU7G,GAAG8H,UAAW,EAIrC8P,EAAOc,iBACPd,EAAOoB,kBAOT,QAASC,KACP,MAAIja,GAAQ+G,aACHwR,EAAG1R,eAAehF,YAEjB0W,EAAG1R,gBAKf,QAASqT,GAAiBvV,EAASnD,GACjC,GAAI2Y,GAAaC,EAAiBC,EAAY7Y,CAC9C+W,GAAGG,KAAKoB,SAAWvB,EAAG1R,eAAekC,iBACjCpE,GAEEnD,EAAQ,IACV6Y,GAAa,EACbF,EAAc5B,EAAG1R,eAAegB,UAAUwS,IAExC7Y,EAAQ+W,EAAG1R,eAAegB,UAAUvG,SACtC8Y,EAAkB7B,EAAG1R,eAAegB,UAAUrG,IAC5C2Y,EACEA,EAAYxN,QAAUyN,IAAoBA,EAAgBzN,SAC5D0N,EAAY7Y,EACZ2Y,EAAcC,GAGTA,IACPC,EAAY7Y,EACZ2Y,EAAcC,GAEZD,GACF5B,EAAG1R,eAAegH,UAAYwM,EAC9BxD,EAAO8C,GAAG,gCAAkC1Q,UAAWkR,EAAY5U,OAGnEsR,EAAO8C,GAAG,yBAIZ/Z,EAAS,WACP0a,QAAQC,KAAK,iBACb1D,EAAO8C,GAAG,0BAKhB,QAASxB,GAA8BS,GACrC,GAAI1M,GAAmBqM,EAAG1R,eAAe+B,mBAEnB,QAAlBiQ,GAA0B/Z,EAAE0b,KAAKtO,GAAoB,IACvD2M,EAAgBvB,EAAOmD,QAAQlW,EAAE,gBACFA,EAAE,2DACAmW,GAAInW,EAAE,YACtC7F,KAAK,WACJ,GAAIic,GAAwBpC,EAAG1R,eAAewC,oBAC9CkP,GAAG1R,eAAekG,gBAAgBb,GAAkBxN,KAAK,SAAS8C,GAC5DxB,EAAQ+G,aAGN4T,GACF9D,EAAO8C,GAAG,+BAIZO,EAAiBS,EAAuBnZ,IAEzC,SAASiM,GACVoL,EAAgBvB,EAAOmD,QAAQlW,EAAE,WACFA,EAAE,oGACAmW,GAAInW,EAAE,YACpC7F,KAAK,WACJ6Z,EAAG1R,eAAekG,gBAAgBb,GAAoB0O,cAAc,IAAQlc,KAAK,SAAS8C,GACpFxB,EAAQ+G,aAGN4T,GACF9D,EAAO8C,GAAG,+BAIZO,EAAiBS,EAAuBnZ,WAMnDsU,QAAQ,WACP+C,EAAgB,QAGpBD,EAAOc,iBAGT,QAAS9B,KACP,GAAIiD,GAAsBtC,EAAG1R,eAAewC,qBACxC6C,EAAmBqM,EAAG1R,eAAe+B,mBACR,KAA7B9J,EAAE0b,KAAKtO,IAA2B2O,IACpC3O,GAAoBqM,EAAG1R,eAAesC,qBACpCrK,EAAE0b,KAAKtO,GAAoB,GAC7BqM,EAAG1R,eAAemG,4BAA4Bd,GAAkBxN,KAAK,WACnE,GAAIoc,GAAY,IAAMvC,EAAGrV,QAAQjC,GAAK,cACR,SAA1BsX,EAAG1R,eAAetD,OACpBuX,EAAY,IAAMvC,EAAGrV,QAAQI,kBAAkB,QAAQrC;AAEzDsX,EAAG1R,eAAeuG,cAAclB,EAAkB4O,GAAWpc,KAAK,SAAS8C,GACrExB,EAAQ+G,aAGN8T,GACFhE,EAAO8C,GAAG,+BAIZO,EAAiBW,EAAqBrZ,OAMhD,QAASuZ,GAAqBD,GAC5B,GAAI5O,GAAmBqM,EAAG1R,eAAe+B,mBACrC9J,GAAE0b,KAAKtO,GAAoB,GAC7BqM,EAAG1R,eAAeqG,cAAchB,EAAkB,IAAM4O,GAAWpc,KAAK,WACtEqY,EAAS+B,KACP/B,EAASiE,SACN3I,QAAQ9N,EAAE,yBAA0BgU,EAAG1R,eAAekC,mBACtDkS,SAAS,aACTC,UAAU,QAIrB,QAASC,GAAqBL,GAC5B,GAAID,GAAsBtC,EAAG1R,eAAewC,qBACxC6C,EAAmBqM,EAAG1R,eAAe+B,oBACrC6I,EAAQ8G,EAAG1R,eAAekC,gBAC1BjK,GAAE0b,KAAKtO,GAAoB,GAC7BqM,EAAG1R,eAAeuG,cAAclB,EAAkB,IAAM4O,GAAWpc,KAAK,SAAS8C,GAC/EuV,EAAS+B,KACP/B,EAASiE,SACN3I,QAAQ9N,EAAE,wBAAyBkN,IACnCwJ,SAAS,aACTC,UAAU,MACXlb,EAAQ+G,aAGN8T,GACFhE,EAAO8C,GAAG,+BAIZO,EAAiBW,EAAqBrZ,KAK9C,QAAS4Z,KACP,GAAI3J,GAAQ,CACZ3S,GAAEC,QAAQkb,IAAqB,SAAS9M,GAEtC,IADA,GAAInM,GAAI,EAAGM,EAAS6L,EAAOtF,UAAUvG,OAC9BN,EAAIM,EAAQN,IACjBmM,EAAOtF,UAAU7G,GAAG8H,UAAW,CACjC2I,IAASnQ,IAEXiX,EAAGG,KAAKoB,SAAWrI,EAGrB,QAAS4J,KACPvc,EAAEC,QAAQkb,IAAqB,SAAS9M,GACtCrO,EAAEC,QAAQoO,EAAOtF,UAAW,SAASlD,GACnCA,EAAQmE,UAAW,MAGvByP,EAAGG,KAAKoB,SAAW,EAGrB,QAASwB,KACP,GAAIpP,GAAmBqM,EAAG1R,eAAe+B,mBACrC9J,GAAE0b,KAAKtO,GAAoB,GAC7BqM,EAAG1R,eAAegF,cAAcK,EAAkB,YAAa,OAAOxN,KAAK,SAASoN,GAClFhN,EAAEC,QAAQ+M,EAAU,SAASnH,GAC3BA,EAAQgQ,WAAY,MAK5B,QAAS4G,KACP,GAAIrP,GAAmBqM,EAAG1R,eAAe+B,mBACrC9J,GAAE0b,KAAKtO,GAAoB,GAC7BqM,EAAG1R,eAAegF,cAAcK,EAAkB,OAAQ,UAAUxN,KAAK,SAASoN,GAChFhN,EAAEC,QAAQ+M,EAAU,SAASnH,GACvBA,EAAQgI,QACVhI,EAAQgK,SAASjF,cACnB/E,EAAQgI,QAAS,MAMzB,QAAS6O,KACP,GAAItP,GAAmBqM,EAAG1R,eAAe+B,mBACrC9J,GAAE0b,KAAKtO,GAAoB,GAC7BqM,EAAG1R,eAAegF,cAAcK,EAAkB,OAAQ,OAAOxN,KAAK,SAASoN,GAC7EhN,EAAEC,QAAQ+M,EAAU,SAASnH,GACtBA,EAAQgI,QACXhI,EAAQgK,SAASjF,cACnB/E,EAAQgI,QAAS,MA5ezB,GAAI4L,GAAK1Z,KAAMga,EAAgB,KAC3B4C,EAAqB9c,QAAQ2U,QAAQqD,EAAQzD,UAAUzP,KAAK,SAASuN,KAAK,eAAiB,OAC3F0K,IAGJ/E,GAAQgF,mBAAqBpD,EAE7BA,EAAGqD,QAAU5b,EACbuY,EAAGsD,SAAW7E,EACduB,EAAGrV,QAAU+T,EACbsB,EAAG1R,eAAiBqQ,EACpBqB,EAAGkB,cAAgBA,EACnBlB,EAAGV,uBAAyBA,EAC5BU,EAAG5R,KAAOA,EACV4R,EAAGE,SAAWA,EACdF,EAAGb,WAAaA,EAChBa,EAAGI,aAAeA,EAClBJ,EAAGZ,WAAaA,EAChBY,EAAGG,MAASlI,QAAQ,EAAOsJ,SAAU,GACrCvB,EAAGJ,8BAAgCA,EACnCI,EAAGX,2BAA6BA,EAChCW,EAAGwC,qBAAuBA,EAC1BxC,EAAG4C,qBAAuBA,EAC1B5C,EAAG+C,8BAAgCA,EACnC/C,EAAGgD,6BAA+BA,EAClChD,EAAGiD,2BAA6BA,EAChCjD,EAAG6C,UAAYA,EACf7C,EAAG8C,iBAAmBA,EAGtBnE,EAAa1O,eAEb+O,EAAiBmE,GAGjB/c,QAAQ2U,QAAQqD,GAASmF,GAAG,eAAgBzD,GAC5CzB,EAAOmF,IAAI,WAAY,WACrBpd,QAAQ2U,QAAQqD,GAASqF,IAAI,eAAgB3D,GAE7CvZ,EAAEC,QAAQ2c,EAAS,SAASnO,GAC1B4J,EAAU8E,iBAAiB1O,OAK/BqJ,EAAOsF,OAAO,WAAa,MAAO3D,GAAG1R,eAAe6C,aAAgB,SAASA,GAC3E,GAAIyS,GAAQV,EAAqB,KAC7B/R,KACFyS,GAAS,IAAMzS,EAAc,MAC/ByS,GAAS5D,EAAG1R,eAAehD,KAC3B8S,EAAQzD,SAASiJ,MAAQA,IA0c7B,QAASC,GAA2CC,GASlD,MARAA,GAAU,GAAGjD,WAAWjY,UAAUmb,YAAc,WAGL,gBAArCzd,KAAK0d,SAASnR,SAAS4F,KAAK,MAC9BnS,KAAK2d,aAEL3d,KAAK4d,SAAS,IAEXJ,EAvgBT3F,EAAkBgG,SAAW,UAAW,SAAU,WAAY,KAAM,SAAU,YAAa,WAAY,gBAAiB,eAAgB,eAAgB,YAAa,kBAAmB,UAAW,SAAU,UAAW,WAsfxN/d,QACG4B,OAAO,qCACPoc,UAAU,oCAAqCP,GAKlDA,EAA2CM,SAAW,aAatD/d,QACG4B,OAAO,iBACP6Y,WAAW,oBAAqB1C,MClhBrC,WACE,YAMA,SAASkG,GAAoBhG,EAAQC,EAAQjX,EAAU+W,EAASG,EAAWC,EAAU8F,EAAUC,EAAYC,EAAY1F,EAAOD,EAAiBE,EAAQzX,EAAUsX,EAAW3Y,EAASwB,EAAS0V,EAAgBsH,EAAMjd,EAAaiX,GAkE/N,QAASO,GAAiBlH,GACxBA,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAK,YACLrJ,YAAaK,EAAE,qCACfkT,SAAU,WACJzX,EAAQ6G,iBAAmB7G,EAAQ6G,eAAewC,sBACpD4T,EAAcjd,EAAQ6G,oBAK5B/H,EAAEC,QAAQsR,EAAM,SAAS9C,GACvB4J,EAAUiB,eAAe7K,KAI7B,QAAS2P,GAAmBvZ,GAC1B4U,EAAG4E,uBAAwB,EAC3B5E,EAAG/H,OAAOpN,QAAUO,EAEfkZ,EAASE,EAAW,WACvBD,EAAW,QAAQM,QAGvB,QAASC,KACP9E,EAAG4E,uBAAwB,EAC3B5E,EAAGqD,QAAQ7U,cAAe,EAE1B7D,EAAUqV,EAAGsD,SAAS,GACtBzY,EAAUmV,EAAG+E,sBACbzG,EAAO8C,GAAG,wBAA0B/U,UAAW1B,EAAQjC,GAAI2Y,UAAWxC,EAAgBhU,EAAQO,QAGhG,QAAS4Z,KACP,GAAIvd,EAAQ6G,eAAee,WAEzB2Q,EAAGiF,eAAezH,iBAEf,CAEH,GAAI0H,GAAMrb,KACND,EAAS,SAASub,GAChB5e,EAAEC,QAAQ2e,EAAS,SAAS5c,GAC1BsB,EAAUU,KAAKhC,GACXA,EAAEwB,UAAYxB,EAAEwB,SAAShB,OAAS,GACpCa,EAAOrB,EAAEwB,YAKnBiW,GAAGiF,eAAiB,GAAI9H,GAAe6C,EAAGsD,SAAS,IAK9C7b,EAAQ+G,eACXwR,EAAG+E,sBAAwBtd,EAAQ6G,gBAErC7G,EAAQ6G,eAAiB0R,EAAGiF,eAC5Bxd,EAAQ+G,cAAe,EAEnBpI,QAAQ2K,UAAUiP,EAAG/H,OAAOpN,UAC9Bqa,EAAOlF,EAAGsD,SAAS,GAAGnY,kBAAkB6U,EAAG/H,OAAOpN,SAClDhB,EAAUU,KAAK2a,GACXlF,EAAG/H,OAAOmN,YAAcF,EAAKnb,SAAShB,QACxCa,EAAOsb,EAAKnb,WAGdF,EAAYmW,EAAGsD,SAAS,GAAGxa,oBAG7BkX,EAAGiF,eAAe7H,aAAavT,GAC/BmW,EAAGiF,eAAe5H,YAAY2C,EAAG/H,OAAO1G,MAAOyO,EAAG/H,OAAOqF,QACzDgB,EAAO8C,GAAG,+BAAiC/U,UAAW2T,EAAGsD,SAAS,GAAG5a,MAIzE,QAAS2c,GAAeC,GAGtB,MAFAtF,GAAGuF,mBAAqBD,EACxBxG,EAAM,mBACC,EAGT,QAAS0G,GAAeC,GACtB,GAAIA,EAAQ1c,QAAUiX,EAAGuF,mBAAmBxc,OAAQ,CAClD,GAAI2c,GAAI,EAAGC,EAAc3F,EAAGuF,kBAM5B,OALIE,GAAQ3I,WAAW,OACrB4I,EAAI,EACJD,EAAUA,EAAQG,UAAU,GAAGC,QAEjC7F,EAAGuF,mBAAqB,IACf/T,SAAUmU,EAAatU,YAAaoU,EAASK,SAAUJ,IAIpE,QAASK,GAAmBpb,GAC1BA,EAAQlB,WAAakB,EAAQlB,UAC7BkB,EAAQ7B,mBAAoBS,QAAQ,EAAMmB,WAAW,IAIrDrD,EAAS,WACPjB,QAAQ2U,QAAQqD,GAAS4H,eAAe,WACvC,KAGL,QAASC,GAAUtb,GAmBjB,QAASub,GAA8B7H,EAAQE,EAAW4H,EAAmBC,GAgB3E,QAASvB,KACPtG,EAAUnN,SAhBZ,GAAI4O,GAAK1Z,IAET0Z,GAAGzN,SAAU,EACbyN,EAAG1P,QAAWhF,KAAM,IACpB0U,EAAGmG,kBAAoBA,EACvBnG,EAAGrV,QAAU,GAAI1E,IACfyC,GAAI0d,EAAW1d,GACf4C,KAAM8a,EAAW9a,OAEnB0U,EAAG6E,MAAQA,EAEX7E,EAAGrV,QAAQxB,eAAgBI,QAAQ,EAAMiB,KAAK,IAAQrE,KAAK,WACzD6Z,EAAGzN,SAAU,IA/BjBgM,EAAUgC,MACRK,YAAajW,EAAQjC,GAAK,aAC1BmY,WAAYqF,EACZpF,aAAc,gBACdJ,qBAAqB,EACrBC,eAAe,EACfI,QACEoF,kBAAmBA,EACnBC,WAAYzb,KAEb4S,QAAQ,WACP5S,EAAQxB,eAAeI,QAAQ,MAMnC2c,EAA8B/B,SAAW,SAAU,YAAa,oBAAqB,cAuBvF,QAASkC,GAAUC,GACjBvH,EAAOwH,OAAOva,EAAE,iBACFA,EAAE,sCACb7F,KAAK,SAASmF,GACbgb,EAAajb,YAAYib,EAAa5d,GAAI4C,GACvCnF,KAAK,aAEH,SAASiC,EAAMiF,GAChB0R,EAAOyH,MAAMxa,EAAE,sDAAuDV,GACzDU,EAAE5D,EAAK+M,YAK9B,QAASsR,GAAS9b,GAiBhB,QAAS+b,GAA4BrI,EAAQE,EAAWkG,EAAM9Z,GAY5D,QAASgc,GAAWxY,GAClB,MAAOsW,GAAKzT,QAAQ7C,EAAQxD,EAAQuC,WAGtC,QAAS0Z,KACPrI,EAAUsI,OAGZ,QAASC,GAAWla,GAClBjC,EAAQ6C,gBAAgBZ,EAAKI,KAAK+Z,MAAM,SAAS3e,EAAMiF,GACrD0R,EAAOyH,MAAMxa,EAAE,WAAYA,EAAE,yCAIjC,QAASgb,GAAQ5e,GACXA,GACFuC,EAAQgC,aAAavE,GAAMjC,KAAK,WAC9B6Z,EAAGiH,UAAY,GACfjH,EAAGkH,WAAa,IACf,SAAS/R,GACV4J,EAAOyH,MAAMxa,EAAE,WAAYmJ,KA/BjC,GAAI6K,GAAK1Z,IAET0Z,GAAG5S,MAAQzC,EAAQuC,UACnB8S,EAAGrV,QAAUA,EACbqV,EAAGiH,UAAY,GACfjH,EAAGkH,WAAa,GAChBlH,EAAG2G,WAAaA,EAChB3G,EAAG4G,WAAaA,EAChB5G,EAAG8G,WAAaA,EAChB9G,EAAGgH,QAAUA,EA1BfzI,EAAUgC,MACRK,YAAajW,EAAQjC,GAAK,cAC1BmY,WAAY6F,EACZ5F,aAAc,WACdJ,qBAAqB,EACrBC,eAAe,EACfI,QACE0D,KAAMA,EACN9Z,QAASA,KAOb+b,EAA4BvC,SAAW,SAAU,YAAa,OAAQ,WAwCxE,QAASgD,GAAWvS,GAClBoL,EAAGoH,SAAWxS,EAAOxJ,KACrB0T,EAAM,eAAiBlK,EAAOxJ,MAGhC,QAASic,GAAczS,GACrBA,EAAOE,SACPkL,EAAGoH,UAAW,EAGhB,QAASnX,GAAaoQ,EAAQ1V,EAASiK,GACjCoL,EAAGoH,UAAYxS,EAAOxJ,OAE1B4U,EAAGoH,UAAW,EACdpH,EAAG4E,uBAAwB,EAC3B5E,EAAGqD,QAAQ7U,cAAe,EAErB8V,EAASE,EAAW,WACvBD,EAAW,QAAQM,QACrBvG,EAAO8C,GAAG,wBAA0B/U,UAAW1B,EAAQjC,GAAI2Y,UAAWxC,EAAgBjK,EAAOxJ,QAC7FiV,EAAOoB,kBACPpB,EAAOc,kBAGT,QAASmG,GAAW1S,GAClBA,EAAOjC,UACJxM,KAAK,SAASiC,GACb4X,EAAGoH,UAAW,IAIpB,QAASG,GAAc3S,GACrBA,EAAO1B,WAAW/M,KAAK,WACrBqY,EAAS+B,KACP/B,EAASiE,SACN3I,QAAQ9N,EAAE,qBACV0W,SAAS,aACTC,UAAU,QAInB,QAAS6E,GAAiB5S,GACxBA,EAAOxB,cAAcjN,KAAK,WACxBqY,EAAS+B,KACP/B,EAASiE,SACN3I,QAAQ9N,EAAE,kBACV0W,SAAS,aACTC,UAAU,QAInB,QAAS+B,GAAc9P,GACrBmK,EAAOmD,QAAQlW,EAAE,WACFA,EAAE,4DACAmW,GAAInW,EAAE,YACpB7F,KAAK,WACJyO,EAAOZ,UACJ7N,KAAK,WACJmY,EAAO8C,GAAG,uBACT,SAASlM,GACV6J,EAAOmD,QAAQlW,EAAE,WACFA,EAAE,iGACAmW,GAAInW,EAAE,YACtB7F,KAAK,WACJyO,EAAOZ,SAAUqO,cAAc,IAC5Blc,KAAK,WACJmY,EAAO8C,GAAG,uBACT,SAASlM,GACV6J,EAAOyH,MAAMxa,EAAE,sDAAuD4I,EAAOtJ,MAChEU,EAAEkJ,EAASC,gBAOxC,QAASsS,GAAe7S,GACtBA,EAAOvB,cAGT,QAASqU,GAAM9S,GAEbA,EAAOnF,KAAKkY,SAASxhB,KAAK,WAExBoY,EAAUgC,MACRK,YAAahM,EAAOlM,GAAK,gBACzBmY,WAAY,gBACZC,aAAc,MACdJ,qBAAqB,EACrBC,eAAe,EACfI,QACE6G,aAAchT,EAAOnF,KAAKrC,MAC1BqX,KAAMA,EACN7P,OAAQA,OAMhB,QAASuR,GAAkBvR,GACzB,MAAmB,SAAfA,EAAO5J,MACDM,KAAMsJ,EAAOtJ,KAAgBuc,KAAK,QAAkBC,SAAS,GAC/C,SAAflT,EAAO5J,MACNM,KAAMU,EAAE,oBAAqB6b,KAAM,SAAiBC,SAAS,GAC/C,QAAflT,EAAO5J,MACNM,KAAMU,EAAE,kBAAqB6b,KAAM,OAAiBC,SAAS,GAC/C,SAAflT,EAAO5J,MACNM,KAAMU,EAAE,mBAAqB6b,KAAM,SAAiBC,SAAS,GAC/C,QAAflT,EAAO5J,MACNM,KAAMU,EAAE,kBAAqB6b,KAAM,aAAiBC,SAAS,GAC/C,cAAflT,EAAO5J,MACNM,KAAMsJ,EAAOtJ,KAAgBuc,KAAM,gBAAiBC,SAAS,IAE/Dxc,KAAMsJ,EAAOtJ,KAAkBuc,KAAM,cAAiBC,SAAS,GAGzE,QAASC,GAAYnT,EAAQ5J,GAC3B4J,EAAOzB,aAAanI,GAAM7E,KAAK,WAC7ByO,EAAOjH,SAASxE,eAAeI,QAAQ,MAI3C,QAASye,KACP,GAAIC,GAAqB7J,EAAQ6J,kBAEjC1hB,GAAEC,QAAQwZ,EAAGsD,SAAU,SAAS3Y,GAGzBpE,EAAE2R,SAAS+P,EAAoBtd,EAAQjC,GAAK,iBAC/Cuf,EAAmB1d,KAAKI,EAAQjC,GAAK,gBAEvCnC,EAAEC,QAAQmE,EAAQF,mBAAoB,SAASI,GACzCzE,QAAQ2K,UAAUlG,EAAQsG,eACzB5K,EAAE2R,SAAS+P,EAAoBpd,EAAQnC,KAC1Cuf,EAAmB1d,KAAKM,EAAQnC,QAItCzC,EAAQ0B,WAAWmD,KAAK,GAAI,eAAgBjB,UAAWoe,IAAqB9hB,KAAK,SAASiC,GACxF7B,EAAEC,QAAQwZ,EAAGsD,SAAU,SAAS3Y,GAC9BpE,EAAEC,QAAQmE,EAAQF,mBAAoB,SAASI,GACzCzC,EAAKyC,EAAQnC,MACfmC,EAAQsG,YAAc/I,EAAKyC,EAAQnC,WAK3ClB,EAAYkC,QAAQvD,KAAK,WACvB,GAAIuL,GAAmBlK,EAAYmK,SAASC,oBACxCF,IAAwC,YAApBA,GACtBrK,EAAS2Y,EAAGgI,mBAAoD,IAAhCtW,EAAiBK,kBAIvD,QAASmW,GAAkBC,EAAW5F,GACpC,MAAQA,GAAU7Z,IAAMyf,EAAUzf,KAAQ6Z,EAAU7P,aAGtD,QAAS0V,GAAqBD,EAAW5F,EAAWpC,GAClD,GAAIkI,GAAO9U,EAAUtB,EAAMqW,EAAkB/a,EAASgb,CAEtDF,GAAQ,IAAM9F,EAAU7Z,GACxB6K,EAAW4U,EAAU9X,oBACG,IAApBkD,EAASxK,SACXwK,GAAY4U,EAAUvX,qBACxBqB,EAAO1L,EAAE0G,IAAIsG,EAAU,OACvB+U,EAAoBH,EAAUxX,iBAAmBsB,EAAKnI,QAAQqe,EAAUxX,kBAAoB,EAEhF,QAARwP,GACF5S,EAAU4a,EAAUxT,cAAcpB,EAAU8U,GAC5CE,EAAUvc,EAAE,yBAA0BuH,EAASxK,UAG/CwE,EAAU4a,EAAUtT,cAActB,EAAU8U,GAC5CE,EAAUvc,EAAE,wBAAyBuH,EAASxK,SAGhDwE,EAAQpH,KAAK,WACPmiB,GACFhK,EAAO8C,GAAG,wBACZ5C,EAAS+B,KACP/B,EAASiE,SACN3I,QAAQyO,GACR7F,SAAS,aACTC,UAAU,QAldnB,GACIhY,GACAE,EAFAmV,EAAK1Z,KAGL6c,IAEJnD,GAAGqD,QAAU5b,EACbuY,EAAGsD,SAAW7E,EACduB,EAAG+F,mBAAqBA,EACxB/F,EAAGiG,UAAYA,EACfjG,EAAGqG,UAAYA,EACfrG,EAAGyG,SAAWA,EACdzG,EAAGmH,WAAaA,EAChBnH,EAAGqH,cAAgBA,EACnBrH,EAAG/P,aAAeA,EAClB+P,EAAGsH,WAAaA,EAChBtH,EAAGuH,cAAgBA,EACnBvH,EAAGwH,iBAAmBA,EACtBxH,EAAG0E,cAAgBA,EACnB1E,EAAGyH,eAAiBA,EACpBzH,EAAG0H,MAAQA,EACX1H,EAAGmG,kBAAoBA,EACvBnG,EAAG+H,YAAcA,EACjB/H,EAAGgI,mBAAqBA,EACxBhI,EAAGkI,kBAAoBA,EACvBlI,EAAGoI,qBAAuBA,EAG1BpI,EAAG4E,uBAAwB,EAC3B5E,EAAGuF,mBAAqB,GACxBvF,EAAGqF,eAAiBA,EACpBrF,EAAGwF,eAAiBA,EACpBxF,EAAG2E,mBAAqBA,EACxB3E,EAAG8E,mBAAqBA,EACxB9E,EAAGgF,qBAAuBA,EAC1BhF,EAAG/H,QACD7O,SAAUof,GAAI,GACJnW,QAASrG,EAAE,iBACXqP,KAASrP,EAAE,cACXuK,GAASvK,EAAE,YACXwK,GAASxK,EAAE,YACXwU,KAASxU,EAAE,eAErBnB,QAAS,QACTua,WAAY,EACZ7T,MAAO,MACP+L,WAIF9V,EAAYkC,QAAQvD,KAAK,WACvB6Z,EAAGyI,mBAAqBjhB,EAAYmK,SAAS+W,oCAG/C1I,EAAGgI,qBAEHhJ,EAAiBmE,GAEjB9E,EAAOmF,IAAI,WAAY,WAErBjd,EAAEC,QAAQ2c,EAAS,SAASnO,GAC1B4J,EAAU8E,iBAAiB1O,OA9DjCqP,EAAoBF,SAAW,SAAU,SAAU,WAAY,UAAW,YAAa,WAAY,WAAY,aAAc,aAAc,UAAW,kBAAmB,SAAU,aAAc,YAAa,UAAW,UAAW,iBAAkB,OAAQ,cAAe,iBA0d7Q/d,QACG4B,OAAO,iBACP6Y,WAAW,sBAAuBwD,MClevC,WACE,YAMA,SAASsE,GAAkBvK,EAASC,EAAQC,EAAQgG,EAAU/F,EAAWiG,EAAY/F,EAAeC,EAAcC,EAAcqC,EAAcpC,EAAWC,EAAiB+J,EAAY9J,EAAOC,EAAQ8J,EAAUC,EAAW7iB,EAASwB,EAASC,GAiG1O,QAASsX,GAAiBlH,GACxBA,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAKhJ,EAAE,gBACPL,YAAaK,EAAE,wBACfkT,SAAU6J,KAEZjR,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAKhJ,EAAE,mBACPL,YAAaK,EAAE,sCACfkT,SAAU8J,KAEZlR,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAKhJ,EAAE,kBACPL,YAAaK,EAAE,4BACfkT,SAAU+J,KAEZnR,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAKhJ,EAAE,eACPL,YAAaK,EAAE,WACfkT,SAAU9Y,QAAQ0L,KAAKkP,EAAcA,EAAa7E,eAEpDrE,EAAKvN,KAAKqU,EAAUK,cAClBjK,IAAK,YACLkK,SAAU,SAASmB,GACmB,IAAhCL,EAAGnV,QAAQ2F,kBACb0Y,IACF7I,EAAOc,qBAKX5a,EAAEC,QAAQsR,EAAM,SAAS9C,GACvB4J,EAAUiB,eAAe7K,KAO7B,QAASmU,KACP,GAAI/c,GAASvB,EAASue,IAgBtB,OAfIhL,GAAQiL,QAENjL,EAAQiL,OAAOjG,oBACfhF,EAAQiL,OAAOjG,mBAAmB9U,eAAekB,OAASmP,EAAanP,QAEvE3E,EAAUuT,EAAQiL,OAAOjG,mBACzBgG,EAAME,YAAcze,EAChBuT,EAAQiL,OAAOE,oBACfnL,EAAQiL,OAAOE,mBAAmBnd,QAAQY,KAAOgU,EAAahU,MAEhEZ,EAAUgS,EAAQiL,OAAOE,mBACzBH,EAAMI,YAAcpd,IAIrBgd,EAGT,QAASK,GAAyBpJ,GAChCL,EAAG0J,yBAA2B1J,EAAG0J,wBACjCrJ,EAAOoB,kBACPpB,EAAOc,iBAGT,QAASwI,GAAkBtJ,GACzB,GAAIuJ,GAAMrY,EAAOgF,EAA4BnO,CAChB,MAAzBiY,EAAOwJ,OAAOC,SAAkB,QAAUzJ,GAAOwJ,OAAOE,aAC1DH,EAAOvJ,EAAOwJ,OAAOE,WAAWH,KAAK7U,MACrCxD,EAAQ,mBAAmByY,KAAKJ,GAC5BrY,IAEFgF,EAAKhQ,EAAE0G,IAAIgd,mBAAmB1Y,EAAM,IAAItC,MAAM,KAAM,SAASpI,GAC3D,MAAO,IAAMA,EAAQ,MAEvBuB,GAASmO,GAAIA,GAEbhQ,EAAEC,SAAS,UAAW,QAAS,SAASuG,GACtC,GAAI4K,GAAK,GAAIC,QAAO7K,EAAQ,WAC5BA,GAAkB,QAATA,EAAkB,OAASA,EACpCwE,EAAQoG,EAAGqS,KAAKJ,GACZrY,IACFnJ,EAAK2E,IAAUkd,mBAAmB1Y,EAAM,QAG5ChL,EAAEC,SAAS,KAAM,OAAQ,SAASuG,GAChC,GAAI4K,GAAK,GAAIC,QAAO7K,EAAQ,WAC5BwE,GAAQoG,EAAGqS,KAAKJ,GACZrY,IACFnJ,EAAK2E,IAAUkd,mBAAmB1Y,EAAM,QAE5C6N,EAAWiB,EAAQjY,KAKzB,QAAS8gB,KACP,GAAIre,GAASuB,EAAS8d,EAAOtI,EAAaC,EACtCsI,EAAchB,GAEdgB,GAAYX,aACd3e,EAAUsf,EAAYb,YAAYhb,eAClClC,EAAU+d,EAAYX,YAAYpd,QAClC8d,EAAQC,EAAYX,YAAYlL,SAGhCzT,EAAU8T,EACVvS,EAAU4U,EACVkJ,EAAQ5L,GAGVzT,EAAQ2J,iBAAiBpI,IAAUjG,KAAK,SAAS8C,GAC/C,GAAI6Y,GAAY7Y,CAGhB,IADAmD,EAAU,KACNhG,QAAQ2K,UAAUmZ,GAAQ,CAExBjhB,EAAQ,IACV6Y,GAAa,EACbF,EAAc/W,EAAQyE,UAAUwS,IAE9B7Y,EAAQ4B,EAAQyE,UAAUvG,SAC5B8Y,EAAkBhX,EAAQyE,UAAUrG,IAElC2Y,EACEA,EAAYxN,QAAUyN,IAAoBA,EAAgBzN,SAC5D0N,EAAY7Y,EACZ2Y,EAAcC,GAGTA,IACPC,EAAY7Y,EACZ2Y,EAAcC,EAGhB,KACMD,GAAe0C,EAASE,EAAW,WACrC0F,EAAM9I,GAAG,gCAAkC1Q,UAAWkR,EAAY5U,MAC9D8U,EAAYjX,EAAQyK,UACtBzK,EAAQyK,UAAYwM,EACbA,EAAYjX,EAAQqF,oBAC3BrF,EAAQyK,UAAYwM,GAAajX,EAAQqF,kBAAoBrF,EAAQyK,aAGvE4U,EAAM9I,GAAG,wBAAwBjb,KAAK,WACpCiG,EAAU,WACHvB,GAAQ8F,kBAIrB,MAAOwE,KAETiV,MAIJ,QAASC,GAAehK,EAAQjU,GACR,OAAlBkU,IACFA,EAAgB/B,EACbgC,MACC1N,OAAQzM,QAAQ2U,QAAQJ,SAAS6F,MACjCC,YAAaJ,EACbK,qBAAqB,EACrBC,eAAe,EACfC,YAAa,gBACbC,WAAY,0BACZC,aAAc,SACdC,QACErC,aAAcsB,EAAGrV,QACjBqW,aAAc5U,KAGjBmR,QAAQ,WACP+C,EAAgB,KAChB8J,OAKR,QAASvF,KACPvG,EAAO8C,GAAG,wBAAwBjb,KAAK,WACrC6Z,EAAG5T,QAAU,WACNuS,GAAahO,kBAIxB,QAASoY,GAAM1I,GACb,GAAIjU,GAAU4T,EAAG5T,QAAQoQ,QACzB6N,GAAehK,EAAQjU,GAGzB,QAAS4c,GAAS3I,GAChB,GAAIjU,GAAU4T,EAAG5T,QAAQsQ,WACzB2N,GAAehK,EAAQjU,GAGzB,QAAS6c,GAAQ5I,GACf,GAAIjU,GAAU4T,EAAG5T,QAAQuQ,UACzB0N,GAAehK,EAAQjU,GAGzB,QAASke,GAAKjK,GACZL,EAAG5T,QAAQgP,mBAAmBjV,KAAK,WACjCkkB,EAAehK,EAAQL,EAAG5T,WAI9B,QAASme,KACP,GAAIC,IAAO5B,EAAW6B,UACX,yBACAzK,EAAG5T,QAAQC,UAEXwS,EAAgBA,EAAgBmB,EAAG5T,QAAQgK,SAAShL,OACpD4U,EAAG5T,QAAQY,KACjBoC,KAAK,KACNsb,EAAM1K,EAAG5T,QAAQG,eACrBoe,GAAcvM,EAAQwM,KAAKJ,EAAKE,GACJ,YACA,aACA,cACA,eACA,YACA,aACA,gBACA,WACA,YACA,iBACAtb,KAAK,MAGnC,QAASgb,KACHhM,EAAQiL,QACVjL,EAAQyG,QAGZ,QAASzF,GAAWiB,EAAQwK,GAC1B7K,EAAGrV,QAAQwB,cAAchG,KAAK,SAASiG,GACrChG,QAAQC,OAAO+F,EAAQK,SAAUoe,GACjCR,EAAehK,EAAQjU,KAEzBiU,EAAOoB,kBACPpB,EAAOc,iBAGT,QAAS2J,GAAgBzK,GAClBL,EAAG+K,eAAkB/K,EAAG5T,QAAQ4e,WAOnChL,EAAG+K,eAAiB/K,EAAG+K,cANvBrjB,EAAQC,WAAWmD,KAAKkV,EAAG5T,QAAQ1D,GAAI,cAAcvC,KAAK,SAASiC,GACjE4X,EAAG5T,QAAQ4e,WAAa5iB,EACxB4X,EAAG+K,eAAgB,IAQzB,QAASE,GAAM5K,GACbjC,EAAQ6M,QAGV,QAASC,GAAe7K,GACtB,MAAO8K,GAAmB9K,EAAQ,eAGpC,QAAS+K,GAAc/K,GACrB,MAAO8K,GAAmB9K,EAAQ,QAGpC,QAAS8K,GAAmB9K,EAAQrV,GAClCgV,EAAG5T,QAAQoP,gBAAgBrV,KAAK,SAASiC,GACvC,GAAIijB,IACFC,IAAKzC,EAAS0C,mBACdvgB,KAAMA,EACNwgB,QAASpjB,EAAKiK,QACdoZ,QAASrjB,EAAK0R,SAEZ5K,EAAY,GAAI4Z,GAAUuC,GAG1BzK,GACFgI,EAAWhhB,WAAW,aACtB,WACA,MAAQoD,EAAK0gB,aAAe,kBAC5Btc,KAAK,IACP,OAAOmP,GAAUgC,MACf1N,OAAQzM,QAAQ2U,QAAQJ,SAAS6F,MACjCC,YAAaJ,EACbK,qBAAqB,EACrBC,eAAe,EACfC,YAAaA,EACbC,WAAY,4BACZC,aAAc,SACdC,QACE4K,eAAgBzc,OArYxB,GAAI8Q,GAAK1Z,KAAMga,EAAgB,KAAMqK,EAAc,KAAMxH,IAGzD/E,GAAQmL,mBAAqBvJ,EAE7BA,EAAG1B,OAASA,EACZ0B,EAAGsD,SAAW7E,EACduB,EAAGrV,QAAU+T,EACbsB,EAAGnV,QAAU8T,EACbqB,EAAG5T,QAAU4U,EACbhB,EAAGqD,QAAU3b,EACbsY,EAAG4L,MAAS1E,WAAY,GAAI3W,SAAU,IACtCyP,EAAG6L,UAAY7K,EAAavO,OAASuO,EAAavO,MAAM1J,OAAS,EACjEiX,EAAG0J,yBAA0B,EAC7B1J,EAAGyJ,yBAA2BA,EAC9BzJ,EAAG2J,kBAAoBA,EACvB3J,EAAGkJ,cAAgBA,EACnBlJ,EAAG6E,MAAQA,EACX7E,EAAG+I,MAAQA,EACX/I,EAAGgJ,SAAWA,EACdhJ,EAAGiJ,QAAUA,EACbjJ,EAAGsK,KAAOA,EACVtK,EAAGuK,UAAYA,EACfvK,EAAGoK,WAAaA,EAChBpK,EAAGZ,WAAaA,EAChBY,EAAG8K,gBAAkBA,EACrB9K,EAAG+K,eAAgB,EACnB/K,EAAGiL,MAAQA,EACXjL,EAAGkL,eAAiBA,EACpBlL,EAAGoL,cAAgBA,EAGnBpM,EAAiBmE,GAGb/E,EAAQiL,QAEVhL,EAAOyN,iBAAiB,WAAa,MAAO9L,GAAG5T,QAAQqG,OAAU,SAASsZ,EAASC,GACjF,GAAI5C,IACA2C,GAAWC,KACb5C,EAAQD,IACJC,EAAMI,aACRJ,EAAMI,YAAYnG,QAAQhc,SAAS,WACjC+hB,EAAMI,YAAYqC,WAAY,EAC9BzC,EAAMI,YAAYpd,QAAQqG,MAAQsZ,OAM1C1N,EAAOsF,OAAO,WAAa,MAAO3D,GAAG5T,QAAQgQ,WAAc,SAASA,EAAW6P,GAC7E,GAAI7C,GAAQD,GACRC,GAAME,aACRF,EAAME,YAAYjG,QAAQhc,SAAS,WACjC,GAAI+E,GAAU7F,EAAE2E,KAAKke,EAAME,YAAYhb,eAAegB,WAAatC,IAAKgT,EAAG5T,QAAQY,KACnFZ,GAAQgQ,UAAYA,OAQ1BiC,EAAOyN,iBAAiB,WAAa,MAAO9L,GAAG5T,QAAQqG,OAAU,SAASyZ,EAAUC,GAClF,GAAIJ,GAASC,EAASJ,GAClBM,GAAYC,KACdJ,EAAUG,MACVF,EAAUG,MACV5lB,EAAEC,QAAQulB,EAAS,SAAShU,EAAKtP,GAC3BrC,QAAQgmB,SAASrU,KACnBgU,EAAQtjB,GAAKsP,EAAIzM,QAEjBygB,EAAQhjB,OAASijB,EAAQjjB,QAC3B6iB,EAAOrlB,EAAE8lB,WAAWN,EAASC,GAC7BzlB,EAAEC,QAAQolB,EAAM,SAAS7T,GACvBiI,EAAG5T,QAAQqP,OAAO1D,MAGbgU,EAAQhjB,OAASijB,EAAQjjB,SAChC6iB,EAAOrlB,EAAE8lB,WAAWL,EAASD,GAC7BxlB,EAAEC,QAAQolB,EAAM,SAAS7T,GACvBiI,EAAG5T,QAAQuP,UAAU5D,SAO/BsG,EAAOmF,IAAI,WAAY,WAErBjd,EAAEC,QAAQ2c,EAAS,SAASnO,GAC1B4J,EAAU8E,iBAAiB1O,OA7FjC2T,EAAkBxE,SAAW,UAAW,SAAU,SAAU,WAAY,YAAa,aAAc,gBAAiB,eAAgB,eAAgB,eAAgB,YAAa,kBAAmB,aAAc,UAAW,SAAU,WAAY,YAAa,UAAW,UAAW,WA8YtR/d,QACG4B,OAAO,iBACP6Y,WAAW,oBAAqB8H,MCtZrC,WACE,YAMA,SAAS2D,GAAwBjO,EAAQD,EAASmO,EAAcC,EAAajO,EAAWC,EAAUiO,EAAc/N,EAAcsC,EAAcnC,EAAiBxX,EAAU0X,EAAQ2N,EAAaC,EAAMnlB,GAoFhM,QAAS2hB,KACP,GAAIyD,GAAexD,IAEnB,KACMhL,EAAQiL,QACN,sBAAwBjL,GAAQiL,QAChC,kBAAoBjL,GAAQiL,OAAOjG,qBACwB,SAAzDhF,EAAQiL,OAAOjG,mBAAmB9U,eAAetD,MACnDoe,EAAMyD,iBAAmBzO,EAAQiL,OAAOjG,mBACpC,sBAAwBhF,GAAQiL,QAChCjL,EAAQiL,OAAOE,mBAAmBnd,QAAQY,KAAOgU,EAAahU,MAEhEoc,EAAM0D,iBAAmB1O,EAAQiL,OAAOE,qBAGnCvI,EAAapE,SACpBgQ,EAAgB5L,EAAapE,OAAOxQ,QAChCgS,EAAQiL,OAAOjG,mBAAmB9U,eAAekB,OAASod,EAAcxW,SAAS5G,QAEnF4Z,EAAM2D,kBAAoB3O,EAAQiL,OAAOjG,sBAMnD,MAAOnb,IAEP,MAAOmhB,GAGT,QAAS4D,KAEP,GAAIvkB,GAAGL,EAAM6kB,EAAUC,EAAQlN,EAAG5T,QAAQK,SAASwP,eACnD,IAAIiR,EACF,IAAKzkB,EAAI,EAAGA,EAAIykB,EAAMnkB,OAAQN,IAC5BL,GACEkD,KAAM4hB,EAAMzkB,GAAGoL,SACf7I,KAAMkiB,EAAMzkB,GAAG0kB,SACflL,KAAMvT,SAASwe,EAAMzkB,GAAGwZ,OAE1BgL,EAAW,GAAIR,GAAaW,SAASpN,EAAGqN,SAAUjlB,GAClD6kB,EAASK,SAAW,IACpBL,EAASM,YAAa,EACtBN,EAASO,WAAY,EACrBP,EAASQ,UAAYP,EAAMzkB,GAAG+hB,IAC9BxK,EAAGqN,SAASK,MAAMnjB,KAAK0iB,GAI7B,QAASU,GAAiBC,EAAMllB,GAC1BklB,EAAKC,YACP7N,EAAGqN,SAASS,WAAWF,IAEvB5N,EAAG5T,QAAQ4P,kBAAkB4R,EAAKG,KAAKziB,MACvCsiB,EAAKI,SAIP,IAAIjT,GAAUqD,EAAQzD,SAASsT,eAAevlB,EAC1CqS,IACF3U,QAAQ2U,QAAQA,GAASmT,KAAK,QAAS,MAG3C,QAAS9c,KACH4O,EAAGmO,UACL9mB,EAAS+J,OAAO4O,EAAGmO,UAEjBnO,EAAG5T,QAAQM,OAASsT,EAAG5T,QAAQ6P,iBACjC+D,EAAG5T,QAAQgK,SAAS5B,iBAAiBwL,EAAG5T,UAE1CmS,EAAUnN,SAGZ,QAAS6D,KACP,GAAImU,GAAQD,GACZnJ,GAAG5T,QAAQ2G,QAAQ5M,KAAK,SAASiC,GAC/B4X,EAAG5T,QAAQ4e,WAAa,KACpB5B,EAAMyD,kBAGRzD,EAAMyD,iBAAiBve,eAAe0C,UAAU7K,KAAK,WAC/CijB,EAAM0D,kBAER1D,EAAM0D,iBAAiBxO,OAAO8C,GAAG,gCAAkC1Q,UAAWsP,EAAG5T,QAAQY,QAI/FwR,EAAS+B,KACP/B,EAASiE,SACN3I,QAAQ9N,EAAE,8BACV0W,SAAS,aACTC,UAAU,QAInB,QAASyL,KACP,GAAIhF,GAAQD,GAEZnJ,GAAGqO,UAAY,UACXrO,EAAGmO,UACL9mB,EAAS+J,OAAO4O,EAAGmO,UAErBnO,EAAG5T,QAAQyQ,QAAQ1W,KAAK,SAASiC,GAC/B4X,EAAGqO,UAAY,OACXjF,EAAMyD,kBAGRzD,EAAMyD,iBAAiBve,eAAe0C,UAAU7K,KAAK,WAC/CijB,EAAM0D,kBAER1D,EAAM0D,iBAAiBjI,UAIzBuE,EAAM2D,mBAGR3D,EAAM2D,kBAAkBze,eAAe0C,UAEzCwN,EAAS+B,KACP/B,EAASiE,SACN3I,QAAQ9N,EAAE,6BACV0W,SAAS,aACTC,UAAU,MAGftb,EAASkX,EAAUsI,KAAM,MACxB,SAAS3R,GACV8K,EAAGqO,UAAY,QACfrO,EAAGsO,aAAepZ,EAAS9M,KAAM8M,EAAS9M,KAAKgE,QAAU8I,EAASqZ,aAItE,QAASC,GAAcrgB,GACrB,MAAOue,GAAY+B,WAAWtgB,GAAQhI,KAAK,SAASuoB,GAGlD,GAAIC,KAOJ,OANApoB,GAAEC,QAAQD,EAAEgP,UAAUmZ,EAAO,WAAY,SAASE,GAChDroB,EAAEC,QAAQooB,EAAW,SAASC,GAC5BF,EAAcpkB,KAAKskB,OAIhBtoB,EAAEuoB,OAAOH,EAAe,SAASE,GACtC,MAAOA,GAAKE,WAAa,IAAMF,EAAKG,YAK1C,QAASC,GAAaC,EAASjP,GAC7B,GAAIkP,GAAYC,EAAWC,CAE3B,OAAIjpB,SAAQ+D,SAAS+kB,GACZA,GAETC,EAAanP,EAAG5T,QAAQK,SAASwT,GAE7BiP,EAAQI,SAASC,YAAY,IAE3BnpB,QAAQ2K,UAAUme,EAAQM,OAASN,EAAQM,KAAKzmB,OAClDxC,EAAEC,QAAQ0oB,EAAQM,KAAM,SAASC,GAC3BA,EAAI5oB,MAAMkC,QACZomB,EAAW5kB,KAAKklB,EAAIC,mBAIxBL,EAAO1C,EAAKnjB,MAAM0lB,EAAQS,UAAWT,EAAQU,QAC7CP,EAAK7f,MAAMrJ,KAAK,SAAS0pB,GACvBtpB,EAAEC,QAAQ6oB,EAAKG,KAAM,SAASC,GACxBA,EAAI5oB,MAAMkC,QACZomB,EAAW5kB,KAAKklB,EAAIC,qBAM5BN,EAAYF,EAAQQ,eAGlBN,EACKA,EAEA,MAIX,QAASU,KACP9P,EAAG5T,QAAQ2G,QACPvL,EAAYmK,SAASoe,mBACvB/P,EAAGmO,SAAW9mB,EAAS2Y,EAAG8P,eAAsD,IAAtCtoB,EAAYmK,SAASoe,iBAAsB,KAjRzF,GAAI/P,GAAK1Z,IAET0Z,GAAGiP,aAAeA,EAClBjP,EAAGgQ,cAAgBzZ,MAAQC,MAAQC,QACnCuJ,EAAGmO,SAAW,KACdnO,EAAG8P,eAAiBA,EACpB9P,EAAGiQ,OAA8C,IAApCjP,EAAavU,SAAS+J,GAAGzN,OACtCiX,EAAGkQ,QAAgD,IAArClP,EAAavU,SAASgK,IAAI1N,OACxCiX,EAAG5O,OAASA,EACZ4O,EAAG/K,KAAOA,EACV+K,EAAGoO,KAAOA,EACVpO,EAAGqO,WAAY,EACfrO,EAAG2N,iBAAmBA,EACtB3N,EAAGwO,cAAgBA,EACnBxO,EAAGvZ,WAAaF,EAAE0G,IAAIyR,EAAajY,WAAY,QAC/CuZ,EAAGmQ,wBACD3D,EAAY4D,SAASC,MACrB7D,EAAY4D,SAASE,IACrB9D,EAAY4D,SAASG,MACrB/D,EAAY4D,SAASI,WAEvBxQ,EAAGqN,SAAW,GAAIZ,IAChBjC,IAAKxJ,EAAazU,eAAeC,SAAS,IAAS,QACnDikB,YAAY,EACZC,MAAO,cACPC,mBAAmB,EAInBC,cAAe,SAAShD,EAAM1Y,EAAU7H,EAAQgI,GAC9C2L,EAAazI,QAAQrD,EAASlI,KAC9BgU,EAAanF,SAASrP,SAAS,IAC/BohB,EAAKH,UAAYvY,EAAS2b,oBAAoB,GAAGrG,KAGnDsG,aAAc,SAASlD,EAAM1Y,EAAU7H,EAAQgI,GAG7C2L,EAAahF,kBAAkB4R,EAAKG,KAAKziB,MACzChF,KAAKyqB,gBAAgBnD,IAEvBoD,YAAa,SAASpD,EAAM1Y,EAAU7H,EAAQgI,GAC5CmJ,EAAS+B,KACP/B,EAASiE,SACN3I,QAAQ9N,EAAE,yCAA4C4hB,EAAKG,KAAKziB,OAChEoX,SAAS,aACTC,UAAU,MACfrc,KAAKyqB,gBAAgBnD,MAMzBvP,EAAOmF,IAAI,WAAY,WAAaxD,EAAGqN,SAAS4D,YAEjB,SAA3B1E,EAAa2E,WACflQ,EAAaxE,SAASrW,KAAK,SAASgrB,GAClCnR,EAAG5T,QAAU+kB,EACbnR,EAAGiQ,QAAWkB,EAAU1kB,SAAS+J,IAAuC,IAAjC2a,EAAU1kB,SAAS+J,GAAGzN,OAC7DiX,EAAGkQ,SAAYiB,EAAU1kB,SAASgK,KAAyC,IAAlC0a,EAAU1kB,SAASgK,IAAI1N,SAGhC,YAA3BwjB,EAAa2E,WACpBlQ,EAAatE,YAAYvW,KAAK,SAASgrB,GACrCnR,EAAG5T,QAAU+kB,EACbnR,EAAGiQ,QAAWkB,EAAU1kB,SAAS+J,IAAuC,IAAjC2a,EAAU1kB,SAAS+J,GAAGzN,OAC7DiX,EAAGkQ,SAAYiB,EAAU1kB,SAASgK,KAAyC,IAAlC0a,EAAU1kB,SAASgK,IAAI1N,SAGhC,WAA3BwjB,EAAa2E,WACpBlQ,EAAarE,WAAWxW,KAAK,SAASgrB,GACpCnR,EAAG5T,QAAU+kB,EACbnE,MAGK5mB,QAAQ2K,UAAUiQ,KACzBhB,EAAG5T,QAAU4U,EACbgM,KAwMFxlB,EAAYkC,QAAQvD,KAAK,WACnBqB,EAAYmK,SAASoe,mBAEvB/P,EAAGmO,SAAW9mB,EAAS2Y,EAAG8P,eAAsD,IAAtCtoB,EAAYmK,SAASoe,iBAAsB,KAEvF/P,EAAGoR,WAAa5pB,EAAYmK,SAAS0f,aAKzC,QAASC,GAA2BjT,EAAQG,GAC1CH,EAAOkT,WAAa,WAClB/S,EAASqI,QAnSbyF,EAAwBnI,SAAW,SAAU,UAAW,eAAgB,cAAe,YAAa,WAAY,eAAgB,eAAgB,eAAgB,kBAAmB,WAAY,SAAU,cAAe,OAAQ,eAgShOmN,EAA2BnN,SAAW,SAAU,YAOhD/d,QACG4B,OAAO,iBACP6Y,WAAW,6BAA8ByQ,GACzCzQ,WAAW,0BAA2ByL,MChT3C,WAEE,YAQA,SAASkF,KAOP,QAASC,GAAKC,EAAOC,EAAUzE,EAAO0E,GACpCA,EAAKC,iBAAmB3E,EAAM4E,WAPhC,OACEC,SAAU,IACVN,KAAMA,EACN5Q,WAAY,oBAYhB,QAASmR,GAAiB3T,EAAQoG,GAChC,GAAIzE,GAAK1Z,IAET+X,GAAO4T,oBAAqB,EAC5B5T,EAAO6T,YAAc,GACrB7T,EAAO6I,WAAa,GAEpB7I,EAAOsI,WAAa,SAASxY,GAC3B,MAAOsW,GAAKzT,QAAQ7C,IAGtBkQ,EAAO8T,gBAAkB,SAASnc,GAChC,GAAI5N,EAEU,aAAV4N,IACF5N,GACEgqB,gBAAgB,EAChBF,YAAa7T,EAAO6T,YAAYG,UAIpChU,EAAOiU,OAAOlmB,QAAQwP,YAAYoE,EAAG6R,iBAAkB7b,EAAQ5N,IAtBnE4pB,EAAiB7N,SAAW,SAAU,QA0BtC/d,QACG4B,OAAO,iBACP6Y,WAAW,mBAAoBmR,GAC/BO,UAAU,SAAUf,MCtDzB,WACE,YAeA,SAASgB,KAMP,QAASf,GAAKC,EAAOC,EAAUzE,EAAO0E,GACpC,GACIa,GADAC,EAAaf,EAAS9e,QAG1B4f,GAAc,SAAS1S,GACO,OAAxBA,EAAM8J,OAAOC,SACf4I,EAAWD,YAAY,YAG3Bd,EAASpO,GAAG,QAASkP,GAdvB,OACEV,SAAU,IACVN,KAAMA,GAgBVrrB,QACG4B,OAAO,iBACPuqB,UAAU,kBAAmBC","file":"Mailer.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n    function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.forEach(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    Account.$accounts = collection;\n\n    return collection;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of mailboxes in the account\n   */\n  Account.prototype.getLength = function() {\n    return this.$flattenMailboxes().length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Account.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the mailbox at the specified index\n   */\n  Account.prototype.getItemAtIndex = function(index) {\n    var expandedMailboxes;\n\n    expandedMailboxes = this.$flattenMailboxes();\n    if (index >= 0 && index < expandedMailboxes.length)\n      return expandedMailboxes[index];\n\n    return null;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this, options).then(function(data) {\n        _this.$mailboxes = data;\n        _this.$expanded = false;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            _this.$expanded = (expandedFolders.indexOf('/' + _this.id) >= 0);\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          if (Account.$accounts)\n            _this.$expanded |= (Account.$accounts.length == 1); // Always expand single account\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - the following boolean attributes are available:\n   *   - reload: rebuild the flatten array of mailboxes from the original tree representation (this.$mailboxes)\n   *   - all: return all mailboxes, ignoring their expanstion state\n   *   - saveState: save expansion state of mailboxes to the server\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.forEach(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          // Save expansion state of mailboxes to the server\n          _.forEach(Account.$accounts, function(account) {\n            if (account.$expanded) {\n              expandedMailboxes.push('/' + account.id);\n            }\n            _.reduce(account.$$flattenMailboxes, function(expandedFolders, mailbox) {\n              if (mailbox.$expanded) {\n                expandedFolders.push('/' + mailbox.id);\n              }\n              return expandedFolders;\n            }, expandedMailboxes);\n          });\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        message.isNew = true;\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.map(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.map(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'arrival', asc: 0 }, // The default sort must match [UIxMailListActions defaultSortKey]\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account, options) {\n    var path, futureMailboxData;\n\n    if (options && options.all)\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'viewAll');\n    else\n      futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    this.$isNoInferiors = this.isNoInferiors();\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof Mailbox.prototype\n   * @desc Mark the folder as selected in the constructor unless virtual mode is active\n   */\n  Mailbox.prototype.selectFolder = function() {\n    if (!Mailbox.$virtualMode)\n      Mailbox.selectedFolder = this;\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Return the messages selected by the user.\n   * @returns Message instances\n   */\n  Mailbox.prototype.$selectedMessages = function() {\n    return _.filter(this.$messages, function(message) { return message.selected; });\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    return this.$selectedMessages().length;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is displayed in the detailed view.\n   * @param {string} messageId\n   * @returns true if the specified message is displayed\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function $selectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Return the currently visible message.\n   * @returns a Message instance or undefined if no message is displayed\n   */\n  Mailbox.prototype.$selectedMessage = function() {\n    var _this = this;\n\n    return _.find(this.$messages, function(message) { return message.uid == _this.selectedMessage; });\n  };\n\n  /**\n   * @function $selectedMessageIndex\n   * @memberof Mailbox.prototype\n   * @desc Return the index of the currently visible message.\n   * @returns a number or undefined if no message is selected\n   */\n  Mailbox.prototype.$selectedMessageIndex = function() {\n    return this.uidsMap[this.selectedMessage];\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if a message is selected.\n   * @returns true if the a message is selected\n   */\n  Mailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(this.selectedMessage);\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return !filter.searchInput || filter.searchInput.length === 0;\n        });\n        // Decompose filters that match two fields\n        _.forEach(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter, null, filters);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        index,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (angular.isDefined(this.$messages[endIndex].subject) ||\n          angular.isDefined(this.$messages[endIndex].loading)) {\n        index = Math.max(startIndex - Mailbox.PRELOAD.LOOKAHEAD, 0);\n        if (!angular.isDefined(this.$messages[index].subject) &&\n            !angular.isDefined(this.$messages[index].loading)) {\n          // Previous messages not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - Mailbox.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next messages not load; preload more headers further down\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max - 1);\n\n      if (!angular.isDefined(this.$messages[startIndex].subject) &&\n          !angular.isDefined(this.$messages[startIndex].loading) ||\n          !angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function isNoInferiors\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can contain submailboxes\n   * @returns true if the mailbox can not contain submailboxes\n   */\n  Mailbox.prototype.isNoInferiors = function() {\n    return this.flags.indexOf('noinferiors') >= 0;\n  };\n\n  /**\n   * @function isNoSelect\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox can be selected\n   * @returns true if the mailbox can not be selected\n   */\n  Mailbox.prototype.isNoSelect = function() {\n    return this.flags.indexOf('noselect') >= 0;\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.map(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.map(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(messages, flags, operation) {\n    var data = {msgUIDs: _.map(messages, 'uid'),\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data).then(function() {\n      return messages;\n    });\n  };\n\n  /**\n   * @function saveSelectedMessages\n   * @memberof Mailbox.prototype\n   * @desc Download the selected messages\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.saveSelectedMessages = function() {\n    var data, options, selectedMessages, selectedUIDs;\n\n    selectedMessages = _.filter(this.$messages, function(message) { return message.selected; });\n    selectedUIDs = _.map(selectedMessages, 'uid');\n    data = { uids: selectedUIDs };\n    options = { filename: l('Saved Messages.zip') };\n\n    return Mailbox.$$resource.download(this.id, 'saveMessages', {uids: selectedUIDs});\n  };\n\n  /**\n   * @function exportFolder\n   * @memberof Mailbox.prototype\n   * @desc Export this mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.exportFolder = function() {\n    var options;\n\n    options = { filename: this.name + '.zip' };\n\n    return Mailbox.$$resource.download(this.id, 'exportFolder', null, options);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @param {object} [options] - additional options (use {withoutTrash: true} to delete immediately)\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function(options) {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'delete', options)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $_deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from Mailbox object.\n   * @param {string[]} uids - the messages uids\n   * @param {object[]} messages - the Message instances\n   * @return the index of the first deleted message\n   */\n  Mailbox.prototype.$_deleteMessages = function(uids, messages) {\n    var _this = this, selectedUIDs, _$messages, unseen, firstIndex = this.$messages.length;\n\n    // Decrement the unseen count\n    unseen = _.filter(messages, function(message, i) { return !message.isread; });\n    this.unseenCount -= unseen.length;\n\n    // Remove messages from $messages and uidsMap\n    _.forEachRight(this.$messages, function(message, index) {\n      var selectedIndex = _.findIndex(uids, function(uid) {\n        return message.uid == uid;\n      });\n      if (selectedIndex > -1) {\n        uids.splice(selectedIndex, 1);\n        delete _this.uidsMap[message.uid];\n        if (message.uid == _this.selectedMessage)\n          delete _this.selectedMessage;\n        _this.$messages.splice(index, 1);\n        if (index < firstIndex)\n          firstIndex = index;\n      }\n      else {\n        _this.uidsMap[message.uid] -= uids.length;\n      }\n    });\n\n    // Return the index of the first deleted message\n    return firstIndex;\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @param {object} [options] - additional options (use {withoutTrash: true} to delete immediately)\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages, options) {\n    var _this = this, uids, data;\n\n    uids = _.map(messages, 'uid');\n    data = { uids: uids };\n    if (options) angular.extend(data, options);\n\n    return Mailbox.$$resource.post(this.id, 'batchDelete', data)\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof Mailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messages) {\n    var _this = this,\n        uids = _.map(messages, 'uid'),\n        method = (this.type == 'junk' ? 'markMessagesAsNotJunk' : 'markMessagesAsJunk');\n\n    return Mailbox.$$resource.post(this.id, method, {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(messages, folder) {\n    var _this = this,\n        uids = _.map(messages, 'uid');\n\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(messages, folder) {\n    var _this = this, uids;\n\n    uids = _.map(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder})\n      .then(function() {\n        return _this.$_deleteMessages(uids, messages);\n      });\n  };\n\n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this.$shadowData, function(value, key) {\n      delete _this[key];\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(response) {\n      Mailbox.$log.error(JSON.stringify(response.data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n      return response.data;\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key != 'headers' &&\n          key != 'uids' &&\n          key != 'uidsMap' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        if (!data.uids || _this.$topIndex > data.uids.length - 1)\n          _this.$topIndex = 0;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.zipObject(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.forEach(_this.headers, function(data) {\n            var msg = _.zipObject(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(messageHeaders) {\n            messageHeaders = _.zipObject(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n  /**\n   * @function $updateSubscribe\n   * @memberof Mailbox.prototype\n   * @desc Update mailbox subscription state with server.\n   */\n  Mailbox.prototype.$updateSubscribe = function() {\n    var action = this.subscribed? 'subscribe' : 'unsubscribe';\n\n    Mailbox.$$resource.post(this.id, action);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'sgMessage_STATUS', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Message_STATUS, Resource, Preferences) {\n    angular.extend(Message, {\n      STATUS: Message_STATUS,\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $avatar: angular.bind(Preferences, Preferences.avatar)\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMessage_STATUS', {\n      NOT_LOADED:      0,\n      DELAYED_LOADING: 1,\n      LOADING:         2,\n      LOADED:          3,\n      DELAYED_MS:      300\n    })\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query, excludedTags) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        if (!_.includes(excludedTags, tag))\n          results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    var _this = this, id = this.id;\n\n    function buildPath() {\n      var path;\n      path = _.map(_this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, _this.accountId); // insert account ID\n      return path.join('/');\n    }\n\n    if (angular.isUndefined(this.id) || options && options.nocache) {\n      this.id = buildPath() + '/' + this.uid; // add message UID\n      id = this.id;\n    }\n    if (options && options.asDraft && this.draftId) {\n      id = buildPath() + '/' + this.draftId; // add draft ID\n    }\n\n    return id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1), _this = this, index;\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      this.$absolutePath({nocache: true});\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          index = this.$mailbox.uidsMap[oldUID];\n          this.$mailbox.uidsMap[uid] = index;\n          delete this.$mailbox.uidsMap[oldUID];\n\n          // Update messages list of mailbox\n          _.forEach(['from', 'to', 'subject'], function(attr) {\n            _this.$mailbox.$messages[index][attr] = _this[attr];\n          });\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates the avatar URL for each email address and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.map(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.forEach(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.forEach(_this[type], function(data) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          if (data.name.length < 10)\n            // Name is already short\n            data.shortname = data.name;\n          else if (data.name.split(' ').length)\n            // If we have \"Alice Foo\" or \"Foo, Alice\" as name, we grab \"Alice\"\n            data.shortname = _.first(_.last(data.name.split(/, */)).split(/ +/)).replace('\\'','');\n        }\n        else if (data.email) {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        data.image = Message.$avatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function(max) {\n    var _this = this, result = [], count = 0, total = 0;\n\n    // Build short representation of email addresses\n    _.forEach(['to', 'cc', 'bcc'], function(type) {\n      total += _this[type]? _this[type].length : 0;\n      _.forEach(_this[type], function(data, i) {\n        if (count < max)\n          result.push(data.shortname);\n        count++;\n      });\n    });\n\n    if (total > max)\n      result.push(l('and %{0} more...', (total - max)));\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], _.bind(function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, this), recipientsCount);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.forEach(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n\n    if (this.parts)\n      _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        // Try to match a known account identity from the specified \"from\" address\n        var identity = _.find(_this.$mailbox.$account.identities, function(identity) {\n          return data.from.toLowerCase().indexOf(identity.email) !== -1;\n        });\n        if (identity)\n          data.from = identity.full;\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function $plainContent\n   * @memberof Message.prototype\n   * @returns the a plain text representation of the subject and body\n   */\n  Message.prototype.$plainContent = function() {\n    return Message.$$resource.fetch(this.$absolutePath(), 'viewplain');\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part\n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info\n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $isLoading\n   * @memberof Message.prototype\n   * @returns true if the Message content is still being retrieved from server after a specific delay\n   * @see sgMessage_STATUS\n   */\n  Message.prototype.$isLoading = function() {\n    return this.$loaded == Message.STATUS.LOADING;\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @param {object} [options] - set {useCache: true} to use already fetched data\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var _this = this, futureMessageData;\n\n    if (options && options.useCache && this.$futureMessageData) {\n      if (!this.isread) {\n        Message.$$resource.fetch(this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return this;\n    }\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload(); // fetch a new viewable version of the message\n      _this.isNew = false;\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable);\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(response) {\n      if (response.status == 'success') {\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n        return response;\n      }\n      else {\n        return Message.$q.reject(response.data);\n      }\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise.\n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Message is not loaded yet\n    this.$loaded = Message.STATUS.DELAYED_LOADING;\n    Message.$timeout(function() {\n      if (_this.$loaded != Message.STATUS.LOADED)\n        _this.$loaded = Message.STATUS.LOADING;\n    }, Message.STATUS.DELAYED_MS);\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        _this.isread = true;\n        _this.$mailbox.unseenCount--;\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        _this.$loaded = Message.STATUS.LOADED;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function(options) {\n    var message = {},\n        privateAttributes = options && options.privateAttributes;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$' || privateAttributes) {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n  /**\n   * @function download\n   * @memberof Message.prototype\n   * @desc Download the current message\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.download = function() {\n    var data, options;\n\n    data = { uids: [this.uid] };\n    options = { filename: this.subject + '.zip' };\n\n    return Message.$$resource.download(this.$mailbox.id, 'saveMessages', data, options);\n  };\n\n  /**\n   * @function downloadAttachments\n   * @memberof Message.prototype\n   * @desc Download an archive of all attachments\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.downloadAttachments = function() {\n    var options;\n\n    options = { filename: l('attachments') + \"-\" + this.uid + \".zip\" };\n\n    return Message.$$resource.download(this.$absolutePath(), 'archiveAttachments', null, options);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() {\n      _this.$isLoading = false;\n    });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function selectFolder\n   * @memberof VirtualMailbox.prototype\n   * @desc A no-op for virtual mailbox\n   */\n  VirtualMailbox.prototype.selectFolder = function() {\n    return;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.forEach(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if a message is selected among the resulting mailboxes\n   * @returns true if one message is selected\n   */\n  VirtualMailbox.prototype.hasSelectedMessage = function() {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return angular.isDefined(mailbox.selectedMessage);\n    }));\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.forEach(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Return an associative array of the selected messages for each mailbox. Keys are the mailboxes ids.\n   * @returns an associative array\n   */\n  VirtualMailbox.prototype.$selectedMessages = function() {\n    var messagesMap = {};\n    return _.transform(this.$mailboxes, function(messagesMap, mailbox) {\n      messagesMap[mailbox.id] = mailbox.$selectedMessages();\n    }, {});\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    return _.sum(_.invokeMap(this.$mailboxes, '$selectedCount'));\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @param {object} messagesMap\n   * @param {array} flags\n   * @param {string} operation\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(messagesMap, flags, operation) {\n    var data = {\n      flags: flags,\n      operation: operation\n    };\n    var allMessages = [];\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var uids = _.map(messages, 'uid');\n        allMessages.push(messages);\n        var promise = VirtualMailbox.$$resource.post(id, 'addOrRemoveLabel', _.assign(data, {msgUIDs: uids}));\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises).then(function() {\n      return _.flatten(allMessages);\n    });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$deleteMessages(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $markOrUnMarkMessagesAsJunk\n   * @memberof VirtualMailbox.prototype\n   * @desc Mark messages as junk/not junk\n   * @param {object} messagesMap\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$markOrUnMarkMessagesAsJunk = function(messagesMap) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$markOrUnMarkMessagesAsJunk(messages);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$copyMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @param {object} messagesMap\n   * @param {string} folder\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(messagesMap, folder) {\n    var promises = [];\n\n    _.forEach(messagesMap, function(messages, id) {\n      if (messages.length > 0) {\n        var mailbox = messages[0].$mailbox;\n        var promise = mailbox.$moveMessages(messages, folder);\n        promises.push(promise);\n      }\n    });\n\n    return VirtualMailbox.$q.all(promises);\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$scope', '$timeout', '$q', '$state', '$mdDialog', '$mdToast', 'stateAccounts', 'stateAccount', 'stateMailbox', 'sgHotkeys', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($window, $scope, $timeout, $q, $state, $mdDialog, $mdToast, stateAccounts, stateAccount, stateMailbox, sgHotkeys, encodeUriFilter, focus, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null,\n        defaultWindowTitle = angular.element($window.document).find('title').attr('sg-default') || \"SOGo\",\n        hotkeys = [];\n\n    // Expose controller for eventual popup windows\n    $window.$mailboxController = vm;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.searchMode = searchMode;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false, multiple: 0 };\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.markOrUnMarkMessagesAsJunk = markOrUnMarkMessagesAsJunk;\n    vm.copySelectedMessages = copySelectedMessages;\n    vm.moveSelectedMessages = moveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.markSelectedMessagesAsRead = markSelectedMessagesAsRead;\n    vm.selectAll = selectAll;\n    vm.unselectMessages = unselectMessages;\n\n\n    stateMailbox.selectFolder();\n\n    _registerHotkeys(hotkeys);\n\n    // Expunge mailbox when leaving the Mail module\n    angular.element($window).on('beforeunload', _compactBeforeUnload);\n    $scope.$on('$destroy', function() {\n      angular.element($window).off('beforeunload', _compactBeforeUnload);\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n    // Update window's title with unseen messages count of selected mailbox\n    $scope.$watch(function() { return vm.selectedFolder.unseenCount; }, function(unseenCount) {\n      var title = defaultWindowTitle + ' - ';\n      if (unseenCount)\n        title += '(' + unseenCount + ') ';\n      title += vm.selectedFolder.name;\n      $window.document.title = title;\n    });\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_search'),\n        description: l('Search'),\n        callback: searchMode\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_compose'),\n        description: l('Write a new message'),\n        callback: newMessage\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_junk'),\n        description: l('Mark the selected messages as junk'),\n        callback: markOrUnMarkMessagesAsJunk\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'space',\n        description: l('Toggle item'),\n        callback: toggleMessageSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+space',\n        description: l('Toggle range of items'),\n        callback: toggleMessageSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'up',\n        description: l('View next item'),\n        callback: _nextMessage,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'down',\n        description: l('View previous item'),\n        callback: _previousMessage,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+up',\n        description: l('Add next item to selection'),\n        callback: _addNextMessageToSelection,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+down',\n        description: l('Add previous item to selection'),\n        callback: _addPreviousMessageToSelection,\n        preventInClass: ['sg-mail-part']\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        description: l('Delete selected message or folder'),\n        callback: confirmDeleteSelectedMessages\n      }));\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function _compactBeforeUnload(event) {\n      return vm.selectedFolder.$compact();\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function searchMode() {\n      vm.mode.search = true;\n      focus('search');\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter().then(function() {\n        if (vm.selectedFolder.selectedMessage) {\n          $timeout(function() {\n            vm.selectedFolder.$topIndex = vm.selectedFolder.uidsMap[vm.selectedFolder.selectedMessage];\n          });\n        }\n      });\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n\n    /**\n     * User has pressed up arrow key\n     */\n    function _nextMessage($event) {\n      var index = vm.selectedFolder.$selectedMessageIndex();\n\n      if (angular.isDefined(index)) {\n        index--;\n        if (vm.selectedFolder.$topIndex > 0)\n          vm.selectedFolder.$topIndex--;\n      }\n      else {\n        // No message is selected, show oldest message\n        index = vm.selectedFolder.getLength() - 1;\n        vm.selectedFolder.$topIndex = vm.selectedFolder.getLength();\n      }\n\n      if (index > -1)\n        selectMessage(vm.selectedFolder.$messages[index]);\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    /**\n     * User has pressed the down arrow key\n     */\n    function _previousMessage($event) {\n      var index = vm.selectedFolder.$selectedMessageIndex();\n\n      if (angular.isDefined(index)) {\n        index++;\n        if (vm.selectedFolder.$topIndex < vm.selectedFolder.getLength())\n          vm.selectedFolder.$topIndex++;\n      }\n      else\n        // No message is selected, show newest\n        index = 0;\n\n      if (index < vm.selectedFolder.getLength())\n        selectMessage(vm.selectedFolder.$messages[index]);\n      else\n        index = -1;\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    function _addNextMessageToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedMessage()) {\n        index = _nextMessage($event);\n        if (index >= 0)\n          toggleMessageSelection($event, vm.selectedFolder.$messages[index]);\n      }\n    }\n\n    function _addPreviousMessageToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedMessage()) {\n        index = _previousMessage($event);\n        if (index >= 0)\n          toggleMessageSelection($event, vm.selectedFolder.$messages[index]);\n      }\n    }\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      var folder = vm.selectedFolder,\n          selectedIndex, nextSelectedIndex, i;\n\n      if (!message)\n        message = folder.$selectedMessage();\n      message.selected = !message.selected;\n      vm.mode.multiple += message.selected? 1 : -1;\n\n      // Select closest range of messages when shift key is pressed\n      if ($event.shiftKey && folder.$selectedCount() > 1) {\n        selectedIndex = folder.uidsMap[message.uid];\n        // Search for next selected message above\n        nextSelectedIndex = selectedIndex - 2;\n        while (nextSelectedIndex >= 0 &&\n               !folder.$messages[nextSelectedIndex].selected)\n          nextSelectedIndex--;\n        if (nextSelectedIndex < 0) {\n          // Search for next selected message bellow\n          nextSelectedIndex = selectedIndex + 2;\n          while (nextSelectedIndex < folder.getLength() &&\n                 !folder.$messages[nextSelectedIndex].selected)\n            nextSelectedIndex++;\n        }\n        if (nextSelectedIndex >= 0 && nextSelectedIndex < folder.getLength()) {\n          for (i = Math.min(selectedIndex, nextSelectedIndex);\n               i <= Math.max(selectedIndex, nextSelectedIndex);\n               i++)\n            folder.$messages[i].selected = true;\n        }\n      }\n\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    /**\n     * Batch operations\n     */\n\n    function _currentMailboxes() {\n      if (Mailbox.$virtualMode)\n        return vm.selectedFolder.$mailboxes;\n      else\n        return [vm.selectedFolder];\n    }\n\n    // Unselect current message and cleverly load the next message.\n    // This function must not be called in virtual mode.\n    function _unselectMessage(message, index) {\n      var nextMessage, previousMessage, nextIndex = index;\n      vm.mode.multiple = vm.selectedFolder.$selectedCount();\n      if (message) {\n        // Select either the next or previous message\n        if (index > 0) {\n          nextIndex -= 1;\n          nextMessage = vm.selectedFolder.$messages[nextIndex];\n        }\n        if (index < vm.selectedFolder.$messages.length)\n          previousMessage = vm.selectedFolder.$messages[index];\n        if (nextMessage) {\n          if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n        }\n        else if (previousMessage) {\n          nextIndex = index;\n          nextMessage = previousMessage;\n        }\n        if (nextMessage) {\n          vm.selectedFolder.$topIndex = nextIndex;\n          $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n        }\n        else {\n          $state.go('mail.account.mailbox');\n        }\n      }\n      else {\n        $timeout(function() {\n          console.warn('go to mailbox');\n          $state.go('mail.account.mailbox');\n        });\n      }\n    }\n\n    function confirmDeleteSelectedMessages($event) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n\n      if (messageDialog === null && _.size(selectedMessages) > 0)\n        messageDialog = Dialog.confirm(l('Confirmation'),\n                                       l('Are you sure you want to delete the selected messages?'),\n                                       { ok: l('Delete') })\n        .then(function() {\n          var deleteSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n          vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (deleteSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(deleteSelectedMessage, index);\n            }\n          }, function(response) {\n            messageDialog = Dialog.confirm(l('Warning'),\n                                           l('The messages could not be moved to the trash folder. Would you like to delete them immediately?'),\n                                           { ok: l('Delete') })\n              .then(function() {\n                vm.selectedFolder.$deleteMessages(selectedMessages, { withoutTrash: true }).then(function(index) {\n                  if (Mailbox.$virtualMode) {\n                    // When performing an advanced search, we refresh the view if the selected message\n                    // was deleted, but only once all promises have completed.\n                    if (deleteSelectedMessage)\n                      $state.go('mail.account.virtualMailbox');\n                  }\n                  else {\n                    // In normal mode, we immediately unselect the selected message.\n                    _unselectMessage(deleteSelectedMessage, index);\n                  }\n                });\n              });\n          });\n        })\n        .finally(function() {\n          messageDialog = null;\n        });\n\n      $event.preventDefault();\n    }\n\n    function markOrUnMarkMessagesAsJunk() {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) === 0 && moveSelectedMessage)\n        selectedMessages = [vm.selectedFolder.$selectedMessage()];\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$markOrUnMarkMessagesAsJunk(selectedMessages).then(function() {\n          var dstFolder = '/' + vm.account.id + '/folderINBOX';\n          if (vm.selectedFolder.type != 'junk') {\n            dstFolder = '/' + vm.account.$getMailboxByType('junk').id;\n          }\n          vm.selectedFolder.$moveMessages(selectedMessages, dstFolder).then(function(index) {\n            if (Mailbox.$virtualMode) {\n              // When performing an advanced search, we refresh the view if the selected message\n              // was deleted, but only once all promises have completed.\n              if (moveSelectedMessage)\n                $state.go('mail.account.virtualMailbox');\n            }\n            else {\n              // In normal mode, we immediately unselect the selected message.\n              _unselectMessage(moveSelectedMessage, index);\n            }\n          });\n        });\n    }\n\n    function copySelectedMessages(dstFolder) {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$copyMessages(selectedMessages, '/' + dstFolder).then(function() {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) copied', vm.selectedFolder.$selectedCount()))\n              .position('top right')\n              .hideDelay(2000));\n        });\n    }\n\n    function moveSelectedMessages(dstFolder) {\n      var moveSelectedMessage = vm.selectedFolder.hasSelectedMessage();\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      var count = vm.selectedFolder.$selectedCount();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$moveMessages(selectedMessages, '/' + dstFolder).then(function(index) {\n          $mdToast.show(\n            $mdToast.simple()\n              .content(l('%{0} message(s) moved', count))\n              .position('top right')\n              .hideDelay(2000));\n          if (Mailbox.$virtualMode) {\n            // When performing an advanced search, we refresh the view if the selected message\n            // was moved, but only once all promises have completed.\n            if (moveSelectedMessage)\n              $state.go('mail.account.virtualMailbox');\n          }\n          else {\n            // In normal mode, we immediately unselect the selected message.\n            _unselectMessage(moveSelectedMessage, index);\n          }\n        });\n    }\n\n    function selectAll() {\n      var count = 0;\n      _.forEach(_currentMailboxes(), function(folder) {\n        var i = 0, length = folder.$messages.length;\n        for (; i < length; i++)\n          folder.$messages[i].selected = true;\n        count += length;\n      });\n      vm.mode.multiple = count;\n    }\n\n    function unselectMessages() {\n      _.forEach(_currentMailboxes(), function(folder) {\n        _.forEach(folder.$messages, function(message) {\n          message.selected = false;\n        });\n      });\n      vm.mode.multiple = 0;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0)\n        vm.selectedFolder.$flagMessages(selectedMessages, '\\\\Flagged', 'add').then(function(messages) {\n          _.forEach(messages, function(message) {\n            message.isflagged = true;\n          });\n        });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0) {\n        vm.selectedFolder.$flagMessages(selectedMessages, 'seen', 'remove').then(function(messages) {\n          _.forEach(messages, function(message) {\n            if (message.isread)\n              message.$mailbox.unseenCount++;\n            message.isread = false;\n          });\n        });\n      }\n    }\n\n    function markSelectedMessagesAsRead() {\n      var selectedMessages = vm.selectedFolder.$selectedMessages();\n      if (_.size(selectedMessages) > 0) {\n        vm.selectedFolder.$flagMessages(selectedMessages, 'seen', 'add').then(function(messages) {\n          _.forEach(messages, function(message) {\n            if (!message.isread)\n              message.$mailbox.unseenCount--;\n            message.isread = true;\n          });\n        });\n      }\n    }\n\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: js; indent-tabs-mode: nil; js-indent-level: 2; -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$scope', '$state', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgConstant', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'sgHotkeys', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($scope, $state, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, sgConstant, focus, encodeUriFilter, Dialog, Settings, sgHotkeys, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox,\n        hotkeys = [];\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.toggleAccountState = toggleAccountState;\n    vm.subscribe = subscribe;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n    vm.isDroppableFolder = isDroppableFolder;\n    vm.dragSelectedMessages = dragSelectedMessages;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': '',  // no placeholder when no criteria is active\n                subject: l('Enter Subject'),\n                from:    l('Enter From'),\n                to:      l('Enter To'),\n                cc:      l('Enter Cc'),\n                body:    l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n\n    Preferences.ready().then(function() {\n      vm.showSubscribedOnly = Preferences.defaults.SOGoMailShowSubscribedFoldersOnly;\n    });\n\n    vm.refreshUnseenCount();\n\n    _registerHotkeys(hotkeys);\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        description: l('Delete selected message or folder'),\n        callback: function() {\n          if (Mailbox.selectedFolder && !Mailbox.selectedFolder.hasSelectedMessage())\n            confirmDelete(Mailbox.selectedFolder);\n        }\n      }));\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.forEach(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function toggleAccountState(account) {\n      account.$expanded = !account.$expanded;\n      account.$flattenMailboxes({ reload: true, saveState: true });\n      // Fire a window resize to recompute the virtual-repeater.\n      // This is a fix until the following issue is officially resolved:\n      // https://github.com/angular/material/issues/7309\n      $timeout(function() {\n        angular.element($window).triggerHandler('resize');\n      }, 150);\n    }\n\n    function subscribe(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/subscribe',\n        controller: SubscriptionsDialogController,\n        controllerAs: 'subscriptions',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          metadataForFolder: metadataForFolder,\n          srcAccount: account\n        }\n      }).finally(function() {\n          account.$getMailboxes({reload: true});\n      });\n\n      /**\n       * @ngInject\n       */\n      SubscriptionsDialogController.$inject = ['$scope', '$mdDialog', 'metadataForFolder', 'srcAccount'];\n      function SubscriptionsDialogController($scope, $mdDialog, metadataForFolder, srcAccount) {\n        var vm = this;\n\n        vm.loading = true;\n        vm.filter = { name: '' };\n        vm.metadataForFolder = metadataForFolder;\n        vm.account = new Account({\n          id: srcAccount.id,\n          name: srcAccount.name\n        });\n        vm.close = close;\n\n        vm.account.$getMailboxes({ reload: true, all: true }).then(function() {\n          vm.loading = false;\n        });\n\n        function close() {\n          $mdDialog.cancel();\n        }\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New Folder...'),\n                    l('Enter the new name of your folder'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder($event, account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      // Close sidenav on small devices\n      if (!$mdMedia(sgConstant['gt-md']))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Trash emptied'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Warning'),\n                     l('Do you really want to move this folder into the trash ?'),\n                     { ok: l('Delete') })\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail.account.inbox');\n            }, function(response) {\n              Dialog.confirm(l('Warning'),\n                             l('The mailbox could not be moved to the trash folder. Would you like to delete it immediately?'),\n                             { ok: l('Delete') })\n              .then(function() {\n                folder.$delete({ withoutTrash: true })\n                  .then(function() {\n                    $state.go('mail.account.inbox');\n                  }, function(response) {\n                    Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                                 l(response.error));\n                  });\n              });\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name,           icon:'inbox',          special: true};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts',        special: true};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'),   icon: 'send',          special: true};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'),  icon: 'delete',        special: true};\n      else if (folder.type == 'junk')\n        return {name: l('JunkFolderName'),   icon: 'thumb_down',    special: true};\n      else if (folder.type == 'additional')\n        return {name: folder.name,           icon: 'folder_shared', special: true};\n\n      return {name: folder.name,             icon: 'folder_open',   special: false};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = $window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    function isDroppableFolder(srcFolder, dstFolder) {\n      return (dstFolder.id != srcFolder.id) && !dstFolder.isNoSelect();\n    }\n\n    function dragSelectedMessages(srcFolder, dstFolder, mode) {\n      var dstId, messages, uids, clearMessageView, promise, success;\n\n      dstId = '/' + dstFolder.id;\n      messages = srcFolder.$selectedMessages();\n      if (messages.length === 0)\n        messages = [srcFolder.$selectedMessage()];\n      uids = _.map(messages, 'uid');\n      clearMessageView = (srcFolder.selectedMessage && uids.indexOf(srcFolder.selectedMessage) >= 0);\n\n      if (mode == 'copy') {\n        promise = srcFolder.$copyMessages(messages, dstId);\n        success = l('%{0} message(s) copied', messages.length);\n      }\n      else {\n        promise = srcFolder.$moveMessages(messages, dstId);\n        success = l('%{0} message(s) moved', messages.length);\n      }\n\n      promise.then(function() {\n        if (clearMessageView)\n          $state.go('mail.account.mailbox');\n        $mdToast.show(\n          $mdToast.simple()\n            .content(success)\n            .position('top right')\n            .hideDelay(2000));\n      });\n    }\n\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxesController', MailboxesController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdMedia', '$mdDialog', 'sgConstant', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'sgHotkeys', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Calendar', 'Component', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdMedia, $mdDialog, sgConstant, stateAccounts, stateAccount, stateMailbox, stateMessage, sgHotkeys, encodeUriFilter, sgSettings, focus, Dialog, Calendar, Component, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null, hotkeys = [];\n\n    // Expose controller\n    $window.$messageController = vm;\n\n    vm.$state = $state;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.toggleDetailedRecipients = toggleDetailedRecipients;\n    vm.filterMailtoLinks = filterMailtoLinks;\n    vm.deleteMessage = deleteMessage;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n    vm.print = print;\n    vm.convertToEvent = convertToEvent;\n    vm.convertToTask = convertToTask;\n\n\n    _registerHotkeys(hotkeys);\n\n    // One-way refresh of the parent window when modifying the message from a popup window.\n    if ($window.opener) {\n      // Update the message flags. The message must be displayed in the parent window.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(newTags, oldTags) {\n        var ctrls;\n        if (newTags || oldTags) {\n          ctrls = $parentControllers();\n          if (ctrls.messageCtrl) {\n            ctrls.messageCtrl.service.$timeout(function() {\n              ctrls.messageCtrl.showFlags = true;\n              ctrls.messageCtrl.message.flags = newTags;\n            });\n          }\n        }\n      });\n      // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n      $scope.$watch(function() { return vm.message.isflagged; }, function(isflagged, wasflagged) {\n        var ctrls = $parentControllers();\n        if (ctrls.mailboxCtrl) {\n          ctrls.mailboxCtrl.service.$timeout(function() {\n            var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n            message.isflagged = isflagged;\n          });\n        }\n      });\n    }\n    else {\n      // Flatten new tags when coming from the predefined list of tags (Message.$tags) and\n      // sync tags with server when adding or removing a tag.\n      $scope.$watchCollection(function() { return vm.message.flags; }, function(_newTags, _oldTags) {\n        var newTags, oldTags, tags;\n        if (_newTags || _oldTags) {\n          newTags = _newTags || [];\n          oldTags = _oldTags || [];\n          _.forEach(newTags, function(tag, i) {\n            if (angular.isObject(tag))\n              newTags[i] = tag.name;\n          });\n          if (newTags.length > oldTags.length) {\n            tags = _.difference(newTags, oldTags);\n            _.forEach(tags, function(tag) {\n              vm.message.addTag(tag);\n            });\n          }\n          else if (newTags.length < oldTags.length) {\n            tags = _.difference(oldTags, newTags);\n            _.forEach(tags, function(tag) {\n              vm.message.removeTag(tag);\n            });\n          }\n        }\n      });\n    }\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_reply'),\n        description: l('Reply to the message'),\n        callback: reply\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_replyall'),\n        description: l('Reply to sender and all recipients'),\n        callback: replyAll\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_forward'),\n        description: l('Forward selected message'),\n        callback: forward\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_flag'),\n        description: l('Flagged'),\n        callback: angular.bind(stateMessage, stateMessage.toggleFlag)\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'backspace',\n        callback: function($event) {\n          if (vm.mailbox.$selectedCount() === 0)\n            deleteMessage();\n          $event.preventDefault();\n        }\n      }));\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    function toggleDetailedRecipients($event) {\n      vm.$showDetailedRecipients = !vm.$showDetailedRecipients;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function filterMailtoLinks($event) {\n      var href, match, to, cc, bcc, subject, body, data;\n      if ($event.target.tagName == 'A' && 'href' in $event.target.attributes) {\n        href = $event.target.attributes.href.value;\n        match = /^mailto:([^\\?]+)/.exec(href);\n        if (match) {\n          // Recipients\n          to = _.map(decodeURIComponent(match[1]).split(','), function(email) {\n            return '<' + email + '>';\n          });\n          data = { to: to };\n          // Subject & body\n          _.forEach(['subject', 'body'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            param = (param == 'body')? 'text' : param;\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          // Recipients\n          _.forEach(['cc', 'bcc'], function(param) {\n            var re = new RegExp(param + '=([^&]+)');\n            match = re.exec(href);\n            if (match)\n              data[param] = [decodeURIComponent(match[1])];\n          });\n          newMessage($event, data); // will stop event propagation\n        }\n      }\n    }\n\n    function deleteMessage() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage && $mdMedia(sgConstant['gt-md'])) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              if (nextIndex < mailbox.$topIndex)\n                mailbox.$topIndex = nextIndex;\n              else if (nextIndex > mailbox.$lastVisibleIndex)\n                mailbox.$topIndex = nextIndex - (mailbox.$lastVisibleIndex - mailbox.$topIndex);\n            }\n            else {\n              state.go('mail.account.mailbox').then(function() {\n                message = null;\n                delete mailbox.selectedMessage;\n              });\n            }\n          }\n          catch (error) {}\n        }\n        closePopup();\n      });\n    }\n\n    function showMailEditor($event, message) {\n      if (messageDialog === null) {\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccount: vm.account,\n              stateMessage: message\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n            closePopup();\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      if ($window.opener)\n        $window.close();\n    }\n\n    function newMessage($event, editableContent) {\n      vm.account.$newMessage().then(function(message) {\n        angular.extend(message.editable, editableContent);\n        showMailEditor($event, message);\n      });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.message.$rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.message.$rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n\n    function print($event) {\n      $window.print();\n    }\n\n    function convertToEvent($event) {\n      return convertToComponent($event, 'appointment');\n    }\n\n    function convertToTask($event) {\n      return convertToComponent($event, 'task');\n    }\n\n    function convertToComponent($event, type) {\n      vm.message.$plainContent().then(function(data) {\n        var componentData = {\n          pid: Calendar.$defaultCalendar(),\n          type: type,\n          summary: data.subject,\n          comment: data.content\n        };\n        var component = new Component(componentData);\n        // UI/Templates/SchedulerUI/UIxAppointmentEditorTemplate.wox or\n        // UI/Templates/SchedulerUI/UIxTaskEditorTemplate.wox\n        var templateUrl = [\n          sgSettings.activeUser('folderURL'),\n          'Calendar',\n          'UIx' + type.capitalize() + 'EditorTemplate'\n        ].join('/');\n        return $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: templateUrl,\n          controller: 'ComponentEditorController',\n          controllerAs: 'editor',\n          locals: {\n            stateComponent: component\n          }\n        });\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$scope', '$window', '$stateParams', '$mdConstant', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccount', 'stateMessage', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($scope, $window, $stateParams, $mdConstant, $mdDialog, $mdToast, FileUploader, stateAccount, stateMessage, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = (stateMessage.editable.cc.length === 0);\n    vm.hideBcc = (stateMessage.editable.bcc.length === 0);\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.send = send;\n    vm.sendState = false;\n    vm.removeAttachment = removeAttachment;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.map(stateAccount.identities, 'full');\n    vm.recipientSeparatorKeys = [\n      $mdConstant.KEY_CODE.ENTER,\n      $mdConstant.KEY_CODE.TAB,\n      $mdConstant.KEY_CODE.COMMA,\n      $mdConstant.KEY_CODE.SEMICOLON\n    ];\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Error while uploading the file \\\"%{0}\\\":', item.file.name))\n            .position('top right')\n            .hideDelay(3000));\n        this.removeFromQueue(item);\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    // Destroy file uploader when the controller is being deactivated\n    $scope.$on('$destroy', function() { vm.uploader.destroy(); });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n\n      try {\n        if ($window.opener) {\n          if ('$mailboxController' in $window.opener &&\n              'selectedFolder' in $window.opener.$mailboxController) {\n            if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n              ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n              if ('$messageController' in $window.opener &&\n                  $window.opener.$messageController.message.uid == stateMessage.uid) {\n                // The draft is opened in the parent window\n                ctrls.draftMessageCtrl = $window.opener.$messageController;\n              }\n            }\n            else if (stateMessage.origin) {\n              originMessage = stateMessage.origin.message;\n              if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n                // The message mailbox is opened in the parent window\n                ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n              }\n            }\n          }\n        }\n      }\n      catch (e) {}\n\n      return ctrls;\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem, attrs = vm.message.editable.attachmentAttrs;\n      if (attrs)\n        for (i = 0; i < attrs.length; i++) {\n          data = {\n            name: attrs[i].filename,\n            type: attrs[i].mimetype,\n            size: parseInt(attrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = attrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item, id) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n      // Hack to allow adding the same file again\n      // See https://github.com/nervgh/angular-file-upload/issues/671\n      var element = $window.document.getElementById(id);\n      if (element)\n        angular.element(element).prop('value', null);\n    }\n\n    function cancel() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      if (vm.message.isNew && vm.message.attachmentAttrs)\n        vm.message.$mailbox.$deleteMessages([vm.message]);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        vm.message.$rawSource = null;\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      var ctrls = $parentControllers();\n\n      vm.sendState = 'sending';\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        vm.sendState = 'sent';\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n\n        // Let the user see the succesfull message before closing the dialog\n        $timeout($mdDialog.hide, 1000);\n      }, function(response) {\n        vm.sendState = 'error';\n        vm.errorMessage = response.data? response.data.message : response.statusText;\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query).then(function(cards) {\n        // Divide the matching cards by email addresses so the user can select\n        // the recipient address of her choice\n        var explodedCards = [];\n        _.forEach(_.invokeMap(cards, 'explode'), function(manyCards) {\n          _.forEach(manyCards, function(card) {\n            explodedCards.push(card);\n          });\n        });\n        // Remove duplicates\n        return _.uniqBy(explodedCards, function(card) {\n          return card.$$fullname + ' ' + card.$$email;\n        });\n      });\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list;\n\n      if (angular.isString(contact))\n        return contact;\n\n      recipients = vm.message.editable[field];\n\n      if (contact.$isList({expandable: true})) {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.forEach(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}