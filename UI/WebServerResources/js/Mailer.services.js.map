{"version":3,"file":"Mailer.services.js","sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","each","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","forEach","i","id","prototype","$getMailboxes","options","_this","$mailboxes","reload","$find","ready","expandedFolders","_visit","mailboxes","$expanded","indexOf","children","length","settings","Mail","ExpandedFolders","isString","fromJson","$flattenMailboxes","when","allMailboxes","expandedMailboxes","push","all","$$flattenMailboxes","saveState","reduce","mailbox","post","$getMailboxByType","type","_find","find","console","specialMailboxes","$getMailboxByPath","path","$newMailbox","name","toString","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","$addDelegate","user","deferred","defer","param","uid","pluck","delegates","resolve","users","status","reject","l","promise","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","index","map","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","isUndefined","$shadowData","$omit","getLength","getItemAtIndex","$loadMessage","$selectedCount","count","filter","selected","isSelectedMessage","messageId","selectedMessage","$filter","sortingAttributes","filters","isDefined","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","max","loaded","subject","Math","min","loading","$unwrapHeaders","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","flags","operation","msgUIDs","$delete","remove","$deleteMessages","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","invoke","threaded","msgs","msg","object","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","$showDetailedRecipients","to","cc","bcc","$formatFullAddresses","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","filterTags","query","re","RegExp","results","keys","tag","pair","search","description","color","draftId","$setUID","oldUID","shortname","replace","image","$shortRecipients","result","$shortAddress","address","loadUnsafeContent","showDetailedRecipients","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","attr","removeAttr","participants","participant","compile","$editableContent","text","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","origin","response","$send","startsWith","isanswered","isforwarded","$futureMessageData","isread","VirtualMailbox","setMailboxes","startSearch","params","stopSearch","resetSelectedMessage","len","k","MailboxController","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","focus","Dialog","selectMessage","go","mailboxId","toggleMessageSelection","$event","preventDefault","stopPropagation","unselectMessages","vm","confirmDeleteSelectedMessages","confirm","selectedMessages","selectedUIDs","difference","alert","copySelectedMessages","saveSelectedMessages","window","location","href","ApplicationBaseURL","selectAll","markSelectedMessagesAsFlagged","d","markSelectedMessagesAsUnread","field","sortedBy","cancelSearch","mode","newMessage","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","accounts","stateMessage","stateRecipients","service","$inject","MailboxesController","User","showAdvancedSearch","showingAdvancedSearch","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","newFolder","parentFolder","prompt","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","selectFolder","saveFolder","compactFolder","emptyTrashFolder","exportMails","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","includes","from","current","MessageController","$window","sgSettings","doDelete","findIndex","showMailEditor","recipients","close","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","closePopup","recipient","saveMessage","viewRawSource","MessageRawSourceDialogController","scope","template","tags","$watchCollection","oldTags","newTags","MessageEditorController","$stateParams","FileUploader","AddressBook","autosave","send","contactFilter","$filterAll","addRecipient","$$fullname","$$email","autosaveDrafts","SOGoMailAutoSave","autocomplete","hideCc","hideBcc","flatten","uploader","autoUpload","alias","onProgressItem","item","progress","onSuccessItem","onCancelItem","file","removeFromQueue","onErrorItem","actionName","msgObject","union","localeCode","LocaleCode","sgImip","link","iElement","attrs","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.each(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    return collection;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.each(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      _this.$$flattenMailboxes = allMailboxes;\n      if (options && options.saveState) {\n        _.reduce(allMailboxes, function(expandedFolders, mailbox) {\n          if (mailbox.$expanded) {\n            expandedFolders.push('/' + mailbox.id);\n          }\n          return expandedFolders;\n        }, expandedMailboxes);\n        Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    console.debug(mailbox);\n    console.debug(this.specialMailboxes);\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.pluck(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.pluck(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is selected.\n   * @param {string} messageId\n   * @returns true if the specified message is selected\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n    /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    this.$isLoading = true;\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return angular.isUndefined(filter.searchInput) || filter.searchInput.length === 0;\n        });\n        _.each(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (!angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max);\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.pluck(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.pluck(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    return Mailbox.$$resource.post(this.id, 'expunge');\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function() {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.remove(this.id)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(uids) {\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invoke(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.object(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.each(_this.headers, function(data) {\n            var msg = _.object(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invoke(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.each(data, function(messageHeaders) {\n            messageHeaders = _.object(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.$showDetailedRecipients = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isDefined(lazy) && lazy) {\n        this.uid = futureMessageData.uid;\n      }\n      else {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser())\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    if (angular.isUndefined(this.id) || options) {\n      var path;\n      path = _.map(this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, this.accountId); // insert account ID\n      if (options && options.asDraft && this.draftId) {\n        path.push(this.draftId); // add draft ID\n      }\n      else {\n        path.push(this.uid); // add message UID\n      }\n\n      this.id = path.join('/');\n    }\n\n    return this.id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = this.uid || -1;\n\n    if (oldUID != uid) {\n      this.uid = uid;\n      if (oldUID > -1 && this.$mailbox.uidsMap[oldUID]) {\n        this.$mailbox.uidsMap[uid] = this.$mailbox.uidsMap[oldUID];\n        this.$mailbox.uidsMap[oldUID] = null;\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.pluck(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.each(_this[type], function(data, i) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          // If we have \"Alice Foo\" as name, we grab \"Alice\"\n          if (data.name.split(' ').length)\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function() {\n    var _this = this;\n    var result = [];\n\n    // Build long representation of email addresses\n    _.each(['to', 'cc', 'bcc'], function(type) {\n      _.each(_this[type], function(data, i) {\n        result.push(data.shortname);\n      });\n    });\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function showDetailedRecipients\n   * @memberof Message.prototype\n   * @desc Mark the message to show all to/cc recipients.\n   */\n  Message.prototype.showDetailedRecipients = function() {\n    this.$showDetailedRecipients = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer and UIxMailPartMessageViewer\n          else if (angular.isArray(part.content)) {\n            _.each(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.each(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload({asDraft: false}); // fetch a new viewable version of the message\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable),\n        deferred = Message.$q.defer();\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        deferred.resolve(data);\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n      }\n      else {\n        deferred.reject(data);\n      }\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function() {\n    var message = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        message[key] = value;\n      }\n    });\n\n    // Format addresses as arrays\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      if (message[type])\n        message[type] = _.invoke(message[type].split(','), 'trim');\n    });\n\n    //Message.$log.debug(JSON.stringify(message, undefined, 2));\n    return message;\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() { _this.$isLoading = false; });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.each(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    // TODO\n    return 0;\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    // TODO\n    // var data = {msgUIDs: uids,\n    //             flags: flags,\n    //             operation: operation};\n\n    // return VirtualMailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(uids) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$state', '$timeout', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'sgFocus', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($state, $timeout, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, focus, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    Mailbox.selectedFolder = stateMailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.unselectMessages = unselectMessages;\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.copySelectedMessages = copySelectedMessages;\n    // vm.moveSelectedMessages = moveSelectedMessages;\n    vm.saveSelectedMessages = saveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false };\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      message.selected = !message.selected;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function unselectMessages() {\n      _.each(vm.selectedFolder.$messages, function(message) { message.selected = false; });\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'))\n        .then(function() {\n          // User confirmed the deletion\n          var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n          var selectedUIDs = _.pluck(selectedMessages, 'uid');\n          vm.selectedFolder.$deleteMessages(selectedUIDs).then(function() {\n            // Decrement the unseenCount accordingly\n            var unseenCount = _.filter(selectedMessages, function(message) { return !message.isread; });\n            vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n            vm.selectedFolder.unseenCount =- unseenCount;\n          },  function(error) {\n            Dialog.alert(l('Error'), error);\n          });\n        });\n    }\n\n    function copySelectedMessages(folder) {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      vm.selectedFolder.$copyMessages(selectedUIDs, '/' + folder).then(function() {\n        // TODO: refresh target mailbox?\n      }, function(error) {\n        Dialog.alert(l('Error'), error);\n      });\n    }\n\n    // function moveSelectedMessages(folder) {\n    //   var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected });\n    //   var selectedUIDs = _.pluck(selectedMessages, 'uid');\n    //   vm.selectedFolder.$moveMessages(selectedUIDs, '/' + folder).then(function() {\n    //     // TODO: refresh target mailbox?\n    //     vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n    //   });\n    // }\n\n    function saveSelectedMessages() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      window.location.href = ApplicationBaseURL + '/' + vm.selectedFolder.id + '/saveMessages?uid=' + selectedUIDs.join(\",\");\n    }\n\n    function selectAll() {\n      _.each(vm.selectedFolder.$messages, function(message) {\n        message.selected = true;\n      });\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, '\\\\Flagged', 'add').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isflagged = true;\n        });\n      });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, 'seen', 'remove').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isread = false;\n          vm.selectedFolder.unseenCount++;\n        });\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter();\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$mdDialog', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $mdDialog, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.exportMails = exportMails;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    if ($state.current.name == 'mail' && vm.accounts.length > 0 && vm.accounts[0].$mailboxes.length > 0) {\n      // Redirect to first mailbox of first account if no mailbox is selected\n      account = vm.accounts[0];\n      mailbox = account.$mailboxes[0];\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.each(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder(account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        }, function(data, status) {\n          Dialog.alert(l('Warning'), data);\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        // Success\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        // Success\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function exportMails(folder) {\n      window.location.href = ApplicationBaseURL + '/' + folder.id + '/exportFolder';\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      return {name: folder.name, icon: 'folder_open'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      }, function(error) {\n        Dialog.alert(l('Warning'), error);\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, sgSettings, focus, Dialog, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null;\n\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.doDelete = doDelete;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.saveMessage = saveMessage;\n    vm.viewRawSource = viewRawSource;\n\n    // Watch the message model \"flags\" attribute to remove on-the-fly a tag from the IMAP message\n    // when removed from the message viewer.\n    // TODO: this approach should be reviewed once md-chips supports ng-change.\n    $scope.$watchCollection('viewer.message.flags', function(oldTags, newTags) {\n      _.each(_.difference(newTags, oldTags), function(tag) {\n        vm.message.removeTag(tag);\n      });\n    });\n\n    function doDelete() {\n      stateMailbox.$deleteMessages([stateMessage.uid]).then(function() {\n        // Remove message from list of messages\n        var index = _.findIndex(stateMailbox.$messages, function(o) {\n          return o.uid == stateMessage.uid;\n        });\n        if (index != -1)\n          stateMailbox.$messages.splice(index, 1);\n        // Remove message object from scope\n        vm.message = null;\n        $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) });\n      });\n    }\n\n    function showMailEditor($event, message, recipients) {\n      if (messageDialog === null) {\n        if (!angular.isDefined(recipients))\n          recipients = [];\n\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: recipients\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox', { accountId: stateAccount.id, mailboxId: encodeUriFilter(stateMailbox.path) }).then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      $window.close();\n    }\n\n    function newMessage($event, recipient) {\n      var message = vm.account.$newMessage();\n      showMailEditor($event, message, [recipient]);\n    }\n\n    function saveMessage() {\n      window.location.href = ApplicationBaseURL + '/' + vm.mailbox.id + '/saveMessages?uid=' + vm.message.uid;\n    }\n\n    function viewRawSource($event) {\n      Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n        $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          template: [\n            '<md-dialog flex=\"80\" flex-sm=\"100\" aria-label=\"' + l('View Message Source') + '\">',\n            '  <md-dialog-content>',\n            '    <pre>',\n            data,\n            '    </pre>',\n            '  </md-dialog-content>',\n            '  <div class=\"md-actions\">',\n            '    <md-button ng-click=\"close()\">' + l('Close') + '</md-button>',\n            '  </div>',\n            '</md-dialog>'\n          ].join(''),\n          controller: MessageRawSourceDialogController\n        });\n\n        /**\n         * @ngInject\n         */\n        MessageRawSourceDialogController.$inject = ['scope', '$mdDialog'];\n        function MessageRawSourceDialogController(scope, $mdDialog) {\n          scope.close = function() {\n            $mdDialog.hide();\n          };\n        }\n      });\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$stateParams', '$mdDialog', 'FileUploader', 'stateAccounts', 'stateMessage', 'stateRecipients', '$timeout', 'sgFocus', 'Dialog', 'AddressBook', 'Preferences'];\n  function MessageEditorController($stateParams, $mdDialog, FileUploader, stateAccounts, stateMessage, stateRecipients, $timeout, focus, Dialog, AddressBook, Preferences) {\n    var vm = this;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = true;\n    vm.hideBcc = true;\n    vm.cancel = cancel;\n    vm.send = send;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.pluck(_.flatten(_.pluck(stateAccounts, 'identities')), 'full');\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      onProgressItem: function(item, progress) {\n        console.debug(item); console.debug(progress);\n      },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload();\n        console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n    }\n\n    if (angular.isDefined(stateRecipients)) {\n      vm.message.editable.to = _.union(vm.message.editable.to, _.pluck(stateRecipients, 'full'));\n    }\n\n    function cancel() {\n      // TODO: delete draft?\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      $mdDialog.cancel();\n    }\n\n    function send() {\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        $mdDialog.hide();\n      }, function(data) {\n        Dialog.alert(l(data.status), l(data.message));\n      });\n    }\n\n    function contactFilter($query) {\n      return AddressBook.$filterAll($query);\n    }\n\n    function addRecipient(user) {\n      var recipient = [];\n\n      if (angular.isString(user))\n        return user;\n      if (user.$$fullname)\n        recipient.push(user.$$fullname);\n      if (user.$$email)\n        recipient.push('<' + user.$$email + '>');\n\n      return recipient.join(' ');\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Select list based on user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageEditorController', MessageEditorController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n"]}