{"version":3,"file":"Mailer.services.js","sources":["Mailer/Account.service.js","Mailer/Mailbox.service.js","Mailer/Message.service.js","Mailer/VirtualMailbox.service.js","Mailer/MailboxController.js","Mailer/MailboxesController.js","Mailer/MessageController.js","Mailer/MessageEditorController.js","Mailer/sgIMIP.directive.js","Mailer/sgZoomableImage.directive.js"],"names":["Account","futureAccountData","then","angular","extend","this","_","each","identities","identity","fullName","full","email","$log","debug","JSON","stringify","undefined","$factory","$q","$timeout","Settings","Resource","Preferences","Mailbox","Message","$$resource","activeUser","$Preferences","$Mailbox","$Message","module","e","factory","$findAll","data","$unwrapCollection","fetch","o","collection","forEach","i","id","prototype","$getMailboxes","options","_this","$mailboxes","reload","$find","ready","expandedFolders","_visit","mailboxes","$expanded","indexOf","children","length","settings","Mail","ExpandedFolders","isString","fromJson","$flattenMailboxes","when","allMailboxes","expandedMailboxes","push","all","$$flattenMailboxes","saveState","reduce","mailbox","post","$getMailboxByType","type","_find","find","console","specialMailboxes","$getMailboxByPath","path","$newMailbox","name","toString","updateQuota","percent","format","description","Math","round","usedSpace","maxQuota","l","formatted","$quota","$newMessage","message","accountId","mailboxPath","$absolutePath","asDraft","editable","$addDelegate","user","deferred","defer","param","uid","pluck","delegates","resolve","users","status","reject","promise","$removeDelegate","splice","account","futureMailboxData","$account","init","newMailboxData","create","$unwrap","Acl","PRELOAD","$$Acl","$query","sort","asc","selectedFolder","$refreshTimeout","$virtualMode","SortingState","parseInt","constant","LOOKAHEAD","SIZE","createMailboxes","level","index","quotas","map","split","component","asCSSIdentifier","join","$isLoading","$messages","uidsMap","$id","$acl","$isEditable","isEditable","isUndefined","$shadowData","$omit","getLength","getItemAtIndex","$loadMessage","$selectedCount","count","filter","selected","isSelectedMessage","messageId","selectedMessage","$filter","sortingAttributes","filters","isDefined","unseenCount","cancel","searchInput","secondFilter","match","searchBy","copy","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","timeInterval","endIndex","uids","futureHeadersData","startIndex","max","loaded","subject","min","loading","$unwrapHeaders","$rename","findParent","parent","parentMailbox","$save","sibling","localeCompare","$compact","$setFolderAs","$emptyTrash","$markAsRead","$flagMessages","flags","operation","msgUIDs","$delete","remove","$deleteMessages","messages","unseen","firstIndex","isread","forEachRight","selectedIndex","findIndex","$copyMessages","folder","$moveMessages","$reset","value","key","save","error","$futureMailboxData","headers","invoke","threaded","msgs","msg","object","isError","j","messageHeaders","futureMessageData","lazy","$mailbox","$hasUnsafeContent","$loadUnsafeContent","to","cc","bcc","$formatFullAddresses","Gravatar","$gravatar","SOGoMailLabelsColors","$tags","SOGoMailDisplayRemoteInlineImages","$displayRemoteInlineImages","filterTags","query","re","RegExp","results","keys","tag","pair","search","color","draftId","$setUID","oldUID","constructor","shortname","replace","image","$shortRecipients","result","$shortAddress","address","allowReplyAll","recipientsCount","isDraft","loadUnsafeContent","$content","parts","part","msgclass","content","alternatePart","preferredPart","contentType","isArray","formattedMessage","$smime","validSignature","valid","mixedPart","safeContent","html","unsafeContent","document","createElement","innerHTML","suffix","element","elements","querySelectorAll","attr","removeAttr","participants","participant","compile","$editableContent","text","addTag","$addOrRemoveTag","removeTag","$imipAction","action","$reload","$sendMDN","shouldAskReceipt","$deleteAttachment","filename","attachmentAttrs","attachment","toggleFlag","isflagged","$reply","$newDraft","$replyAll","$forward","origin","response","$send","startsWith","isanswered","isforwarded","$futureMessageData","VirtualMailbox","setMailboxes","startSearch","params","stopSearch","resetSelectedMessage","len","k","MailboxController","$window","$state","$mdDialog","stateAccounts","stateAccount","stateMailbox","encodeUriFilter","Dialog","selectMessage","go","mailboxId","toggleMessageSelection","$event","preventDefault","stopPropagation","unselectMessages","vm","confirmDeleteSelectedMessages","confirm","unselectMessage","selectedMessages","nextMessage","previousMessage","nextIndex","$topIndex","copySelectedMessages","selectedUIDs","saveSelectedMessages","window","location","href","ApplicationBaseURL","selectAll","markSelectedMessagesAsFlagged","d","markSelectedMessagesAsUnread","field","sortedBy","cancelSearch","mode","newMessage","messageDialog","show","body","targetEvent","clickOutsideToClose","escapeToClose","templateUrl","controller","controllerAs","locals","accounts","stateMessage","stateRecipients","$mailboxController","service","mdVirtualRepeatContainerDirectiveDecorator","$delegate","resetScroll","$element","updateSize","scrollTo","$inject","decorator","MailboxesController","$mdToast","$mdMedia","$mdSidenav","focus","User","showAdvancedSearch","showingAdvancedSearch","hideAdvancedSearch","searchPreviousMailbox","toggleAdvancedSearch","virtualMailbox","root","folders","subfolders","addSearchParam","v","currentSearchParam","newSearchParam","pattern","n","searchParam","substring","trim","negative","newFolder","parentFolder","prompt","alert","delegate","MailboxDelegationController","$scope","userFilter","closeModal","hide","removeUser","addUser","userToAdd","searchText","editFolder","editMode","revertEditing","selectFolder","close","saveFolder","compactFolder","simple","position","hideDelay","emptyTrashFolder","exportMails","confirmDelete","markFolderRead","share","$users","usersWithACL","metadataForFolder","icon","setFolderAs","refreshUnseenCount","unseenCountFolders","includes","from","current","MessageController","sgSettings","$parentControllers","ctrls","opener","mailboxCtrl","$messageController","messageCtrl","showDetailedRecipients","$showDetailedRecipients","doDelete","state","parentCtrls","closePopup","showMailEditor","recipients","reply","replyAll","forward","edit","openPopup","url","baseURL","wId","popupWindow","open","recipient","saveMessage","toggleRawSource","showRawSource","rawSource","tags","showFlags","$watchCollection","newTags","oldTags","$watch","wasflagged","MessageEditorController","$stateParams","$mdConstant","FileUploader","AddressBook","Card","originMessage","draftMailboxCtrl","draftMessageCtrl","originMailboxCtrl","addAttachments","fileItem","mimetype","size","FileItem","uploader","progress","isUploaded","isSuccess","inlineUrl","queue","removeAttachment","item","isUploading","cancelItem","file","autosave","send","contactFilter","$filterAll","$cards","addRecipient","contact","list","c_component","refs","ref","$shortFormat","container","c_name","listId","autosaveDrafts","SOGoMailAutoSave","semicolon","autocomplete","hideCc","hideBcc","flatten","recipientSeparatorKeys","KEY_CODE","ENTER","COMMA","autoUpload","alias","removeAfterUpload","onSuccessItem","lastAttachmentAttrs","onCancelItem","removeFromQueue","onErrorItem","actionName","msgObject","union","localeCode","LocaleCode","SendMessageToastController","closeToast","sgImip","link","scope","iElement","attrs","ctrl","pathToAttachment","sgImipPath","restrict","sgImipController","delegateInvitation","delegatedTo","iCalendarAction","receiveUpdates","c_email","viewer","directive","sgZoomableImage","toggleClass","parentNode","event","target","tagName","on"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Account\n   * @constructor\n   * @param {object} futureAccountData\n   */\n  function Account(futureAccountData) {\n    // Data is immediately available\n    if (typeof futureAccountData.then !== 'function') {\n      angular.extend(this, futureAccountData);\n      _.each(this.identities, function(identity) {\n        if (identity.fullName)\n          identity.full = identity.fullName + ' <' + identity.email + '>';\n        else\n          identity.full = '<' + identity.email + '>';\n      });\n      Account.$log.debug('Account: ' + JSON.stringify(futureAccountData, undefined, 2));\n    }\n    else {\n      // The promise will be unwrapped first\n      //this.$unwrap(futureAccountData);\n    }\n  }\n\n  /**\n   * @memberof Account\n   * @desc The factory we'll use to register with Angular\n   * @returns the Account constructor\n   */\n  Account.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Preferences', 'Mailbox', 'Message', function($q, $timeout, $log, Settings, Resource, Preferences, Mailbox, Message) {\n    angular.extend(Account, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Preferences: Preferences,\n      $Mailbox: Mailbox,\n      $Message: Message\n    });\n\n    return Account; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Account in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Account', Account.$factory);\n\n  /**\n   * @memberof Account\n   * @desc Set the list of accounts and instanciate a new Account object for each item.\n   * @param {array} [data] - the metadata of the accounts\n   * @returns the list of accounts\n   */\n  Account.$findAll = function(data) {\n    if (!data) {\n      return Account.$$resource.fetch('', 'mailAccounts').then(function(o) {\n        return Account.$unwrapCollection(o);\n      });\n    }\n    return Account.$unwrapCollection(data);\n  };\n\n  /**\n   * @memberof Account\n   * @desc Unwrap to a collection of Account instances.\n   * @param {object} data - the accounts information\n   * @returns a collection of Account objects\n   */\n  Account.$unwrapCollection = function(data) {\n    var collection = [];\n\n    angular.forEach(data, function(o, i) {\n      o.id = i;\n      collection[i] = new Account(o);\n    });\n    return collection;\n  };\n\n  /**\n   * @function $getMailboxes\n   * @memberof Account.prototype\n   * @desc Fetch the list of mailboxes for the current account.\n   * @param {object} [options] - force a reload by setting 'reload' to true\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxes = function(options) {\n    var _this = this;\n\n    if (this.$mailboxes && !(options && options.reload)) {\n      return Account.$q.when(this.$mailboxes);\n    }\n    else {\n      return Account.$Mailbox.$find(this).then(function(data) {\n        _this.$mailboxes = data;\n\n        // Set expanded folders from user's settings\n        Account.$Preferences.ready().then(function() {\n          var expandedFolders,\n              _visit = function(mailboxes) {\n                _.forEach(mailboxes, function(o) {\n                  o.$expanded = (expandedFolders.indexOf('/' + o.id) >= 0);\n                  if (o.children && o.children.length > 0) {\n                    _visit(o.children);\n                  }\n                });\n              };\n          if (Account.$Preferences.settings.Mail.ExpandedFolders) {\n            if (angular.isString(Account.$Preferences.settings.Mail.ExpandedFolders))\n              // Backward compatibility support\n              expandedFolders = angular.fromJson(Account.$Preferences.settings.Mail.ExpandedFolders);\n            else\n              expandedFolders = Account.$Preferences.settings.Mail.ExpandedFolders;\n            if (expandedFolders.length > 0) {\n              _visit(_this.$mailboxes);\n            }\n          }\n          _this.$flattenMailboxes({reload: true});\n        });\n\n        return _this.$mailboxes;\n      });\n    }\n  };\n\n  /**\n   * @function $flattenMailboxes\n   * @memberof Account.prototype\n   * @desc Get a flatten array of the mailboxes.\n   * @param {object} [options] - force a reload\n   * @returns an array of Mailbox instances\n   */\n  Account.prototype.$flattenMailboxes = function(options) {\n    var _this = this,\n        allMailboxes = [],\n        expandedMailboxes = [],\n        _visit = function(mailboxes) {\n          _.each(mailboxes, function(o) {\n            allMailboxes.push(o);\n            if ((options && options.all || o.$expanded) && o.children && o.children.length > 0) {\n              _visit(o.children);\n            }\n          });\n        };\n\n    if (this.$$flattenMailboxes && !(options && (options.reload || options.all))) {\n      allMailboxes = this.$$flattenMailboxes;\n    }\n    else {\n      _visit(this.$mailboxes);\n      if (!options || !options.all) {\n        _this.$$flattenMailboxes = allMailboxes;\n        if (options && options.saveState) {\n          _.reduce(allMailboxes, function(expandedFolders, mailbox) {\n            if (mailbox.$expanded) {\n              expandedFolders.push('/' + mailbox.id);\n            }\n            return expandedFolders;\n          }, expandedMailboxes);\n          Account.$$resource.post(null, 'saveFoldersState', expandedMailboxes);\n        }\n      }\n    }\n\n    return allMailboxes;\n  };\n\n  Account.prototype.$getMailboxByType = function(type) {\n    var mailbox,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.type == type;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    console.debug(mailbox);\n    console.debug(this.specialMailboxes);\n  };\n\n  /**\n   * @function $getMailboxByPath\n   * @memberof Account.prototype\n   * @desc Recursively find a mailbox using its path\n   * @returns a promise of the HTTP operation\n   */\n  Account.prototype.$getMailboxByPath = function(path) {\n    var mailbox = null,\n        // Recursive find function\n        _find = function(mailboxes) {\n          var mailbox = _.find(mailboxes, function(o) {\n            return o.path == path;\n          });\n          if (!mailbox) {\n            angular.forEach(mailboxes, function(o) {\n              if (!mailbox && o.children && o.children.length > 0) {\n                mailbox = _find(o.children);\n              }\n            });\n          }\n          return mailbox;\n        };\n    mailbox = _find(this.$mailboxes);\n\n    return mailbox;\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Account.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMailbox = function(path, name) {\n    var _this = this;\n\n    return Account.$$resource.post(path.toString(), 'createFolder', {name: name}).then(function() {\n      _this.$getMailboxes({reload: true});\n    });\n  };\n\n  /**\n   * @function updateQuota\n   * @memberof Account.prototype\n   * @param {Object} data - the inbox quota information returned by the server\n   * @desc Update the quota definition associated to the account\n   */\n  Account.prototype.updateQuota = function(data) {\n    var percent, format, description;\n\n    percent = (Math.round(data.usedSpace * 10000 / data.maxQuota) / 100);\n    format = l(\"quotasFormat\");\n    description = format.formatted(percent, Math.round(data.maxQuota/10.24)/100);\n\n    this.$quota = { percent: percent, description: description };\n  };\n\n  /**\n   * @function $newMessage\n   * @memberof Account.prototype\n   * @desc Prepare a new Message object associated to the appropriate mailbox.\n   * @returns a promise of the HTTP operations\n   */\n  Account.prototype.$newMessage = function() {\n    var _this = this;\n\n    // Query account for draft folder and draft UID\n    return Account.$$resource.fetch(this.id.toString(), 'compose').then(function(data) {\n      Account.$log.debug('New message (compose): ' + JSON.stringify(data, undefined, 2));\n      var message = new Account.$Message(data.accountId, _this.$getMailboxByPath(data.mailboxPath), data);\n      return message;\n    }).then(function(message) {\n      // Fetch draft initial data\n      return Account.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Account.$log.debug('New message (edit): ' + JSON.stringify(data, undefined, 2));\n        angular.extend(message.editable, data);\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $addDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @see {@link User.$filter}\n   */\n  Account.prototype.$addDelegate = function(user) {\n    var _this = this,\n        deferred = Account.$q.defer(),\n        param = {uid: user.uid};\n    if (!user.uid || _.indexOf(_.pluck(this.delegates, 'uid'), user.uid) > -1) {\n      // No UID specified or user already in delegates\n      deferred.resolve();\n    }\n    else {\n      Account.$$resource.fetch(this.id.toString(), 'addDelegate', param).then(function() {\n        _this.delegates.push(user);\n        deferred.resolve(_this.users);\n      }, function(data, status) {\n        deferred.reject(l('An error occured please try again.'));\n      });\n    }\n    return deferred.promise;\n  };\n\n  /**\n   * @function $removeDelegate\n   * @memberof Account.prototype\n   * @param {Object} user - a User object with minimal set of attributes (uid, isGroup, cn, c_email)\n   * @desc Remove a user from the account's delegates\n   * @return a promise of the server call to remove the user from the account's delegates\n   */\n  Account.prototype.$removeDelegate = function(uid) {\n    var _this = this,\n        param = {uid: uid};\n    return Account.$$resource.fetch(this.id.toString(), 'removeDelegate', param).then(function() {\n      var i = _.indexOf(_.pluck(_this.delegates, 'uid'), uid);\n      if (i >= 0) {\n        _this.delegates.splice(i, 1);\n      }\n    });\n  };\n \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Mailbox\n   * @constructor\n   * @param {object} futureMailboxData - either an object literal or a promise\n   */\n  function Mailbox(account, futureMailboxData) {\n    this.$account = account;\n    // Data is immediately available\n    if (typeof futureMailboxData.then !== 'function') {\n      this.init(futureMailboxData);\n      if (this.name && !this.path) {\n        // Create a new mailbox on the server\n        var newMailboxData = Mailbox.$$resource.create('createFolder', this.name);\n        this.$unwrap(newMailboxData);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      // NOTE: this condition never happen for the moment\n      this.$unwrap(futureMailboxData);\n    }\n  }\n\n  /**\n   * @memberof Mailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the Mailbox constructor\n   */\n  Mailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Message', 'Acl', 'Preferences', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Resource, Message, Acl, Preferences, PRELOAD) {\n    angular.extend(Mailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser()),\n      $Message: Message,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: { sort: 'date', asc: 0 },\n      selectedFolder: null,\n      $refreshTimeout: null,\n      $virtualMode: false,\n      PRELOAD: PRELOAD\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Mail.SortingState) {\n        Mailbox.$query.sort = Preferences.settings.Mail.SortingState[0];\n        Mailbox.$query.asc = parseInt(Preferences.settings.Mail.SortingState[1]);\n      }\n    });\n\n    return Mailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Mailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('Mailbox', Mailbox.$factory);\n\n  /**\n   * @memberof Mailbox\n   * @desc Fetch list of mailboxes of a specific account\n   * @param {string} accountId - the account\n   * @return a promise of the HTTP operation\n   * @see {@link Account.$getMailboxes}\n   */\n  Mailbox.$find = function(account) {\n    var path, futureMailboxData;\n\n    futureMailboxData = this.$$resource.fetch(account.id.toString(), 'view');\n\n    return Mailbox.$unwrapCollection(account, futureMailboxData); // a collection of mailboxes\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Unwrap to a collection of Mailbox instances.\n   * @param {string} account - the account\n   * @param {promise} futureMailboxData - a promise of the mailboxes metadata\n   * @returns a promise of a collection of Mailbox objects\n   */\n  Mailbox.$unwrapCollection = function(account, futureMailboxData) {\n    var collection = [],\n        // Local recursive function\n        createMailboxes = function(level, mailbox) {\n          for (var i = 0; i < mailbox.children.length; i++) {\n            mailbox.children[i].level = level;\n            mailbox.children[i] = new Mailbox(account, mailbox.children[i]);\n            createMailboxes(level+1, mailbox.children[i]);\n          }\n        };\n    //collection.$futureMailboxData = futureMailboxData;\n\n    return futureMailboxData.then(function(data) {\n      return Mailbox.$timeout(function() {\n        // Each entry is spun up as a Mailbox instance\n        angular.forEach(data.mailboxes, function(data, index) {\n          data.level = 0;\n          var mailbox = new Mailbox(account, data);\n          createMailboxes(1, mailbox); // recursively create all sub-mailboxes\n          collection.push(mailbox);\n        });\n        // Update inbox quota\n        if (data.quotas)\n          account.updateQuota(data.quotas);\n        return collection;\n      });\n    });\n  };\n\n  /**\n   * @memberof Mailbox\n   * @desc Build the path of the mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @param {string} [mailboxPath] - the mailbox path\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.$absolutePath = function(accountId, mailboxPath) {\n    var path = [];\n\n    if (mailboxPath) {\n      path = _.map(mailboxPath.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n    }\n\n    path.splice(0, 0, accountId); // insert account ID\n\n    return path.join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof Mailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  Mailbox.prototype.init = function(data) {\n    var _this = this;\n    this.$isLoading = true;\n    this.$messages = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    if (this.path) {\n      this.id = this.$id();\n      this.$acl = new Mailbox.$$Acl('Mail/' + this.id);\n    }\n    if (this.type) {\n      this.$isEditable = this.isEditable();\n    }\n    if (angular.isUndefined(this.$shadowData)) {\n      // Make a copy of the data for an eventual reset\n      this.$shadowData = this.$omit();\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of messages in the mailbox\n   */\n  Mailbox.prototype.getLength = function() {\n    return this.$messages.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof Mailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message at the specified index\n   */\n  Mailbox.prototype.getItemAtIndex = function(index) {\n    var message;\n\n    if (index >= 0 && index < this.$messages.length) {\n      message = this.$messages[index];\n\n      if (this.$loadMessage(message.uid))\n        return message;\n    }\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof Mailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  Mailbox.prototype.$id = function() {\n    return Mailbox.$absolutePath(this.$account.id, this.path);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof Mailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  Mailbox.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$messages) {\n      count = (_.filter(this.$messages, function(message) { return message.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the specified message is selected.\n   * @param {string} messageId\n   * @returns true if the specified message is selected\n   */\n  Mailbox.prototype.isSelectedMessage = function(messageId) {\n    return this.selectedMessage == messageId;\n  };\n\n  /**\n   * @function $filter\n   * @memberof Mailbox.prototype\n   * @desc Fetch the messages metadata of the mailbox\n   * @param {object} [sort] - sort preferences. Defaults to descendent by date.\n   * @param {string} sort.match - either AND or OR\n   * @param {string} sort.sort - either arrival, subject, from, to, date, or size\n   * @param {boolean} sort.asc - sort is ascendant if true\n   * @param {object[]} [filters] - list of filters for the query\n   * @param {string} filters.searchBy - either subject, from, to, cc, or body\n   * @param {string} filters.searchInput - the search string to match\n   * @param {boolean} filters.negative - negate the condition\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$filter = function(sortingAttributes, filters) {\n    var _this = this, options = {};\n\n    if (!angular.isDefined(this.unseenCount))\n      this.unseenCount = 0;\n\n    Mailbox.$timeout(function() {\n      _this.$isLoading = true;\n    });\n\n    return Mailbox.$Preferences.ready().then(function() {\n\n      if (Mailbox.$refreshTimeout)\n        Mailbox.$timeout.cancel(Mailbox.$refreshTimeout);\n\n      if (sortingAttributes)\n        // Sorting preferences are common to all mailboxes\n        angular.extend(Mailbox.$query, sortingAttributes);\n\n      angular.extend(options, { sortingAttributes: Mailbox.$query });\n      if (angular.isDefined(filters)) {\n        options.filters = _.reject(filters, function(filter) {\n          return angular.isUndefined(filter.searchInput) || filter.searchInput.length === 0;\n        });\n        _.each(options.filters, function(filter) {\n          var secondFilter,\n              match = filter.searchBy.match(/(\\w+)_or_(\\w+)/);\n          if (match) {\n            options.sortingAttributes.match = 'OR';\n            filter.searchBy = match[1];\n            secondFilter = angular.copy(filter);\n            secondFilter.searchBy = match[2];\n            options.filters.push(secondFilter);\n          }\n        });\n      }\n\n      // Restart the refresh timer, if needed\n      if (!Mailbox.$virtualMode) {\n        var refreshViewCheck = Mailbox.$Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually') {\n          var f = angular.bind(_this, Mailbox.prototype.$filter);\n          Mailbox.$refreshTimeout = Mailbox.$timeout(f, refreshViewCheck.timeInterval()*1000);\n        }\n      }\n\n      var futureMailboxData = Mailbox.$$resource.post(_this.id, 'view', options);\n      return _this.$unwrap(futureMailboxData);\n    });\n  };\n\n  /**\n   * @function $loadMessage\n   * @memberof Mailbox.prototype\n   * @desc Check if the message is loaded and in any case, fetch more messages headers from the server.\n   * @returns true if the message metadata are already fetched\n   */\n  Mailbox.prototype.$loadMessage = function(messageId) {\n    var startIndex = this.uidsMap[messageId],\n        endIndex,\n        max = this.$messages.length,\n        loaded = false,\n        uids,\n        futureHeadersData;\n    if (angular.isDefined(this.uidsMap[messageId]) && startIndex < this.$messages.length) {\n      // Index is valid\n      if (angular.isDefined(this.$messages[startIndex].subject)) {// || this.$messages[startIndex].loading) {\n        // Message headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + Mailbox.PRELOAD.LOOKAHEAD, max - 1);\n      if (!angular.isDefined(this.$messages[endIndex].subject) &&\n          !angular.isDefined(this.$messages[endIndex].loading)) {\n        endIndex = Math.min(startIndex + Mailbox.PRELOAD.SIZE, max);\n        for (uids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (angular.isDefined(this.$messages[startIndex].subject) || this.$messages[startIndex].loading) {\n            // Message at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Message at this index will be loaded\n            uids.push(this.$messages[startIndex].uid);\n            this.$messages[startIndex].loading = true;\n          }\n        }\n\n        Mailbox.$log.debug('Loading UIDs ' + uids.join(' '));\n        futureHeadersData = Mailbox.$$resource.post(this.id, 'headers', {uids: uids});\n        this.$unwrapHeaders(futureHeadersData);\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function isEditable\n   * @memberof Mailbox.prototype\n   * @desc Checks if the mailbox is editable based on its type.\n   * @returns true if the mailbox is not a special folder.\n   */\n  Mailbox.prototype.isEditable = function() {\n    return this.type == 'folder';\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$rename = function() {\n    var _this = this,\n        findParent,\n        parent,\n        children,\n        i;\n\n    if (this.name == this.$shadowData.name) {\n      // Name hasn't changed\n      return Mailbox.$q.when();\n    }\n\n    // Local recursive function\n    findParent = function(parent, children) {\n      var parentMailbox = null,\n          mailbox = _.find(children, function(o) {\n            return o.path == _this.path;\n          });\n      if (mailbox) {\n        parentMailbox = parent;\n      }\n      else {\n        angular.forEach(children, function(o) {\n          if (!parentMailbox && o.children && o.children.length > 0) {\n            parentMailbox = findParent(o, o.children);\n          }\n        });\n      }\n      return parentMailbox;\n    };\n\n    // Find mailbox parent\n    parent = findParent(null, this.$account.$mailboxes);\n    if (parent === null)\n      children = this.$account.$mailboxes;\n    else\n      children = parent.children;\n\n    // Find index of mailbox among siblings\n    i = _.indexOf(_.pluck(children, 'id'), this.id);\n\n    return this.$save().then(function(data) {\n      var sibling;\n      angular.extend(_this, data); // update the path attribute\n      _this.id = _this.$id();\n\n      // Move mailbox among its siblings according to its new name\n      children.splice(i, 1);\n      sibling = _.find(children, function(o) {\n        Mailbox.$log.debug(o.name + ' ? ' + _this.name);\n        return (o.type == 'folder' && o.name.localeCompare(_this.name) > 0);\n      });\n      if (sibling) {\n        i = _.indexOf(_.pluck(children, 'id'), sibling.id);\n      }\n      else {\n        i = children.length;\n      }\n      children.splice(i, 0, _this);\n    });\n  };\n\n  /**\n   * @function $compact\n   * @memberof Mailbox.prototype\n   * @desc Compact the mailbox\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$compact = function() {\n    var _this = this;\n    return Mailbox.$$resource.post(this.id, 'expunge')\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $setFolderAs\n   * @memberof Mailbox.prototype\n   * @desc Set a folder as Drafts/Sent/Trash\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$setFolderAs = function(type) {\n    return Mailbox.$$resource.post(this.id, 'setAs' + type + 'Folder');\n  };\n\n  /**\n   * @function $emptyTrash\n   * @memberof Mailbox.prototype\n   * @desc Empty the Trash folder.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$emptyTrash = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.post(this.id, 'emptyTrash').then(function(data) {\n      // Remove all messages from the mailbox\n      _this.$messages = [];\n      _this.uidsMap = {};\n      _this.unseenCount = 0;\n\n      // If we had any submailboxes, lets do a refresh of the mailboxes list\n      if (angular.isDefined(_this.children) && _this.children.length)\n        _this.$account.$getMailboxes({reload: true});\n\n      // Update inbox quota\n      if (data.quotas)\n        _this.$account.updateQuota(data.quotas);\n    });\n  };\n\n  /**\n   * @function $markAsRead\n   * @memberof Mailbox.prototype\n   * @desc Mark all messages from folder as read\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$markAsRead = function() {\n    return Mailbox.$$resource.post(this.id, 'markRead');\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof Mailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    var data = {msgUIDs: uids,\n                flags: flags,\n                operation: operation};\n\n    return Mailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $delete\n   * @memberof Mailbox.prototype\n   * @desc Delete the mailbox from the server\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$delete = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.remove(this.id)\n      .then(function() {\n        _this.$account.$getMailboxes({reload: true});\n        return true;\n      });\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof Mailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$deleteMessages = function(messages) {\n    var _this = this, uids;\n\n    uids = _.pluck(messages, 'uid');\n    return Mailbox.$$resource.post(this.id, 'batchDelete', {uids: uids})\n      .then(function(data) {\n        var selectedMessages, selectedUIDs, unseen, firstIndex = _this.$messages.length;\n        // Decrement the unseenCount accordingly\n        unseen = _.filter(messages, function(message, i) { return !message.isread; });\n        _this.unseenCount -= unseen.length;\n        // Remove messages from $messages and uidsMap\n        _.forEachRight(_this.$messages, function(message, index) {\n          var selectedIndex = _.findIndex(uids, function(uid) {\n            return message.uid == uid;\n          });\n          if (selectedIndex > -1) {\n            uids.splice(selectedIndex, 1);\n            delete _this.uidsMap[message.uid];\n            if (message.uid == _this.selectedMessage)\n              delete _this.selectedMessage;\n            _this.$messages.splice(index, 1);\n            if (index < firstIndex)\n              firstIndex = index;\n          }\n          else {\n            _this.uidsMap[message.uid] -= uids.length;\n          }\n        });\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n\n        return firstIndex;\n      });\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof Mailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$copyMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder})\n      .then(function(data) {\n        // Update inbox quota\n        if (data.quotas)\n          _this.$account.updateQuota(data.quotas);\n      });\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof Mailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  Mailbox.prototype.$moveMessages = function(uids, folder) {\n    return Mailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n  \n  /**\n   * @function $reset\n   * @memberof Mailbox.prototype\n   * @desc Reset the original state the mailbox's data.\n   */\n  Mailbox.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key != 'children' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    this.$shadowData = this.$omit();\n  };\n\n  /**\n   * @function $save\n   * @memberof Mailbox.prototype\n   * @desc Save the mailbox to the server. This currently can only affect the name of the mailbox.\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$save = function() {\n    var _this = this;\n\n    return Mailbox.$$resource.save(this.id, this.$omit()).then(function(data) {\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit();\n      Mailbox.$log.debug(JSON.stringify(data, undefined, 2));\n      return data;\n    }, function(data) {\n      Mailbox.$log.error(JSON.stringify(data, undefined, 2));\n      // Restore previous version\n      _this.$reset();\n    });\n  };\n\n  /**\n   * @function $newMailbox\n   * @memberof Mailbox.prototype\n   * @desc Create a new mailbox on the server and refresh the list of mailboxes.\n   * @returns a promise of the HTTP operations\n   */\n  Mailbox.prototype.$newMailbox = function(path, name) {\n    return this.$account.$newMailbox(path, name);\n  };\n\n  /**\n   * @function $omit\n   * @memberof Mailbox.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Mailbox instance\n   */\n  Mailbox.prototype.$omit = function() {\n    var mailbox = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'children' &&\n          key[0] != '$') {\n        mailbox[key] = value;\n      }\n    });\n    return mailbox;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and instanciate new Message objects using received data.\n   * @param {promise} futureMailboxData - a promise of the Mailbox's metadata\n   * @returns a promise of the HTTP operation\n   */\n  Mailbox.prototype.$unwrap = function(futureMailboxData) {\n    var _this = this,\n        deferred = Mailbox.$q.defer();\n\n    this.$futureMailboxData = futureMailboxData;\n    this.$futureMailboxData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var uids, headers;\n\n        _this.init(data);\n\n        if (_this.uids) {\n          Mailbox.$log.debug('unwrapping ' + data.uids.length + ' messages');\n\n          // First entry of 'headers' are keys\n          headers = _.invoke(_this.headers[0], 'toLowerCase');\n          _this.headers.splice(0, 1);\n\n          // First entry of 'uids' are keys when threaded view is enabled\n          if (_this.threaded) {\n            uids = _this.uids[0];\n            _this.uids.splice(0, 1);\n          }\n\n          // Instanciate Message objects\n          _.reduce(_this.uids, function(msgs, msg, i) {\n            var data;\n            if (_this.threaded)\n              data = _.object(uids, msg);\n            else\n              data = {uid: msg.toString()};\n\n            // Build map of UID <=> index\n            _this.uidsMap[data.uid] = i;\n\n            msgs.push(new Mailbox.$Message(_this.$account.id, _this, data, true));\n\n            return msgs;\n          }, _this.$messages);\n\n          // Extend Message objects with received headers\n          _.each(_this.headers, function(data) {\n            var msg = _.object(headers, data),\n                i = _this.uidsMap[msg.uid.toString()];\n            _.extend(_this.$messages[i], msg);\n          });\n        }\n        Mailbox.$log.debug('mailbox ' + _this.id + ' ready');\n        _this.$isLoading = false;\n        deferred.resolve(_this.$messages);\n      });\n    }, function(data) {\n      angular.extend(_this, data);\n      _this.isError = true;\n      deferred.reject();\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof Mailbox.prototype\n   * @desc Unwrap a promise and extend matching Message objects using received data.\n   * @param {promise} futureHeadersData - a promise of some messages metadata\n   */\n  Mailbox.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      Mailbox.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invoke(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.each(data, function(messageHeaders) {\n            messageHeaders = _.object(headers, messageHeaders);\n            j = _this.uidsMap[messageHeaders.uid.toString()];\n            if (angular.isDefined(j)) {\n              _.extend(_this.$messages[j], messageHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Message\n   * @constructor\n   * @param {string} accountId - the account ID\n   * @param {string} mailboxPath - an array of the mailbox path components\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   * @param {bool} lazy - do \"lazy loading\" so we are very quick at initializing message instances\n   */\n  function Message(accountId, mailbox, futureMessageData, lazy) {\n    this.accountId = accountId;\n    this.$mailbox = mailbox;\n    this.$hasUnsafeContent = false;\n    this.$loadUnsafeContent = false;\n    this.editable = {to: [], cc: [], bcc: []};\n    this.selected = false;\n\n    // Data is immediately available\n    if (typeof futureMessageData.then !== 'function') {\n      //console.debug(JSON.stringify(futureMessageData, undefined, 2));\n      if (angular.isUndefined(lazy) || !lazy) {\n        angular.extend(this, futureMessageData);\n        this.$formatFullAddresses();\n      }\n      this.uid = parseInt(futureMessageData.uid);\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureMessageData);\n    }\n  }\n\n  /**\n   * @memberof Message\n   * @desc The factory we'll use to register with Angular\n   * @returns the Message constructor\n   */\n  Message.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Gravatar', 'Resource', 'Preferences', function($q, $timeout, $log, Settings, Gravatar, Resource, Preferences) {\n    angular.extend(Message, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Mail', Settings.activeUser())\n    });\n    // Initialize tags form user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailLabelsColors) {\n        Message.$tags = Preferences.defaults.SOGoMailLabelsColors;\n      }\n      if (Preferences.defaults.SOGoMailDisplayRemoteInlineImages &&\n          Preferences.defaults.SOGoMailDisplayRemoteInlineImages == 'always') {\n        Message.$displayRemoteInlineImages = true;\n      }\n    });\n\n    return Message; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of Message in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .factory('Message', Message.$factory);\n\n  /**\n   * @function filterTags\n   * @memberof Message.prototype\n   * @desc Search for tags (ie., mail labels) matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Message.filterTags = function(query) {\n    var re = new RegExp(query, 'i'),\n        results = [];\n\n    _.forEach(_.keys(Message.$tags), function(tag) {\n      var pair = Message.$tags[tag];\n      if (pair[0].search(re) != -1) {\n        results.push({ name: tag, description: pair[0], color: pair[1] });\n      }\n    });\n    return results;\n  };\n\n  /**\n   * @function $absolutePath\n   * @memberof Message.prototype\n   * @desc Build the path of the message\n   * @returns a string representing the path relative to the mail module\n   */\n  Message.prototype.$absolutePath = function(options) {\n    if (angular.isUndefined(this.id) || options) {\n      var path;\n      path = _.map(this.$mailbox.path.split('/'), function(component) {\n        return 'folder' + component.asCSSIdentifier();\n      });\n      path.splice(0, 0, this.accountId); // insert account ID\n      if (options && options.asDraft && this.draftId) {\n        path.push(this.draftId); // add draft ID\n      }\n      else {\n        path.push(this.uid); // add message UID\n      }\n\n      this.id = path.join('/');\n    }\n\n    return this.id;\n  };\n\n  /**\n   * @function $setUID\n   * @memberof Message.prototype\n   * @desc Change the UID of the message. This happens when saving a draft.\n   * @param {number} uid - the new message UID\n   */\n  Message.prototype.$setUID = function(uid) {\n    var oldUID = (this.uid || -1);\n\n    if (oldUID != parseInt(uid)) {\n      this.uid = parseInt(uid);\n      if (oldUID > -1) {\n        oldUID = oldUID.toString();\n        if (angular.isDefined(this.$mailbox.uidsMap[oldUID])) {\n          this.$mailbox.uidsMap[uid] = this.$mailbox.uidsMap[oldUID];\n          delete this.$mailbox.uidsMap[oldUID];\n        }\n      }\n      else {\n        // Refresh selected folder if it's the drafts mailbox\n        if (this.$mailbox.constructor.selectedFolder &&\n            this.$mailbox.constructor.selectedFolder.type == 'draft') {\n          this.$mailbox.constructor.selectedFolder.$filter();\n        }\n      }\n    }\n  };\n\n  /**\n   * @function $formatFullAddresses\n   * @memberof Message.prototype\n   * @desc Format all sender and recipients addresses with a complete description (name <email>).\n   *       This function also generates a gravatar for each email address, and a short name\n   */\n  Message.prototype.$formatFullAddresses = function() {\n    var _this = this;\n    var identities = _.pluck(_this.$mailbox.$account.identities, 'email');\n\n    // Build long representation of email addresses\n    _.each(['from', 'to', 'cc', 'bcc', 'reply-to'], function(type) {\n      _.each(_this[type], function(data, i) {\n        if (data.name && data.name != data.email) {\n          data.full = data.name + ' <' + data.email + '>';\n\n          // If we have \"Alice Foo\" as name, we grab \"Alice\"\n          if (data.name.split(' ').length)\n            data.shortname = data.name.split(' ')[0].replace('\\'','');\n        }\n        else {\n          data.full = '<' + data.email + '>';\n          data.shortname = data.email.split('@')[0];\n        }\n\n        // Generate the gravatar\n        data.image = Message.$gravatar(data.email, 32);\n\n        // If the current user is the recepient, overwrite\n        // the short name with 'me'\n        if (_.indexOf(identities, data.email) >= 0)\n          data.shortname = l('me');\n      });\n    });\n  };\n\n  /**\n   * @function $shortRecipients\n   * @memberof Message.prototype\n   * @desc Format all recipients into a very compact string\n   * @returns a compacted string of all recipients\n   */\n  Message.prototype.$shortRecipients = function() {\n    var _this = this;\n    var result = [];\n\n    // Build long representation of email addresses\n    _.each(['to', 'cc', 'bcc'], function(type) {\n      _.each(_this[type], function(data, i) {\n        result.push(data.shortname);\n      });\n    });\n\n    return result.join(', ');\n  };\n\n  /**\n   * @function $shortAddress\n   * @memberof Message.prototype\n   * @desc Format the first address of a specific type with a short description.\n   * @returns a string of the name or the email of the envelope address type\n   */\n  Message.prototype.$shortAddress = function(type) {\n    var address = '';\n    if (this[type] && this[type].length > 0) {\n      address = this[type][0].name || this[type][0].email || '';\n    }\n\n    return address;\n  };\n\n  /**\n   * @function allowReplyAll\n   * @memberof Message.prototype\n   * @desc Check if 'Reply to All' is an appropriate action on the message.\n   * @returns true if the message is not a draft and has more than one recipient\n   */\n  Message.prototype.allowReplyAll = function() {\n    var recipientsCount = 0;\n    recipientsCount = _.reduce(['to', 'cc'], function(count, type) {\n      if (this[type])\n        return count + this[type].length;\n      else\n        return count;\n    }, recipientsCount, this);\n\n    return !this.isDraft && recipientsCount > 1;\n  };\n\n  /**\n   * @function loadUnsafeContent\n   * @memberof Message.prototype\n   * @desc Mark the message to load unsafe resources when calling $content().\n   */\n  Message.prototype.loadUnsafeContent = function() {\n    this.$loadUnsafeContent = true;\n  };\n\n  /**\n   * @function $content\n   * @memberof Message.prototype\n   * @desc Get the message body as accepted by SCE (Angular Strict Contextual Escaping).\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$content = function() {\n    var _this = this,\n        parts = [],\n        _visit = function(part) {\n          part.msgclass = 'msg-attachment-other';\n          if (part.type == 'UIxMailPartAlternativeViewer') {\n            _visit(_.find(part.content, function(alternatePart) {\n              return part.preferredPart == alternatePart.contentType;\n            }));\n          }\n          // Can be used for UIxMailPartMixedViewer, UIxMailPartMessageViewer, and UIxMailPartSignedViewer\n          else if (angular.isArray(part.content)) {\n            if (part.type == 'UIxMailPartSignedViewer' && part['supports-smime'] === 1) {\n              // First line in a h1, others each in a p\n              var formattedMessage = \"<p>\" + part.error.replace(/\\n/, \"</p><p class=\\\"md-caption\\\">\");\n              formattedMessage = formattedMessage.replace(/\\n/g, \"</p><p class=\\\"md-caption\\\">\") + \"</p>\";\n              _this.$smime = {\n                validSignature: part.valid,\n                message: formattedMessage\n              };\n            }\n            _.each(part.content, function(mixedPart) {\n              _visit(mixedPart);\n            });\n          }\n          else {\n            if (angular.isUndefined(part.safeContent)) {\n              // Keep a copy of the original content\n              part.safeContent = part.content;\n              _this.$hasUnsafeContent |= (part.safeContent.indexOf(' unsafe-') > -1);\n            }\n            if (part.type == 'UIxMailPartHTMLViewer') {\n              part.html = true;\n              if (_this.$loadUnsafeContent || Message.$displayRemoteInlineImages) {\n                if (angular.isUndefined(part.unsafeContent)) {\n                  part.unsafeContent = document.createElement('div');\n                  part.unsafeContent.innerHTML = part.safeContent;\n                  angular.forEach(['src', 'data', 'classid', 'background', 'style'], function(suffix) {\n                    var elements = part.unsafeContent.querySelectorAll('[unsafe-' + suffix + ']'),\n                        element,\n                        value,\n                        i;\n                    for (i = 0; i < elements.length; i++) {\n                      element = angular.element(elements[i]);\n                      value = element.attr('unsafe-' + suffix);\n                      element.attr(suffix, value);\n                      element.removeAttr('unsafe-' + suffix);\n                    }\n                  });\n                  _this.$hasUnsafeContent = false;\n                }\n                part.content = part.unsafeContent.innerHTML;\n              }\n              else {\n                part.content = part.safeContent;\n              }\n              parts.push(part);\n            }\n            else if (part.type == 'UIxMailPartICalViewer' ||\n                     part.type == 'UIxMailPartImageViewer' ||\n                     part.type == 'UIxMailPartLinkViewer') {\n\n              // UIxMailPartICalViewer injects 'participants'\n              if (part.participants) {\n                _.each(part.participants, function(participant) {\n                  participant.image = Message.$gravatar(participant.email, 32);\n                });\n              }\n\n              if (part.type == 'UIxMailPartImageViewer')\n                part.msgclass = 'msg-attachment-image';\n              else if (part.type == 'UIxMailPartLinkViewer')\n                part.msgclass = 'msg-attachment-link';\n\n              // Trusted content that can be compiled (Angularly-speaking)\n              part.compile = true;\n              parts.push(part);\n            }\n            else {\n              part.html = true;\n              part.content = part.safeContent;\n              parts.push(part);\n            }\n          }\n        };\n    _visit(this.parts);\n\n    return parts;\n  };\n\n  /**\n   * @function $editableContent\n   * @memberof Message.prototype\n   * @desc First, fetch the draft ID that corresponds to the temporary draft object on the SOGo server.\n   * Secondly, fetch the editable message body along with other metadata such as the recipients.\n   * @returns the HTML representation of the body\n   */\n  Message.prototype.$editableContent = function() {\n    var _this = this;\n\n    return Message.$$resource.fetch(this.$absolutePath(), 'edit').then(function(data) {\n      angular.extend(_this, data);\n      return Message.$$resource.fetch(_this.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('editable = ' + JSON.stringify(data, undefined, 2));\n        angular.extend(_this.editable, data);\n        return data.text;\n      });\n    });\n  };\n\n  /**\n   * @function addTag\n   * @memberof Message.prototype\n   * @desc Add a mail tag on the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.addTag = function(tag) {\n    return this.$addOrRemoveTag('add', tag);\n  };\n\n  /**\n   * @function removeTag\n   * @memberof Message.prototype\n   * @desc Remove a mail tag from the current message.\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.removeTag = function(tag) {\n    return this.$addOrRemoveTag('remove', tag);\n  };\n\n  /**\n   * @function $addOrRemoveTag\n   * @memberof Message.prototype\n   * @desc Add or remove a mail tag on the current message.\n   * @param {string} operation - the operation name to perform\n   * @param {string} tag - the tag name\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$addOrRemoveTag = function(operation, tag) {\n    var data = {\n      operation: operation,\n      msgUIDs: [this.uid],\n      flags: tag\n    };\n\n    if (tag)\n      return Message.$$resource.post(this.$mailbox.$id(), 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $imipAction\n   * @memberof Message.prototype\n   * @desc Perform IMIP actions on the current message.\n   * @param {string} path - the path of the IMIP calendar part \n   * @param {string} action - the the IMIP action to perform\n   * @param {object} data - the delegation info \n   */\n  Message.prototype.$imipAction = function(path, action, data) {\n    var _this = this;\n    Message.$$resource.post([this.$absolutePath(), path].join('/'), action, data).then(function(data) {\n      Message.$timeout(function() {\n        _this.$reload();\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $sendMDN\n   * @memberof Message.prototype\n   * @desc Send MDN response for current email message\n   */\n  Message.prototype.$sendMDN = function() {\n    this.shouldAskReceipt = 0;\n    return Message.$$resource.post(this.$absolutePath(), 'sendMDN');\n  };\n\n  /**\n   * @function $deleteAttachment\n   * @memberof Message.prototype\n   * @desc Delete an attachment from a message being composed\n   * @param {string} filename - the filename of the attachment to delete\n   */\n  Message.prototype.$deleteAttachment = function(filename) {\n    var action = 'deleteAttachment?filename=' + filename;\n    var _this = this;\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.editable.attachmentAttrs = _.filter(_this.editable.attachmentAttrs, function(attachment) {\n          return attachment.filename != filename;\n        });\n      }, function() {\n        // TODO: show toast\n      });\n    });\n  };\n\n  /**\n   * @function $markAsFlaggedOrUnflagged\n   * @memberof Message.prototype\n   * @desc Add or remove a the \\\\Flagged flag on the current message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.toggleFlag = function() {\n    var _this = this,\n        action = 'markMessageFlagged';\n\n    if (this.isflagged)\n      action = 'markMessageUnflagged';\n\n    return Message.$$resource.post(this.$absolutePath(), action).then(function(data) {\n      Message.$timeout(function() {\n        _this.isflagged = !_this.isflagged;\n      });\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$reload = function(options) {\n    var futureMessageData;\n\n    futureMessageData = Message.$$resource.fetch(this.$absolutePath(options), 'view');\n\n    return this.$unwrap(futureMessageData);\n  };\n\n  /**\n   * @function $reply\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$reply = function() {\n    return this.$newDraft('reply');\n  };\n\n  /**\n   * @function $replyAll\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply to the sender and all recipients.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$replyAll = function() {\n    return this.$newDraft('replyall');\n  };\n\n  /**\n   * @function $forward\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a forward.\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$forward = function() {\n    return this.$newDraft('forward');\n  };\n\n  /**\n   * @function $newDraft\n   * @memberof Message.prototype\n   * @desc Prepare a new Message object as a reply or a forward of the current message and associated\n   * to the draft mailbox.\n   * @see {@link Account.$newMessage}\n   * @see {@link Message.$editableContent}\n   * @see {@link Message.$reply}\n   * @see {@link Message.$replyAll}\n   * @see {@link Message.$forwad}\n   * @param {string} action - the HTTP action to perform on the message\n   * @returns a promise of the HTTP operations\n   */\n  Message.prototype.$newDraft = function(action) {\n    var _this = this;\n\n    // Query server for draft folder and draft UID\n    return Message.$$resource.fetch(this.$absolutePath(), action).then(function(data) {\n      var mailbox, message;\n      Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2));\n      mailbox = _this.$mailbox.$account.$getMailboxByPath(data.mailboxPath);\n      message = new Message(data.accountId, mailbox, data);\n      // Fetch draft initial data\n      return Message.$$resource.fetch(message.$absolutePath({asDraft: true}), 'edit').then(function(data) {\n        Message.$log.debug('New ' + action + ': ' + JSON.stringify(data, undefined, 2) + ' original UID: ' + _this.uid);\n        angular.extend(message.editable, data);\n\n        // We keep a reference to our original message in order to update the flags\n        message.origin = {message: _this, action: action};\n        return message;\n      });\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Message.prototype\n   * @desc Save the message to the server.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$save = function() {\n    var _this = this,\n        data = this.editable;\n\n    Message.$log.debug('save = ' + JSON.stringify(data, undefined, 2));\n\n    return Message.$$resource.save(this.$absolutePath({asDraft: true}), data).then(function(response) {\n      Message.$log.debug('save = ' + JSON.stringify(response, undefined, 2));\n      _this.$setUID(response.uid);\n      _this.$reload({asDraft: false}); // fetch a new viewable version of the message\n    });\n  };\n\n  /**\n   * @function $send\n   * @memberof Message.prototype\n   * @desc Send the message.\n   * @returns a promise of the HTTP operation\n   */\n  Message.prototype.$send = function() {\n    var _this = this,\n        data = angular.copy(this.editable),\n        deferred = Message.$q.defer();\n\n    Message.$log.debug('send = ' + JSON.stringify(data, undefined, 2));\n\n    Message.$$resource.post(this.$absolutePath({asDraft: true}), 'send', data).then(function(data) {\n      if (data.status == 'success') {\n        deferred.resolve(data);\n        if (angular.isDefined(_this.origin)) {\n          if (_this.origin.action.startsWith('reply'))\n            _this.origin.message.isanswered = true;\n          else if (_this.origin.action == 'forward')\n            _this.origin.message.isforwarded = true;\n        }\n      }\n      else {\n        deferred.reject(data);\n      }\n    });\n\n    return deferred.promise;\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof Message.prototype\n   * @desc Unwrap a promise. \n   * @param {promise} futureMessageData - a promise of some of the Message's data\n   */\n  Message.prototype.$unwrap = function(futureMessageData) {\n    var _this = this;\n\n    // Resolve and expose the promise\n    this.$futureMessageData = futureMessageData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      if (_this.isread === 0) {\n        Message.$$resource.fetch(_this.$absolutePath(), 'markMessageRead').then(function() {\n          Message.$timeout(function() {\n            _this.isread = true;\n            _this.$mailbox.unseenCount--;\n          });\n        });\n      }\n      return Message.$timeout(function() {\n        angular.extend(_this, data);\n        _this.$formatFullAddresses();\n        _this.$loadUnsafeContent = false;\n        return _this;\n      });\n    });\n\n    return this.$futureMessageData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Message.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Message instance\n   */\n  Message.prototype.$omit = function() {\n    var message = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        message[key] = value;\n      }\n    });\n\n    return message;\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name VirtualMailbox\n   * @constructor\n   * @param {object} account - the mail account associated with the virtual search\n   */\n  function VirtualMailbox(account) {\n    this.$account = account;\n  }\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc The factory we'll use to register with Angular\n   * @returns the VirtualMailbox constructor\n   */\n  VirtualMailbox.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Message', 'Mailbox', 'sgMailbox_PRELOAD', function($q, $timeout, $log, Settings, Mailbox, Message, PRELOAD) {\n    angular.extend(VirtualMailbox, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $Message: Message,\n      selectedFolder: null,\n      PRELOAD: PRELOAD\n    });\n\n    return VirtualMailbox; // return constructor\n  }];\n\n  /**\n   * @module SOGo.MailerUI\n   * @desc Factory registration of VirtualMailbox in Angular module.\n   */\n  try {\n    angular.module('SOGo.MailerUI');\n  }\n  catch(e) {\n    angular.module('SOGo.MailerUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.MailerUI')\n    .constant('sgMailbox_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('VirtualMailbox', VirtualMailbox.$factory);\n\n  /**\n   * @memberof VirtualMailbox\n   * @desc Build the path of the virtual mailbox (or account only).\n   * @param {string} accountId - the account ID\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.$absolutePath = function(accountId) {\n    return [accountId, \"virtual\"].join('/');\n  };\n\n  /**\n   * @function init\n   * @memberof VirtualMailbox.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of mailbox\n   */\n  VirtualMailbox.prototype.init = function(data) {\n    this.$isLoading = false;\n    this.$mailboxes = [];\n    this.uidsMap = {};\n    angular.extend(this, data);\n    this.id = this.$id();\n  };\n\n  VirtualMailbox.prototype.setMailboxes = function(data) {\n    this.$mailboxes = data;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      mailbox.$messages = [];\n      mailbox.uidsMap = {};\n    });\n  };\n\n  VirtualMailbox.prototype.startSearch = function(match, params) {\n    var _this = this,\n        search = VirtualMailbox.$q.when();\n\n    this.$isLoading = true;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      search = search.then(function() {\n        if (_this.$isLoading) {\n          VirtualMailbox.$log.debug(\"searching mailbox \" + mailbox.path);\n          return mailbox.$filter( {sort: \"date\", asc: false, match: match}, params);\n        }\n      });\n    });\n\n    search.finally(function() { _this.$isLoading = false; });\n  };\n\n  VirtualMailbox.prototype.stopSearch = function() {\n    VirtualMailbox.$log.debug(\"stopping search...\");\n    this.$isLoading = false;\n  };\n\n  /**\n   * @function resetSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete 'selectedMessage' attribute of all submailboxes.\n   */\n  VirtualMailbox.prototype.resetSelectedMessage = function() {\n    _.each(this.$mailboxes, function(mailbox) {\n      delete mailbox.selectedMessage;\n    });\n  };\n\n  /**\n   * @function isSelectedMessage\n   * @memberof VirtualMailbox.prototype\n   * @desc Check if the message of the specified mailbox is selected.\n   * @param {string} messageId\n   * @param {string} mailboxPath\n   * @returns true if the specified message is selected\n   */\n  VirtualMailbox.prototype.isSelectedMessage = function(messageId, mailboxPath) {\n    return angular.isDefined(_.find(this.$mailboxes, function(mailbox) {\n      return mailbox.path == mailboxPath && mailbox.selectedMessage == messageId;\n    }));\n  };\n\n  /**\n   * @function getLength\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of items in the mailbox\n   */\n  VirtualMailbox.prototype.getLength = function() {\n    var len = 0;\n\n    if (!angular.isDefined(this.$mailboxes))\n      return len;\n\n    _.each(this.$mailboxes, function(mailbox) {\n      len += mailbox.$messages.length;\n    });\n\n    return len;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof VirtualMailbox.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the message as the specified index\n   */\n  VirtualMailbox.prototype.getItemAtIndex = function(index) {\n    var i, j, k, mailbox, message;\n\n    if (angular.isDefined(this.$mailboxes) && index >= 0) {\n      i = 0;\n      for (j = 0; j < this.$mailboxes.length; j++) {\n        mailbox = this.$mailboxes[j];\n        for (k = 0; k < mailbox.$messages.length; i++, k++) {\n          message = mailbox.$messages[k];\n          if (i == index) {\n            if (mailbox.$loadMessage(message.uid))\n              return message;\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  /**\n   * @function $id\n   * @memberof VirtualMailbox.prototype\n   * @desc Build the unique ID to identified the mailbox.\n   * @returns a string representing the path relative to the mail module\n   */\n  VirtualMailbox.prototype.$id = function() {\n    return VirtualMailbox.$absolutePath(this.$account.id);\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof VirtualMailbox.prototype\n   * @desc Return the number of messages selected by the user.\n   * @returns the number of selected messages\n   */\n  VirtualMailbox.prototype.$selectedCount = function() {\n    // TODO\n    return 0;\n  };\n\n  /**\n   * @function $flagMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Add or remove a flag on a message set\n   * @returns a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$flagMessages = function(uids, flags, operation) {\n    // TODO\n    // var data = {msgUIDs: uids,\n    //             flags: flags,\n    //             operation: operation};\n\n    // return VirtualMailbox.$$resource.post(this.id, 'addOrRemoveLabel', data);\n  };\n\n  /**\n   * @function $deleteMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Delete multiple messages from mailbox.\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$deleteMessages = function(uids) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'batchDelete', {uids: uids});\n  };\n\n  /**\n   * @function $copyMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Copy multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$copyMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'copyMessages', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveMessages\n   * @memberof VirtualMailbox.prototype\n   * @desc Move multiple messages from the current mailbox to a target one\n   * @return a promise of the HTTP operation\n   */\n  VirtualMailbox.prototype.$moveMessages = function(uids, folder) {\n    // TODO\n    //return VirtualMailbox.$$resource.post(this.id, 'moveMessages', {uids: uids, folder: folder});\n  };\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxController.$inject = ['$window', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'encodeUriFilter', 'Dialog', 'Account', 'Mailbox'];\n  function MailboxController($window, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, encodeUriFilter, Dialog, Account, Mailbox) {\n    var vm = this, messageDialog = null;\n\n    // Expose controller\n    $window.$mailboxController = vm;\n\n    Mailbox.selectedFolder = stateMailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.selectedFolder = stateMailbox;\n    vm.selectMessage = selectMessage;\n    vm.toggleMessageSelection = toggleMessageSelection;\n    vm.unselectMessages = unselectMessages;\n    vm.confirmDeleteSelectedMessages = confirmDeleteSelectedMessages;\n    vm.copySelectedMessages = copySelectedMessages;\n    // vm.moveSelectedMessages = moveSelectedMessages;\n    vm.saveSelectedMessages = saveSelectedMessages;\n    vm.markSelectedMessagesAsFlagged = markSelectedMessagesAsFlagged;\n    vm.markSelectedMessagesAsUnread = markSelectedMessagesAsUnread;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.mode = { search: false };\n\n    function selectMessage(message) {\n      if (Mailbox.$virtualMode)\n        $state.go('mail.account.virtualMailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n      else\n        $state.go('mail.account.mailbox.message', {accountId: stateAccount.id, mailboxId: encodeUriFilter(message.$mailbox.path), messageId: message.uid});\n    }\n\n    function toggleMessageSelection($event, message) {\n      message.selected = !message.selected;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function unselectMessages() {\n      _.each(vm.selectedFolder.$messages, function(message) { message.selected = false; });\n    }\n\n    function confirmDeleteSelectedMessages() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected messages?'))\n        .then(function() {\n          // User confirmed the deletion\n          var unselectMessage = false;\n          var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) {\n            if (message.selected &&\n                message.uid == vm.selectedFolder.selectedMessage)\n              unselectMessage = true;\n            return message.selected;\n          });\n          vm.selectedFolder.$deleteMessages(selectedMessages).then(function(index) {\n            var nextMessage, previousMessage, nextIndex = index;\n            if (unselectMessage) {\n              if (Mailbox.$virtualMode) {\n                $state.go('mail.account.virtualMailbox');\n              }\n              else {\n                // Select either the next or previous message\n                if (index > 0) {\n                  nextIndex -= 1;\n                  nextMessage = vm.selectedFolder.$messages[nextIndex];\n                }\n                if (index < vm.selectedFolder.$messages.length)\n                  previousMessage = vm.selectedFolder.$messages[index];\n                if (nextMessage) {\n                  if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n                    nextIndex = index;\n                    nextMessage = previousMessage;\n                  }\n                }\n                else if (previousMessage) {\n                  nextIndex = index;\n                  nextMessage = previousMessage;\n                }\n                if (nextMessage) {\n                  $state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n                  vm.selectedFolder.$topIndex = nextIndex;\n                }\n                else {\n                  $state.go('mail.account.mailbox');\n                }\n              }\n            }\n          });\n        });\n    }\n\n    function copySelectedMessages(folder) {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      vm.selectedFolder.$copyMessages(selectedUIDs, '/' + folder);\n    }\n\n    // function moveSelectedMessages(folder) {\n    //   var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected });\n    //   var selectedUIDs = _.pluck(selectedMessages, 'uid');\n    //   vm.selectedFolder.$moveMessages(selectedUIDs, '/' + folder).then(function() {\n    //     // TODO: refresh target mailbox?\n    //     vm.selectedFolder.$messages = _.difference(vm.selectedFolder.$messages, selectedMessages);\n    //   });\n    // }\n\n    function saveSelectedMessages() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n      window.location.href = ApplicationBaseURL + '/' + vm.selectedFolder.id + '/saveMessages?uid=' + selectedUIDs.join(\",\");\n    }\n\n    function selectAll() {\n      var i = 0, length = vm.selectedFolder.$messages.length;\n      for (; i < length; i++)\n        vm.selectedFolder.$messages[i].selected = true;\n    }\n\n    function markSelectedMessagesAsFlagged() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, '\\\\Flagged', 'add').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isflagged = true;\n        });\n      });\n    }\n\n    function markSelectedMessagesAsUnread() {\n      var selectedMessages = _.filter(vm.selectedFolder.$messages, function(message) { return message.selected; });\n      var selectedUIDs = _.pluck(selectedMessages, 'uid');\n\n      vm.selectedFolder.$flagMessages(selectedUIDs, 'seen', 'remove').then(function(d) {\n        // Success\n        _.forEach(selectedMessages, function(message) {\n          message.isread = false;\n          vm.selectedFolder.unseenCount++;\n        });\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter({ sort: field });\n    }\n\n    function sortedBy(field) {\n      return Mailbox.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter();\n    }\n\n    function newMessage($event) {\n      var message;\n\n      if (messageDialog === null) {\n        message = vm.account.$newMessage();\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateMessage: message,\n              stateRecipients: []\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n          });\n      }\n    }\n  }\n\n  angular\n    .module('material.components.virtualRepeat')\n    .decorator('mdVirtualRepeatContainerDirective', mdVirtualRepeatContainerDirectiveDecorator);\n\n  /**\n   * @ngInject\n   */\n  mdVirtualRepeatContainerDirectiveDecorator.$inject = ['$delegate'];\n  function mdVirtualRepeatContainerDirectiveDecorator($delegate) {\n    $delegate[0].controller.prototype.resetScroll = function() {\n      // Don't scroll to top if current virtual repeater is the messages list\n      // but do update the container size\n      if (this.$element.parent().attr('id') == 'messagesList')\n        this.updateSize();\n      else\n        this.scrollTo(0);\n    };\n    return $delegate;\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('MailboxController', MailboxController);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MailboxesController.$inject = ['$state', '$timeout', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'sgFocus', 'encodeUriFilter', 'Dialog', 'sgSettings', 'Account', 'Mailbox', 'VirtualMailbox', 'User', 'Preferences', 'stateAccounts'];\n  function MailboxesController($state, $timeout, $mdDialog, $mdToast, $mdMedia, $mdSidenav, focus, encodeUriFilter, Dialog, Settings, Account, Mailbox, VirtualMailbox, User, Preferences, stateAccounts) {\n    var vm = this,\n        account,\n        mailbox;\n\n    vm.service = Mailbox;\n    vm.accounts = stateAccounts;\n    vm.newFolder = newFolder;\n    vm.delegate = delegate;\n    vm.editFolder = editFolder;\n    vm.revertEditing = revertEditing;\n    vm.selectFolder = selectFolder;\n    vm.saveFolder = saveFolder;\n    vm.compactFolder = compactFolder;\n    vm.emptyTrashFolder = emptyTrashFolder;\n    vm.exportMails = exportMails;\n    vm.confirmDelete = confirmDelete;\n    vm.markFolderRead = markFolderRead;\n    vm.share = share;\n    vm.metadataForFolder = metadataForFolder;\n    vm.setFolderAs = setFolderAs;\n    vm.refreshUnseenCount = refreshUnseenCount;\n\n    // Advanced search options\n    vm.showingAdvancedSearch = false;\n    vm.currentSearchParam = '';\n    vm.addSearchParam = addSearchParam;\n    vm.newSearchParam = newSearchParam;\n    vm.showAdvancedSearch = showAdvancedSearch;\n    vm.hideAdvancedSearch = hideAdvancedSearch;\n    vm.toggleAdvancedSearch = toggleAdvancedSearch;\n    vm.search = {\n      options: {'': l('Select a criteria'),\n                subject: l('Enter Subject'),\n                from: l('Enter From'),\n                to: l('Enter To'),\n                cc: l('Enter Cc'),\n                body: l('Enter Body')\n               },\n      mailbox: 'INBOX',\n      subfolders: 1,\n      match: 'AND',\n      params: []\n    };\n\n    if ($state.current.name == 'mail' && vm.accounts.length > 0 && vm.accounts[0].$mailboxes.length > 0) {\n      // Redirect to first mailbox of first account if no mailbox is selected\n      account = vm.accounts[0];\n      mailbox = account.$mailboxes[0];\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function showAdvancedSearch(path) {\n      vm.showingAdvancedSearch = true;\n      vm.search.mailbox = path;\n    }\n\n    function hideAdvancedSearch() {\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n\n      account = vm.accounts[0];\n      mailbox = vm.searchPreviousMailbox;\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(mailbox.path) });\n    }\n\n    function toggleAdvancedSearch() {\n      if (Mailbox.selectedFolder.$isLoading) {\n        // Stop search\n        vm.virtualMailbox.stopSearch();\n      }\n      else {\n        // Start search\n        var root, mailboxes = [],\n            _visit = function(folders) {\n              _.each(folders, function(o) {\n                mailboxes.push(o);\n                if (o.children && o.children.length > 0) {\n                  _visit(o.children);\n                }\n              });\n            };\n\n        vm.virtualMailbox = new VirtualMailbox(vm.accounts[0]);\n\n        // Don't set the previous selected mailbox if we're in virtual mode\n        // That allows users to do multiple advanced search but return\n        // correctly to the previously selected mailbox once done.\n        if (!Mailbox.$virtualMode)\n          vm.searchPreviousMailbox = Mailbox.selectedFolder;\n\n        Mailbox.selectedFolder = vm.virtualMailbox;\n        Mailbox.$virtualMode = true;\n\n        if (angular.isDefined(vm.search.mailbox)) {\n          root = vm.accounts[0].$getMailboxByPath(vm.search.mailbox);\n          mailboxes.push(root);\n          if (vm.search.subfolders && root.children.length)\n            _visit(root.children);\n        }\n        else {\n          mailboxes = vm.accounts[0].$flattenMailboxes();\n        }\n\n        vm.virtualMailbox.setMailboxes(mailboxes);\n        vm.virtualMailbox.startSearch(vm.search.match, vm.search.params);\n        $state.go('mail.account.virtualMailbox', { accountId: vm.accounts[0].id });\n      }\n    }\n\n    function addSearchParam(v) {\n      vm.currentSearchParam = v;\n      focus('advancedSearch');\n      return false;\n    }\n\n    function newSearchParam(pattern) {\n      if (pattern.length && vm.currentSearchParam.length) {\n        var n = 0, searchParam = vm.currentSearchParam;\n        if (pattern.startsWith(\"!\")) {\n          n = 1;\n          pattern = pattern.substring(1).trim();\n        }\n        vm.currentSearchParam = '';\n        return { searchBy: searchParam, searchInput: pattern, negative: n };\n      }\n    }\n\n    function newFolder(parentFolder) {\n      Dialog.prompt(l('New folder'),\n                    l('Enter the new name of your folder :'))\n        .then(function(name) {\n          parentFolder.$newMailbox(parentFolder.id, name)\n            .then(function() {\n              // success\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while creating the mailbox \"%{0}\".', name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function delegate(account) {\n      $mdDialog.show({\n        templateUrl: account.id + '/delegation', // UI/Templates/MailerUI/UIxMailUserDelegation.wox\n        controller: MailboxDelegationController,\n        controllerAs: 'delegate',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          User: User,\n          account: account\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      MailboxDelegationController.$inject = ['$scope', '$mdDialog', 'User', 'account'];\n      function MailboxDelegationController($scope, $mdDialog, User, account) {\n        var vm = this;\n\n        vm.users = account.delegates;\n        vm.account = account;\n        vm.userToAdd = '';\n        vm.searchText = '';\n        vm.userFilter = userFilter;\n        vm.closeModal = closeModal;\n        vm.removeUser = removeUser;\n        vm.addUser = addUser;\n\n        function userFilter($query) {\n          return User.$filter($query, account.delegates);\n        }\n\n        function closeModal() {\n          $mdDialog.hide();\n        }\n\n        function removeUser(user) {\n          account.$removeDelegate(user.uid).catch(function(data, status) {\n            Dialog.alert(l('Warning'), l('An error occured please try again.'));\n          });\n        }\n\n        function addUser(data) {\n          if (data) {\n            account.$addDelegate(data).then(function() {\n              vm.userToAdd = '';\n              vm.searchText = '';\n            }, function(error) {\n              Dialog.alert(l('Warning'), error);\n            });\n          }\n        }\n      }\n    } // delegate\n\n    function editFolder(folder) {\n      vm.editMode = folder.path;\n      focus('mailboxName_' + folder.path);\n    }\n\n    function revertEditing(folder) {\n      folder.$reset();\n      vm.editMode = false;\n    }\n\n    function selectFolder($event, account, folder) {\n      if (vm.editMode == folder.path)\n        return;\n      vm.editMode = false;\n      vm.showingAdvancedSearch = false;\n      vm.service.$virtualMode = false;\n      // Close sidenav on small devices\n      if ($mdMedia('xs'))\n        $mdSidenav('left').close();\n      $state.go('mail.account.mailbox', { accountId: account.id, mailboxId: encodeUriFilter(folder.path) });\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveFolder(folder) {\n      folder.$rename()\n        .then(function(data) {\n          vm.editMode = false;\n        });\n    }\n\n    function compactFolder(folder) {\n      folder.$compact().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Folder compacted'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function emptyTrashFolder(folder) {\n      folder.$emptyTrash().then(function() {\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Trash emptied'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function exportMails(folder) {\n      window.location.href = ApplicationBaseURL + '/' + folder.id + '/exportFolder';\n    }\n\n    function confirmDelete(folder) {\n      Dialog.confirm(l('Confirmation'), l('Do you really want to move this folder into the trash ?'))\n        .then(function() {\n          folder.$delete()\n            .then(function() {\n              $state.go('mail');\n            }, function(data, status) {\n              Dialog.alert(l('An error occured while deleting the mailbox \"%{0}\".', folder.name),\n                           l(data.error));\n            });\n        });\n    }\n\n    function markFolderRead(folder) {\n      folder.$markAsRead();\n    }\n\n    function share(folder) {\n      // Fetch list of ACL users\n      folder.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: folder.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: folder.$acl.users,\n            User: User,\n            folder: folder\n          }\n        });\n      });\n    } // share\n\n    function metadataForFolder(folder) {\n      if (folder.type == 'inbox')\n        return {name: folder.name, icon:'inbox'};\n      else if (folder.type == 'draft')\n        return {name: l('DraftsFolderName'), icon: 'drafts'};\n      else if (folder.type == 'sent')\n        return {name: l('SentFolderName'), icon: 'send'};\n      else if (folder.type == 'trash')\n        return {name: l('TrashFolderName'), icon: 'delete'};\n      else if (folder.type == 'additional')\n        return {name: folder.name, icon: 'folder_shared'};\n\n      return {name: folder.name, icon: 'folder_open'};\n    }\n\n    function setFolderAs(folder, type) {\n      folder.$setFolderAs(type).then(function() {\n        folder.$account.$getMailboxes({reload: true});\n      });\n    }\n\n    function refreshUnseenCount() {\n      var unseenCountFolders = window.unseenCountFolders;\n\n      _.forEach(vm.accounts, function(account) {\n\n        // Always include the INBOX\n        if (!_.includes(unseenCountFolders, account.id + '/folderINBOX'))\n          unseenCountFolders.push(account.id + '/folderINBOX');\n\n        _.forEach(account.$$flattenMailboxes, function(mailbox) {\n          if (angular.isDefined(mailbox.unseenCount) &&\n              !_.includes(unseenCountFolders, mailbox.id))\n            unseenCountFolders.push(mailbox.id);\n        });\n      });\n\n      Account.$$resource.post('', 'unseenCount', {mailboxes: unseenCountFolders}).then(function(data) {\n        _.forEach(vm.accounts, function(account) {\n          _.forEach(account.$$flattenMailboxes, function(mailbox) {\n            if (data[mailbox.id])\n              mailbox.unseenCount = data[mailbox.id];\n          });\n        });\n      });\n\n      Preferences.ready().then(function() {\n        var refreshViewCheck = Preferences.defaults.SOGoRefreshViewCheck;\n        if (refreshViewCheck && refreshViewCheck != 'manually')\n          $timeout(vm.refreshUnseenCount, refreshViewCheck.timeInterval()*1000);\n      });\n    }\n\n    vm.refreshUnseenCount();\n  }\n\n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MailboxesController', MailboxesController);                                    \n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageController.$inject = ['$window', '$scope', '$state', '$mdDialog', 'stateAccounts', 'stateAccount', 'stateMailbox', 'stateMessage', 'encodeUriFilter', 'sgSettings', 'sgFocus', 'Dialog', 'Account', 'Mailbox', 'Message'];\n  function MessageController($window, $scope, $state, $mdDialog, stateAccounts, stateAccount, stateMailbox, stateMessage, encodeUriFilter, sgSettings, focus, Dialog, Account, Mailbox, Message) {\n    var vm = this, messageDialog = null, popupWindow = null;\n\n    // Expose controller\n    $window.$messageController = vm;\n\n    vm.$state = $state;\n    vm.accounts = stateAccounts;\n    vm.account = stateAccount;\n    vm.mailbox = stateMailbox;\n    vm.message = stateMessage;\n    vm.service = Message;\n    vm.tags = { searchText: '', selected: '' };\n    vm.showFlags = stateMessage.flags && stateMessage.flags.length > 0;\n    vm.$showDetailedRecipients = false;\n    vm.showDetailedRecipients = showDetailedRecipients;\n    vm.doDelete = doDelete;\n    vm.close = close;\n    vm.reply = reply;\n    vm.replyAll = replyAll;\n    vm.forward = forward;\n    vm.edit = edit;\n    vm.openPopup = openPopup;\n    vm.closePopup = closePopup;\n    vm.newMessage = newMessage;\n    vm.saveMessage = saveMessage;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n\n    // One-way refresh of the parent window when modifying the message from a popup window.\n    if ($window.opener) {\n      // Update the message flags. The message must be displayed in the parent window.\n      $scope.$watchCollection('viewer.message.flags', function(newTags, oldTags) {\n        var ctrls;\n        if (newTags || oldTags) {\n          ctrls = $parentControllers();\n          if (ctrls.messageCtrl) {\n            ctrls.messageCtrl.service.$timeout(function() {\n              ctrls.messageCtrl.message.flags = newTags;\n            });\n          }\n        }\n      });\n      // Update the \"isflagged\" (star icon) of the message. The mailbox must be displayed in the parent window.\n      $scope.$watch('viewer.message.isflagged', function(isflagged, wasflagged) {\n        var ctrls = $parentControllers();\n        if (ctrls.mailboxCtrl) {\n          ctrls.mailboxCtrl.service.$timeout(function() {\n            var message = _.find(ctrls.mailboxCtrl.selectedFolder.$messages, { uid: vm.message.uid });\n            message.isflagged = isflagged;\n          });\n        }\n      });\n    }\n\n    /**\n     * If this is a popup window, retrieve the matching controllers (mailbox and message) of the parent window.\n     */\n    function $parentControllers() {\n      var message, mailbox, ctrls = {};\n      if ($window.opener) {\n        // Deleting the message from a popup window\n        if ($window.opener.$mailboxController &&\n            $window.opener.$mailboxController.selectedFolder.$id() == stateMailbox.$id()) {\n            // The message mailbox is opened in the parent window\n            mailbox = $window.opener.$mailboxController;\n            ctrls.mailboxCtrl = mailbox;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The message is opened in the parent window\n              message = $window.opener.$messageController;\n              ctrls.messageCtrl = message;\n            }\n        }\n      }\n      return ctrls;\n    }\n\n    function showDetailedRecipients($event) {\n      vm.$showDetailedRecipients = true;\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function doDelete() {\n      var mailbox, message, state, nextMessage, previousMessage,\n          parentCtrls = $parentControllers();\n\n      if (parentCtrls.messageCtrl) {\n        mailbox = parentCtrls.mailboxCtrl.selectedFolder;\n        message = parentCtrls.messageCtrl.message;\n        state = parentCtrls.messageCtrl.$state;\n      }\n      else {\n        mailbox = stateMailbox;\n        message = stateMessage;\n        state = $state;\n      }\n\n      mailbox.$deleteMessages([message]).then(function(index) {\n        var nextIndex = index;\n        // Remove message object from scope\n        message = null;\n        if (angular.isDefined(state)) {\n          // Select either the next or previous message\n          if (index > 0) {\n            nextIndex -= 1;\n            nextMessage = mailbox.$messages[nextIndex];\n          }\n          if (index < mailbox.$messages.length)\n            previousMessage = mailbox.$messages[index];\n\n          if (nextMessage) {\n            if (nextMessage.isread && previousMessage && !previousMessage.isread) {\n              nextIndex = index;\n              nextMessage = previousMessage;\n            }\n          }\n          else if (previousMessage) {\n            nextIndex = index;\n            nextMessage = previousMessage;\n          }\n\n          try {\n            if (nextMessage) {\n              state.go('mail.account.mailbox.message', { messageId: nextMessage.uid });\n              mailbox.$topIndex = nextIndex;\n            }\n            else {\n              state.go('mail.account.mailbox');\n            }\n          }\n          catch (error) {}\n        }\n        closePopup();\n      });\n    }\n\n    function showMailEditor($event, message, recipients) {\n      if (messageDialog === null) {\n        if (!angular.isDefined(recipients))\n          recipients = [];\n\n        messageDialog = $mdDialog\n          .show({\n            parent: angular.element(document.body),\n            targetEvent: $event,\n            clickOutsideToClose: false,\n            escapeToClose: false,\n            templateUrl: 'UIxMailEditor',\n            controller: 'MessageEditorController',\n            controllerAs: 'editor',\n            locals: {\n              stateAccounts: vm.accounts,\n              stateAccount: vm.account,\n              stateMessage: message,\n              stateRecipients: recipients\n            }\n          })\n          .finally(function() {\n            messageDialog = null;\n            closePopup();\n          });\n      }\n    }\n\n    function close() {\n      $state.go('mail.account.mailbox').then(function() {\n        vm.message = null;\n        delete stateMailbox.selectedMessage;\n      });\n    }\n\n    function reply($event) {\n      var message = vm.message.$reply();\n      showMailEditor($event, message);\n    }\n\n    function replyAll($event) {\n      var message = vm.message.$replyAll();\n      showMailEditor($event, message);\n    }\n\n    function forward($event) {\n      var message = vm.message.$forward();\n      showMailEditor($event, message);\n    }\n\n    function edit($event) {\n      vm.message.$editableContent().then(function() {\n        showMailEditor($event, vm.message);\n      });\n    }\n\n    function openPopup() {\n      var url = [sgSettings.baseURL(),\n                 'UIxMailPopupView#/Mail',\n                 vm.message.accountId,\n                 // The double-encoding is necessary\n                 encodeUriFilter(encodeUriFilter(vm.message.$mailbox.path)),\n                 vm.message.uid]\n          .join('/'),\n          wId = vm.message.$absolutePath();\n      popupWindow = $window.open(url, wId,\n                                 [\"width=680\",\n                                  \"height=520\",\n                                  \"resizable=1\",\n                                  \"scrollbars=1\",\n                                  \"toolbar=0\",\n                                  \"location=0\",\n                                  \"directories=0\",\n                                  \"status=0\",\n                                  \"menubar=0\",\n                                  \"copyhistory=0\"]\n                                 .join(','));\n    }\n\n    function closePopup() {\n      if ($window.opener)\n        $window.close();\n    }\n\n    function newMessage($event, recipient) {\n      var message = vm.account.$newMessage();\n      showMailEditor($event, message, [recipient]);\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function saveMessage() {\n      window.location.href = ApplicationBaseURL + '/' + vm.mailbox.id + '/saveMessages?uid=' + vm.message.uid;\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.rawSource) {\n        Message.$$resource.post(vm.message.id, \"viewsource\").then(function(data) {\n          vm.rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n  }\n  \n  angular\n    .module('SOGo.MailerUI')  \n    .controller('MessageController', MessageController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  MessageEditorController.$inject = ['$window', '$stateParams', '$mdConstant', '$mdDialog', '$mdToast', 'FileUploader', 'stateAccounts', 'stateAccount', 'stateMessage', 'stateRecipients', 'encodeUriFilter', '$timeout', 'Dialog', 'AddressBook', 'Card', 'Preferences'];\n  function MessageEditorController($window, $stateParams, $mdConstant, $mdDialog, $mdToast, FileUploader, stateAccounts, stateAccount, stateMessage, stateRecipients, encodeUriFilter, $timeout, Dialog, AddressBook, Card, Preferences) {\n    var vm = this, semicolon = 186;\n\n    vm.addRecipient = addRecipient;\n    vm.autocomplete = {to: {}, cc: {}, bcc: {}};\n    vm.autosave = null;\n    vm.autosaveDrafts = autosaveDrafts;\n    vm.hideCc = true;\n    vm.hideBcc = true;\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.send = send;\n    vm.removeAttachment = removeAttachment;\n    vm.contactFilter = contactFilter;\n    vm.identities = _.pluck(_.flatten(_.pluck(stateAccounts, 'identities')), 'full');\n    vm.recipientSeparatorKeys = [$mdConstant.KEY_CODE.ENTER, $mdConstant.KEY_CODE.COMMA, semicolon];\n    vm.uploader = new FileUploader({\n      url: stateMessage.$absolutePath({asDraft: true}) + '/save',\n      autoUpload: true,\n      alias: 'attachments',\n      removeAfterUpload: false,\n      // onProgressItem: function(item, progress) {\n      //   console.debug(item); console.debug(progress);\n      // },\n      onSuccessItem: function(item, response, status, headers) {\n        stateMessage.$setUID(response.uid);\n        stateMessage.$reload({asDraft: false});\n        item.inlineUrl = response.lastAttachmentAttrs[0].url;\n        //console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n      },\n      onCancelItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n        // We remove the attachment\n        stateMessage.$deleteAttachment(item.file.name);\n        this.removeFromQueue(item);\n      },\n      onErrorItem: function(item, response, status, headers) {\n        //console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n      }\n    });\n\n    if ($stateParams.actionName == 'reply') {\n      stateMessage.$reply().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'replyall') {\n      stateMessage.$replyAll().then(function(msgObject) {\n        vm.message = msgObject;\n        vm.hideCc = (!msgObject.editable.cc || msgObject.editable.cc.length === 0);\n        vm.hideBcc = (!msgObject.editable.bcc || msgObject.editable.bcc.length === 0);\n      });\n    }\n    else if ($stateParams.actionName == 'forward') {\n      stateMessage.$forward().then(function(msgObject) {\n        vm.message = msgObject;\n        addAttachments();\n      });\n    }\n    else if (angular.isDefined(stateMessage)) {\n      vm.message = stateMessage;\n      addAttachments();\n    }\n\n    if (angular.isDefined(stateRecipients)) {\n      vm.message.editable.to = _.union(vm.message.editable.to, _.pluck(stateRecipients, 'full'));\n    }\n\n    /**\n     * If this is a popup window, retrieve the mailbox controller of the parent window.\n     */\n    function $parentControllers() {\n      var originMessage, ctrls = {};\n      if ($window.opener) {\n        if ($window.opener.$mailboxController) {\n          if ($window.opener.$mailboxController.selectedFolder.type == 'draft') {\n            ctrls.draftMailboxCtrl = $window.opener.$mailboxController;\n            if ($window.opener.$messageController &&\n                $window.opener.$messageController.message.uid == stateMessage.uid) {\n              // The draft is opened in the parent window\n              ctrls.draftMessageCtrl = $window.opener.$messageController;\n            }\n          }\n          else if (stateMessage.origin) {\n            originMessage = stateMessage.origin.message;\n            if ($window.opener.$mailboxController.selectedFolder.$id() == originMessage.$mailbox.$id()) {\n              // The message mailbox is opened in the parent window\n              ctrls.originMailboxCtrl = $window.opener.$mailboxController;\n            }\n          }\n        }\n      }\n      return ctrls;\n    }\n\n    function addAttachments() {\n      // Add existing attached files to uploader\n      var i, data, fileItem;\n      if (vm.message.attachmentAttrs)\n        for (i = 0; i < vm.message.attachmentAttrs.length; i++) {\n          data = {\n            name: vm.message.attachmentAttrs[i].filename,\n            type: vm.message.attachmentAttrs[i].mimetype,\n            size: parseInt(vm.message.attachmentAttrs[i].size)\n          };\n          fileItem = new FileUploader.FileItem(vm.uploader, data);\n          fileItem.progress = 100;\n          fileItem.isUploaded = true;\n          fileItem.isSuccess = true;\n          fileItem.inlineUrl = vm.message.attachmentAttrs[i].url;\n          vm.uploader.queue.push(fileItem);\n        }\n    }\n\n    function removeAttachment(item) {\n      if (item.isUploading)\n        vm.uploader.cancelItem(item);\n      else {\n        vm.message.$deleteAttachment(item.file.name);\n        item.remove();\n      }\n    }\n\n    function cancel() {\n      // TODO: delete draft?\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      var ctrls = $parentControllers();\n      vm.message.$save().then(function(data) {\n        if (ctrls.draftMailboxCtrl) {\n          // We're saving a draft from a popup window.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Reload selected message\n              ctrls.draftMessageCtrl.$state.go('mail.account.mailbox.message', { messageId: vm.message.uid });\n            }\n          });\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been saved'))\n            .position('top right')\n            .hideDelay(3000));\n      });\n    }\n\n    function send() {\n      var ctrls = $parentControllers();\n      if (vm.autosave)\n        $timeout.cancel(vm.autosave);\n\n      vm.message.$send().then(function(data) {\n        if (ctrls.draftMailboxCtrl) {\n          // We're sending a draft from a popup window and the draft mailbox is opened.\n          // Reload draft mailbox\n          ctrls.draftMailboxCtrl.selectedFolder.$filter().then(function() {\n            if (ctrls.draftMessageCtrl) {\n              // Close draft\n              ctrls.draftMessageCtrl.close();\n            }\n          });\n        }\n        if (ctrls.originMailboxCtrl) {\n          // We're sending a draft from a popup window and the original mailbox is opened.\n          // Reload mailbox\n          ctrls.originMailboxCtrl.selectedFolder.$filter();\n        }\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l('Your email has been sent'))\n            .position('top right')\n            .hideDelay(3000));\n        $mdDialog.hide();\n      });\n    }\n\n    function contactFilter($query) {\n      AddressBook.$filterAll($query);\n      return AddressBook.$cards;\n    }\n\n    function addRecipient(contact, field) {\n      var recipients, recipient, list;\n\n      if (angular.isString(contact))\n        return contact;\n\n      recipients = vm.message.editable[field];\n\n      if (contact.c_component == 'vlist') {\n        // If the list's members were already fetch, use them\n        if (angular.isDefined(contact.refs) && contact.refs.length) {\n          _.each(contact.refs, function(ref) {\n            if (ref.email.length)\n              recipients.push(ref.$shortFormat());\n          });\n        }\n        else {\n          list = Card.$find(contact.container, contact.c_name);\n          list.$id().then(function(listId) {\n            _.forEach(list.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          });\n        }\n      }\n      else {\n        recipient = contact.$shortFormat();\n      }\n\n      if (recipient)\n        return recipient;\n      else\n        return null;\n    }\n\n    // Drafts autosaving\n    function autosaveDrafts() {\n      vm.message.$save();\n      if (Preferences.defaults.SOGoMailAutoSave)\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n    }\n\n    // Read user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoMailAutoSave)\n        // Enable auto-save of draft\n        vm.autosave = $timeout(vm.autosaveDrafts, Preferences.defaults.SOGoMailAutoSave*1000*60);\n      // Set the locale of CKEditor\n      vm.localeCode = Preferences.defaults.LocaleCode;\n    });\n  }\n\n  SendMessageToastController.$inject = ['$scope', '$mdToast'];\n  function SendMessageToastController($scope, $mdToast) {\n    $scope.closeToast = function() {\n      $mdToast.hide();\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('SendMessageToastController', SendMessageToastController)\n    .controller('MessageEditorController', MessageEditorController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  /* jshint validthis: true */\n  'use strict';\n\n  /**\n   * sgIMIP - A directive to handle IMIP actions on emails\n   * @memberof SOGo.MailerUI\n   * @example:\n\n   */\n  function sgImip() {\n    return {\n      restrict: 'A',\n      link: link,\n      controller: 'sgImipController'\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      ctrl.pathToAttachment = attrs.sgImipPath;\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  sgImipController.$inject = ['$scope', 'User'];\n  function sgImipController($scope, User) {\n    var vm = this;\n\n    $scope.delegateInvitation = false;\n    $scope.delegatedTo = '';\n    $scope.searchText = '';\n\n    $scope.userFilter = function($query) {\n      return User.$filter($query);\n    };\n\n    $scope.iCalendarAction = function(action) {\n      var data;\n\n      if (action == 'delegate') {\n        data = {\n          receiveUpdates: false,\n          delegatedTo: $scope.delegatedTo.c_email\n        };\n      }\n\n      $scope.viewer.message.$imipAction(vm.pathToAttachment, action, data);\n    };\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .controller('sgImipController', sgImipController)\n    .directive('sgImip', sgImip);\n})();\n\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /*\n   * sgZoomableImage - Toggle the 'sg-zoom' class when clicking on the image inside the container.\n   * @memberof SOGo.MailerUI\n   * @restrict attribute\n   * @ngInject\n   * @example:\n\n   <div sg-zoomable-image=\"sg-zoomable-image\">\n     <md-card>\n       <img src=\"foo.png\">\n     </md-card>\n   </div>\n  */\n  function sgZoomableImage() {\n    return {\n      restrict: 'A',\n      link: link\n    };\n\n    function link(scope, iElement, attrs, ctrl) {\n      var parentNode = iElement.parent(),\n          toggleClass;\n\n      toggleClass = function(event) {\n        if (event.target.tagName == 'IMG')\n          parentNode.toggleClass('sg-zoom');\n      };\n\n      iElement.on('click', toggleClass);\n    }\n  }\n\n  angular\n    .module('SOGo.MailerUI')\n    .directive('sgZoomableImage', sgZoomableImage);\n})();\n"]}