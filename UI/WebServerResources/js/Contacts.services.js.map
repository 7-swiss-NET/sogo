{"version":3,"sources":["Contacts/AddressBook.service.js","Contacts/Card.service.js"],"names":["AddressBook","futureAddressBookData","then","this","init","name","id","newAddressBookData","$$resource","create","$unwrap","acls","objectEditor","objectCreator","objectEraser","$acl","$$Acl","$factory","$q","$timeout","$log","Settings","AddressBook_PRELOAD","Resource","Card","Acl","Preferences","angular","extend","PRELOAD","activeUser","$Card","$Preferences","$query","value","sort","asc","selectedFolder","$refreshTimeout","settings","Contact","SortingState","parseInt","module","e","constant","LOOKAHEAD","SIZE","factory","$filterAll","search","options","excludedCards","params","isUndefined","$cards","fetch","response","results","card","index","compareIds","data","_","filter","contacts","find","bind","length","splice","forEach","mapKeys","key","toLowerCase","debug","when","$add","addressbook","list","sibling","i","isSubscription","$subscriptions","$addressbooks","o","localeCompare","indexOf","map","$findAll","_this","$remotes","isRemote","push","union","$subscribe","uid","path","userResource","addressbookData","$reloadAll","addressbooks","group","owner","login","prototype","$$cards","idsMap","isOwned","isSuperUser","$id","$futureAddressBookData","getLength","getItemAtIndex","$isLoading","$lastVisibleIndex","Math","max","$loadCard","endIndex","ids","futureHeadersData","cardId","startIndex","loaded","isDefined","$loaded","STATUS","NOT_LOADED","min","LOADED","LOADING","join","post","$unwrapHeaders","hasSelectedCard","selectedCard","isSelectedCard","$selectedCard","$selectedCardIndex","$selectedCards","selected","$selectedCount","count","$startRefreshTimeout","cancel","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","$reload","timeInterval","$filter","query","dry","partial","addressbookId","futureData","fields","idFieldIndex","cards","headers","invokeMap","pid","oldIndex","removedCards","findIndex","zipObject","$rename","$save","$delete","promise","d","defer","remove","resolve","reject","$_deleteCards","forEachRight","selectedIndex","$deleteCards","uids","$copyCards","folder","$moveCards","save","$omit","exportCards","selectedOnly","selectedCards","type","filename","download","$topIndex","reduce","isError","isObject","j","cardHeaders","futureCardData","newCardData","newguid","isNew","$TEL_TYPES","$EMAIL_TYPES","$URL_TYPES","$ADDRESS_TYPES","Card_STATUS","SOGoContactsCategories","$categories","SOGoAlternateAvatar","$alternateAvatar","DELAYED_LOADING","DELAYED_MS","$find","$unwrapCollection","filterCategories","re","RegExp","category","collection","$futureCardData","refs","categories","c_screenname","$$fullname","$fullname","$$email","$preferredEmail","$$image","image","avatar","no_404","hasphoto","photoURL","isgroup","c_component","$avatarIcon","$isList","orgs","org","notes","note","email","emails","reference","birthday","isString","dlp","$mdDateLocaleProvider","parseDate","$birthday","formatDate","c_name","empty","action","ref","$shadowData","attribute","export","names","fn","c_cn","html","c_givenname","nickname","c_sn","contactinfo","split","$description","description","title","role","concat","test","c_mail","$shortFormat","fullname","$isCard","condition","expandable","$addOrg","includes","$addEmail","$addScreenName","screenName","$addPhone","phones","$addUrl","url","urls","$addAddress","postoffice","street","street2","locality","region","country","postalcode","addresses","$addMember","$certificate","hasCertificate","$$certificate","$removeCertificate","explode","$reset","deep","copy","format","toString","desc"],"mappings":"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","file":"Contacts.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name AddressBook\n   * @constructor\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   */\n  function AddressBook(futureAddressBookData) {\n    // Data is immediately available\n    if (typeof futureAddressBookData.then !== 'function') {\n      this.init(futureAddressBookData);\n      if (this.name && !this.id) {\n        // Create a new addressbook on the server\n        var newAddressBookData = AddressBook.$$resource.create('createFolder', this.name);\n        this.$unwrap(newAddressBookData);\n        this.acls = {'objectEditor': 1, 'objectCreator': 1, 'objectEraser': 1};\n      }\n      else if (this.id) {\n        this.$acl = new AddressBook.$$Acl('Contacts/' + this.id);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureAddressBookData);\n    }\n  }\n\n  /**\n   * @memberof AddressBook\n   * @desc The factory we'll use to register with Angular\n   * @returns the AddressBook constructor\n   */\n  AddressBook.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'sgAddressBook_PRELOAD', 'Resource', 'Card', 'Acl', 'Preferences', function($q, $timeout, $log, Settings, AddressBook_PRELOAD, Resource, Card, Acl, Preferences) {\n    angular.extend(AddressBook, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      PRELOAD: AddressBook_PRELOAD,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $Card: Card,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: {value: '', sort: 'c_cn', asc: 1},\n      activeUser: Settings.activeUser(),\n      selectedFolder: null,\n      $refreshTimeout: null\n    });\n    // Initialize sort parameters from user's settings\n    if (Preferences.settings.Contact.SortingState) {\n      AddressBook.$query.sort = Preferences.settings.Contact.SortingState[0];\n      AddressBook.$query.asc = parseInt(Preferences.settings.Contact.SortingState[1]);\n    }\n\n    return AddressBook; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of AddressBook in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common', 'SOGo.PreferencesUI']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .constant('sgAddressBook_PRELOAD', {\n      LOOKAHEAD: 50,\n      SIZE: 100\n    })\n    .factory('AddressBook', AddressBook.$factory);\n\n  /**\n   * @memberof AddressBook\n   * @desc Search for cards among all addressbooks matching some criterias.\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query (excludeGroups and excludeLists)\n   * @param {object[]} excludedCards - a list of Card objects that must be excluded from the results\n   * @returns a collection of Cards instances\n   */\n  AddressBook.$filterAll = function(search, options, excludedCards) {\n    var params = { search: search };\n\n    if (!search) {\n      // No query specified\n      AddressBook.$cards = [];\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    if (angular.isUndefined(AddressBook.$cards)) {\n      // First session query\n      AddressBook.$cards = [];\n    }\n\n    angular.extend(params, options);\n\n    return AddressBook.$$resource.fetch(null, 'allContactSearch', params).then(function(response) {\n      var results, card, index,\n          compareIds = function(data) {\n            return this.id == data.id;\n          };\n      if (excludedCards) {\n        // Remove excluded cards from results\n        results = _.filter(response.contacts, function(data) {\n          return _.isUndefined(_.find(excludedCards, _.bind(compareIds, data)));\n        });\n      }\n      else {\n        results = response.contacts;\n      }\n      // Remove cards that no longer match the search query\n      for (index = AddressBook.$cards.length - 1; index >= 0; index--) {\n        card = AddressBook.$cards[index];\n        if (_.isUndefined(_.find(results, _.bind(compareIds, card)))) {\n          AddressBook.$cards.splice(index, 1);\n        }\n      }\n      // Add new cards matching the search query\n      _.forEach(results, function(data, index) {\n        if (_.isUndefined(_.find(AddressBook.$cards, _.bind(compareIds, data)))) {\n          var card = new AddressBook.$Card(_.mapKeys(data, function(value, key) {\n            return key.toLowerCase();\n          }), search);\n          AddressBook.$cards.splice(index, 0, card);\n        }\n      });\n      AddressBook.$log.debug(AddressBook.$cards);\n      return AddressBook.$cards;\n    });\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Add a new addressbook to the static list of addressbooks\n   * @param {AddressBook} addressbook - an Addressbook object instance\n   */\n  AddressBook.$add = function(addressbook) {\n    // Insert new addressbook at proper index\n    var list, sibling, i;\n\n    list = addressbook.isSubscription? this.$subscriptions : this.$addressbooks;\n    sibling = _.find(list, function(o) {\n      return (addressbook.id == 'personal' ||\n              (o.id != 'personal' &&\n               o.name.localeCompare(addressbook.name) === 1));\n    });\n    i = sibling ? _.indexOf(_.map(list, 'id'), sibling.id) : 1;\n    list.splice(i, 0, addressbook);\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Set or get the list of addressbooks. Will instantiate a new AddressBook object for each item.\n   * @param {array} [data] - the metadata of the addressbooks\n   * @returns the list of addressbooks\n   */\n  AddressBook.$findAll = function(data) {\n    var _this = this;\n    if (data) {\n      this.$addressbooks = [];\n      this.$subscriptions = [];\n      this.$remotes = [];\n      // Instanciate AddressBook objects\n      angular.forEach(data, function(o, i) {\n        var addressbook = new AddressBook(o);\n        if (addressbook.isRemote)\n          _this.$remotes.push(addressbook);\n        else if (addressbook.isSubscription)\n          _this.$subscriptions.push(addressbook);\n        else\n          _this.$addressbooks.push(addressbook);\n      });\n    }\n    return _.union(this.$addressbooks, this.$subscriptions, this.$remotes);\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Subscribe to another user's addressbook and add it to the list of addressbooks.\n   * @param {string} uid - user id\n   * @param {string} path - path of folder for specified user\n   * @returns a promise of the HTTP query result\n   */\n  AddressBook.$subscribe = function(uid, path) {\n    var _this = this;\n    return AddressBook.$$resource.userResource(uid).fetch(path, 'subscribe').then(function(addressbookData) {\n      var addressbook = new AddressBook(addressbookData);\n      if (_.isUndefined(_.find(_this.$subscriptions, function(o) {\n        return o.id == addressbookData.id;\n      }))) {\n        // Not already subscribed\n        AddressBook.$add(addressbook);\n      }\n      return addressbook;\n    });\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Reload the list of known addressbooks.\n   */\n  AddressBook.$reloadAll = function() {\n    var _this = this;\n\n    return AddressBook.$$resource.fetch('addressbooksList').then(function(data) {\n      _.forEach(data.addressbooks, function(addressbookData) {\n        var group, addressbook;\n\n        if (addressbookData.isRemote)\n          group = _this.$remotes;\n        else if (addressbookData.owner != AddressBook.activeUser.login)\n          group = _this.$subscriptions;\n        else\n          group = _this.$addressbooks;\n\n        addressbook = _.find(group, function(o) { return o.id == addressbookData.id; });\n        if (addressbook)\n          addressbook.init(addressbookData);\n      });\n    });\n  };\n\n  /**\n   * @function init\n   * @memberof AddressBook.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of addressbook\n   */\n  AddressBook.prototype.init = function(data, options) {\n    var _this = this;\n    if (!this.$$cards) {\n      // Array of cards for \"dry\" searches (see $filter)\n      this.$$cards = [];\n    }\n    this.idsMap = {};\n    this.$cards = [];\n    // Extend instance with all attributes of data except headers\n    angular.forEach(data, function(value, key) {\n      if (key != 'headers' && key != 'cards') {\n        _this[key] = value;\n      }\n    });\n    // Add 'isOwned' and 'isSubscription' attributes based on active user (TODO: add it server-side?)\n    this.isOwned = AddressBook.activeUser.isSuperUser || this.owner == AddressBook.activeUser.login;\n    this.isSubscription = !this.isRemote && this.owner != AddressBook.activeUser.login;\n  };\n\n  /**\n   * @function $id\n   * @memberof AddressBook.prototype\n   * @desc Resolve the addressbook id.\n   * @returns a promise of the addressbook id\n   */\n  AddressBook.prototype.$id = function() {\n    if (this.id) {\n      // Object already unwrapped\n      return AddressBook.$q.when(this.id);\n    }\n    else {\n      // Wait until object is unwrapped\n      return this.$futureAddressBookData.then(function(addressbook) {\n        return addressbook.id;\n      });\n    }\n  };\n\n  /**\n   * @function getLength\n   * @memberof AddressBook.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the number of cards in the addressbook\n   */\n  AddressBook.prototype.getLength = function() {\n    return this.$cards.length;\n  };\n\n  /**\n   * @function getItemAtIndex\n   * @memberof AddressBook.prototype\n   * @desc Used by md-virtual-repeat / md-on-demand\n   * @returns the card at the specified index\n   */\n  AddressBook.prototype.getItemAtIndex = function(index) {\n    var card;\n\n    if (!this.$isLoading && index >= 0 && index < this.$cards.length) {\n      card = this.$cards[index];\n      this.$lastVisibleIndex = Math.max(0, index - 3); // Magic number is NUM_EXTRA from virtual-repeater.js\n\n      if (this.$loadCard(card))\n        return card;\n    }\n    return null;\n  };\n\n  /**\n   * @function $loadCard\n   * @memberof AddressBook.prototype\n   * @desc Check if the card is loaded and in any case, fetch more cards headers from the server.\n   * @returns true if the card metadata are already fetched\n   */\n  AddressBook.prototype.$loadCard = function(card) {\n    var cardId = card.id,\n        startIndex = this.idsMap[cardId],\n        endIndex,\n        index,\n        max = this.$cards.length,\n        loaded = false,\n        ids,\n        futureHeadersData;\n\n    if (angular.isUndefined(this.ids) && card.id) {\n      loaded = true;\n    }\n    else if (angular.isDefined(startIndex) && startIndex < this.$cards.length) {\n      // Index is valid\n      if (card.$loaded != AddressBook.$Card.STATUS.NOT_LOADED) {\n        // Card headers are loaded or data is coming\n        loaded = true;\n      }\n\n      // Preload more headers if possible\n      endIndex = Math.min(startIndex + AddressBook.PRELOAD.LOOKAHEAD, max - 1);\n      if (this.$cards[endIndex].$loaded != AddressBook.$Card.STATUS.NOT_LOADED) {\n        index = Math.max(startIndex - AddressBook.PRELOAD.LOOKAHEAD, 0);\n        if (this.$cards[index].$loaded != AddressBook.$Card.STATUS.LOADED) {\n          // Previous cards not loaded; preload more headers further up\n          endIndex = startIndex;\n          startIndex = Math.max(startIndex - AddressBook.PRELOAD.SIZE, 0);\n        }\n      }\n      else\n        // Next cards not load; preload more headers further down\n        endIndex = Math.min(startIndex + AddressBook.PRELOAD.SIZE, max - 1);\n\n      if (this.$cards[startIndex].$loaded == AddressBook.$Card.STATUS.NOT_LOADED ||\n          this.$cards[endIndex].$loaded == AddressBook.$Card.STATUS.NOT_LOADED) {\n\n        for (ids = []; startIndex < endIndex && startIndex < max; startIndex++) {\n          if (this.$cards[startIndex].$loaded != AddressBook.$Card.STATUS.NOT_LOADED) {\n            // Card at this index is already loaded; increase the end index\n            endIndex++;\n          }\n          else {\n            // Card at this index will be loaded\n            ids.push(this.$cards[startIndex].id);\n            this.$cards[startIndex].$loaded = AddressBook.$Card.STATUS.LOADING;\n          }\n        }\n\n        AddressBook.$log.debug('Loading Ids ' + ids.join(' ') + ' (' + ids.length + ' cards)');\n        if (ids.length > 0) {\n          futureHeadersData = AddressBook.$$resource.post(this.id, 'headers', {ids: ids});\n          this.$unwrapHeaders(futureHeadersData);\n        }\n      }\n    }\n    return loaded;\n  };\n\n  /**\n   * @function hasSelectedMessage\n   * @memberof AddressBook.prototype\n   * @desc Check if a card is selected.\n   * @returns true if the a card is selected\n   */\n  AddressBook.prototype.hasSelectedCard = function() {\n    return angular.isDefined(this.selectedCard);\n  };\n\n  /**\n   * @function isSelectedCard\n   * @memberof AddressBook.prototype\n   * @desc Check if the specified card is selected.\n   * @param {string} CardId\n   * @returns true if the specified card is selected\n   */\n  AddressBook.prototype.isSelectedCard = function(cardId) {\n    return this.hasSelectedCard() && this.selectedCard == cardId;\n  };\n\n  /**\n   * @function $selectedCard\n   * @memberof AddressBook.prototype\n   * @desc Return the currently visible card.\n   * @returns a Card instance or undefined if no card is displayed\n   */\n  AddressBook.prototype.$selectedCard = function() {\n    var _this = this;\n\n    return _.find(this.$cards, function(card) { return card.id == _this.selectedCard; });\n  };\n\n  /**\n   * @function $selectedCardIndex\n   * @memberof AddressBook.prototype\n   * @desc Return the index of the currently visible card.\n   * @returns a number or undefined if no card is selected\n   */\n  AddressBook.prototype.$selectedCardIndex = function() {\n    return _.indexOf(_.map(this.$cards, 'id'), this.selectedCard);\n  };\n\n  /**\n   * @function $selectedCards\n   * @memberof AddressBook.prototype\n   * @desc Return the cards selected by the user.\n   * @returns Card instances\n   */\n  AddressBook.prototype.$selectedCards = function() {\n    return _.filter(this.$cards, function(card) { return card.selected; });\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof AddressBook.prototype\n   * @desc Return the number of cards selected by the user.\n   * @returns the number of selected cards\n   */\n  AddressBook.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.$cards) {\n      count = (_.filter(this.$cards, function(card) { return card.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $startRefreshTimeout\n   * @memberof AddressBook.prototype\n   * @desc Starts the refresh timeout for the current selected address book\n   */\n  AddressBook.prototype.$startRefreshTimeout = function() {\n    if (AddressBook.$refreshTimeout)\n      AddressBook.$timeout.cancel(AddressBook.$refreshTimeout);\n\n    // Restart the refresh timer, if needed\n    var refreshViewCheck = AddressBook.$Preferences.defaults.SOGoRefreshViewCheck;\n    if (refreshViewCheck && refreshViewCheck != 'manually') {\n      var f = angular.bind(this, AddressBook.prototype.$reload);\n      AddressBook.$refreshTimeout = AddressBook.$timeout(f, refreshViewCheck.timeInterval()*1000);\n    }\n  };\n\n  /**\n   * @function $reload\n   * @memberof AddressBook.prototype\n   * @desc Reload list of cards\n   * @returns a promise of the Cards instances\n   */\n  AddressBook.prototype.$reload = function() {\n    var _this = this;\n\n    this.$startRefreshTimeout();\n    return this.$filter();\n  };\n\n    /**\n   * @function $filter\n   * @memberof AddressBook.prototype\n   * @desc Search for cards matching some criterias\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query (dry, excludeList)\n   * @returns a collection of Cards instances\n   */\n  AddressBook.prototype.$filter = function(search, options, excludedCards) {\n    var _this = this, query,\n        dry = options && options.dry;\n\n    if (dry) {\n      // Don't keep a copy of the query in dry mode\n      query = {value: '', sort: 'c_cn', asc: 1};\n    }\n    else {\n      this.$isLoading = true;\n      query = AddressBook.$query;\n      if (!this.isRemote) query.partial = 1;\n    }\n\n    if (options) {\n      angular.extend(query, options);\n      if (dry) {\n        if (!search) {\n          // No query specified\n          _this.$$cards = [];\n          return AddressBook.$q.when(_this.$$cards);\n        }\n      }\n    }\n\n    if (angular.isDefined(search))\n      query.value = search;\n\n    return _this.$id().then(function(addressbookId) {\n      var futureData = AddressBook.$$resource.post(addressbookId, 'view', query);\n\n      if (dry) {\n        return futureData.then(function(response) {\n          var results, headers, card, index, fields, idFieldIndex,\n              cards = _this.$$cards,\n              compareIds = function(card) {\n                return this == card.id;\n              };\n\n          if (response.headers) {\n            // First entry of 'headers' are keys\n            fields = _.invokeMap(response.headers[0], 'toLowerCase');\n            idFieldIndex = fields.indexOf('id');\n            response.headers.splice(0, 1);\n            results = _.map(response.headers, function(data) {\n              return data[idFieldIndex];\n            });\n          }\n\n          if (response.ids) {\n            if (excludedCards)\n              // Remove excluded cards from results\n              results = _.filter(response.ids, function(id) {\n                return _.isUndefined(_.find(excludedCards, _.bind(compareIds, id)));\n              });\n            else\n              results = response.ids;\n          }\n\n          // Remove cards that no longer match the search query\n          for (index = cards.length - 1; index >= 0; index--) {\n            card = cards[index];\n            if (_.isUndefined(_.find(results, _.bind(compareIds, card.id)))) {\n              cards.splice(index, 1);\n            }\n          }\n\n          // Add new cards matching the search query\n          _.forEach(results, function(cardId, index) {\n            if (_.isUndefined(_.find(cards, _.bind(compareIds, cardId)))) {\n              var data = { pid: addressbookId, id: cardId };\n              var card = new AddressBook.$Card(data, search);\n              cards.splice(index, 0, card);\n            }\n          });\n\n          // Respect the order of the results\n          _.forEach(results, function(cardId, index) {\n            var oldIndex, removedCards;\n            if (cards[index].id != cardId) {\n              oldIndex = _.findIndex(cards, _.bind(compareIds, cardId));\n              removedCards = cards.splice(oldIndex, 1);\n              cards.splice(index, 0, removedCards[0]);\n            }\n          });\n\n          // Extend Card objects with received headers\n          _.forEach(response.headers, function(data) {\n            var card, index = _.findIndex(cards, _.bind(compareIds, data[idFieldIndex]));\n            if (index > -1) {\n              card = _.zipObject(fields, data);\n              cards[index].init(card, search);\n            }\n          });\n\n          return cards;\n        });\n      }\n      else {\n        // Unwrap promise and instantiate or extend Cards objets\n        return _this.$unwrap(futureData);\n      }\n    });\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$rename = function(name) {\n    var i, list;\n\n    list = this.isSubscription? AddressBook.$subscriptions : AddressBook.$addressbooks;\n    i = _.indexOf(_.map(list, 'id'), this.id);\n    this.name = name;\n    list.splice(i, 1);\n    AddressBook.$add(this);\n\n    return this.$save();\n  };\n\n  /**\n   * @function $delete\n   * @memberof AddressBook.prototype\n   * @desc Delete the addressbook from the server and the static list of addressbooks.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$delete = function() {\n    var _this = this,\n        d = AddressBook.$q.defer(),\n        list,\n        promise;\n\n    if (this.isSubscription) {\n      promise = AddressBook.$$resource.fetch(this.id, 'unsubscribe');\n      list = AddressBook.$subscriptions;\n    }\n    else {\n      promise = AddressBook.$$resource.remove(this.id);\n      list = AddressBook.$addressbooks;\n    }\n\n    promise.then(function() {\n      var i = _.indexOf(_.map(list, 'id'), _this.id);\n      list.splice(i, 1);\n      d.resolve();\n    }, d.reject);\n    return d.promise;\n  };\n\n  /**\n   * @function $_deleteCards\n   * @memberof AddressBook.prototype\n   * @desc Delete multiple cards from AddressBook object.\n   * @param {string[]} ids - the cards ids\n   */\n  AddressBook.prototype.$_deleteCards = function(ids) {\n    var _this = this;\n\n    // Remove cards from $cards and idsMap\n    _.forEachRight(this.$cards, function(card, index) {\n      var selectedIndex = _.findIndex(ids, function(id) {\n        return card.id == id;\n      });\n      if (selectedIndex > -1) {\n        ids.splice(selectedIndex, 1);\n        delete _this.idsMap[card.id];\n        if (_this.isSelectedCard(card.id))\n          delete _this.selectedCard;\n        _this.$cards.splice(index, 1);\n      }\n      else {\n        _this.idsMap[card.id] -= ids.length;\n      }\n    });\n  };\n\n  /**\n   * @function $deleteCards\n   * @memberof AddressBook.prototype\n   * @desc Delete multiple cards from addressbook.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$deleteCards = function(cards) {\n    var _this = this,\n        ids = _.map(cards, 'id');\n\n    return AddressBook.$$resource.post(this.id, 'batchDelete', {uids: ids}).then(function() {\n      _this.$_deleteCards(ids);\n    });\n  };\n\n  /**\n   * @function $copyCards\n   * @memberof AddressBook.prototype\n   * @desc Copy multiple cards from addressbook to an other one.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$copyCards = function(cards, folder) {\n    var uids = _.map(cards, 'id');\n    return AddressBook.$$resource.post(this.id, 'copy', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $moveCards\n   * @memberof AddressBook.prototype\n   * @desc Move multiple cards from the current addressbook to a target one\n   * @param {object[]} cards - instances of Card object\n   * @param {string} folder - the destination folder id\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$moveCards = function(cards, folder) {\n    var _this = this, uids;\n\n    uids = _.map(cards, 'id');\n    return AddressBook.$$resource.post(this.id, 'move', {uids: uids, folder: folder})\n      .then(function() {\n        return _this.$_deleteCards(uids);\n      });\n  };\n\n  /**\n   * @function $save\n   * @memberof AddressBook.prototype\n   * @desc Save the addressbook to the server. This currently can only affect the name of the addressbook.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$save = function() {\n    return AddressBook.$$resource.save(this.id, this.$omit()).then(function(data) {\n      return data;\n    });\n  };\n\n  /**\n   * @function $exportCards\n   * @memberof AddressBook.prototype\n   * @desc Export the selected/all cards\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.exportCards = function(selectedOnly) {\n    var data = null, options, selectedCards;\n\n    options = {\n      type: 'application/octet-stream',\n      filename: this.name + '.ldif'\n    };\n\n    if (selectedOnly) {\n      selectedCards = _.filter(this.$cards, function(card) { return card.selected; });\n      data = { uids: _.map(selectedCards, 'id') };\n    }\n\n    return AddressBook.$$resource.download(this.id, 'export', data, options);\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof AddressBook.prototype\n   * @desc Unwrap a promise and instanciate new Card objects using received data.\n   * @param {promise} futureAddressBookData - a promise of the AddressBook's data\n   */\n  AddressBook.prototype.$unwrap = function(futureAddressBookData) {\n    var _this = this;\n\n    this.$isLoading = true;\n\n    // Expose and resolve the promise\n    this.$futureAddressBookData = futureAddressBookData.then(function(response) {\n      return AddressBook.$timeout(function() {\n        var headers;\n\n        if (!response.ids || _this.$topIndex > response.ids.length - 1)\n          _this.$topIndex = 0;\n\n        // Extend AddressBook instance from data of addressbooks list.\n        // Will inherit attributes such as isEditable and isRemote.\n        angular.forEach(AddressBook.$findAll(), function(o, i) {\n          if (o.id == response.id) {\n            angular.extend(_this, o);\n          }\n        });\n\n        // Extend AddressBook instance with received data\n        _this.init(response);\n\n        if (_this.ids) {\n          AddressBook.$log.debug('unwrapping ' + _this.ids.length + ' cards');\n\n          // Instanciate Card objects\n          _.reduce(_this.ids, function(cards, card, i) {\n            var data = { pid: _this.id, id: card };\n\n            // Build map of ID <=> index\n            _this.idsMap[data.id] = i;\n\n            cards.push(new AddressBook.$Card(data));\n\n            return cards;\n          }, _this.$cards);\n        }\n\n        if (response.headers) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(response.headers[0], 'toLowerCase');\n          response.headers.splice(0, 1);\n\n          if (_this.ids) {\n            // Extend Card objects with received headers\n            _.forEach(response.headers, function(data) {\n              var o = _.zipObject(headers, data),\n                  i = _this.idsMap[o.id];\n              _this.$cards[i].init(o);\n            });\n          }\n          else {\n            // Instanciate Card objects\n            _this.$cards = [];\n            angular.forEach(response.headers, function(data) {\n              var o = _.zipObject(headers, data);\n              angular.extend(o, { pid: _this.id });\n              _this.$cards.push(new AddressBook.$Card(o));\n            });\n          }\n        }\n\n        // Instanciate Acl object\n        _this.$acl = new AddressBook.$$Acl('Contacts/' + _this.id);\n\n        _this.$startRefreshTimeout();\n\n        _this.$isLoading = false;\n\n        AddressBook.$log.debug('addressbook ' + _this.id + ' ready');\n\n        return _this;\n      });\n    }, function(data) {\n      _this.isError = true;\n      if (angular.isObject(data)) {\n        AddressBook.$timeout(function() {\n          angular.extend(_this, data);\n        });\n      }\n    });\n  };\n\n  /**\n   * @function $unwrapHeaders\n   * @memberof AddressBook.prototype\n   * @desc Unwrap a promise and extend matching Card objects with received data.\n   * @param {promise} futureHeadersData - a promise of the metadata of some cards\n   */\n  AddressBook.prototype.$unwrapHeaders = function(futureHeadersData) {\n    var _this = this;\n\n    futureHeadersData.then(function(data) {\n      AddressBook.$timeout(function() {\n        var headers, j;\n        if (data.length > 0) {\n          // First entry of 'headers' are keys\n          headers = _.invokeMap(data[0], 'toLowerCase');\n          data.splice(0, 1);\n          _.forEach(data, function(cardHeaders) {\n            cardHeaders = _.zipObject(headers, cardHeaders);\n            j = _this.idsMap[cardHeaders.id];\n            if (angular.isDefined(j)) {\n              _this.$cards[j].init(cardHeaders);\n            }\n          });\n        }\n      });\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof AddressBook.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Addressbook instance\n   */\n  AddressBook.prototype.$omit = function() {\n    var addressbook = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'acls' &&\n          key != 'ids' &&\n          key != 'idsMap' &&\n          key != 'urls' &&\n          key[0] != '$') {\n        addressbook[key] = value;\n      }\n    });\n    return addressbook;\n  };\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Card\n   * @constructor\n   * @param {object} futureCardData\n   * @param {string} [partial]\n   */\n  function Card(futureCardData, partial) {\n\n    // Data is immediately available\n    if (typeof futureCardData.then !== 'function') {\n      this.init(futureCardData, partial);\n      if (this.pid && !this.id) {\n        // Prepare for the creation of a new card;\n        // Get UID from the server.\n        var newCardData = Card.$$resource.newguid(this.pid);\n        this.$unwrap(newCardData);\n        this.isNew = true;\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureCardData);\n    }\n  }\n\n  Card.$TEL_TYPES = ['work', 'home', 'cell', 'fax', 'pager'];\n  Card.$EMAIL_TYPES = ['work', 'home', 'pref'];\n  Card.$URL_TYPES = ['work', 'home', 'pref'];\n  Card.$ADDRESS_TYPES = ['work', 'home'];\n\n  /**\n   * @memberof Card\n   * @desc The factory we'll use to register with Angular.\n   * @returns the Card constructor\n   */\n  Card.$factory = ['$q', '$timeout', 'sgSettings', 'sgCard_STATUS', 'Resource', 'Preferences', function($q, $timeout, Settings, Card_STATUS, Resource, Preferences) {\n    angular.extend(Card, {\n      STATUS: Card_STATUS,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $q: $q,\n      $timeout: $timeout,\n      $Preferences: Preferences\n    });\n    // Initialize categories from user's defaults\n    if (Preferences.defaults.SOGoContactsCategories) {\n      Card.$categories = Preferences.defaults.SOGoContactsCategories;\n    }\n    if (Preferences.defaults.SOGoAlternateAvatar)\n      Card.$alternateAvatar = Preferences.defaults.SOGoAlternateAvatar;\n\n    return Card; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of Card in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common', 'SOGo.PreferencesUI']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .constant('sgCard_STATUS', {\n      NOT_LOADED:      0,\n      DELAYED_LOADING: 1,\n      LOADING:         2,\n      LOADED:          3,\n      DELAYED_MS:      300\n    })\n    .factory('Card', Card.$factory);\n\n  /**\n   * @memberof Card\n   * @desc Fetch a card from a specific addressbook.\n   * @param {string} addressbookId - the addressbook ID\n   * @param {string} cardId - the card ID\n   * @see {@link AddressBook.$getCard}\n   */\n  Card.$find = function(addressbookId, cardId) {\n    var futureCardData = this.$$resource.fetch([addressbookId, cardId].join('/'), 'view');\n\n    if (cardId) return new Card(futureCardData); // a single card\n\n    return Card.$unwrapCollection(futureCardData); // a collection of cards\n  };\n\n  /**\n   * @function filterCategories\n   * @memberof Card.prototype\n   * @desc Search for categories matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Card.filterCategories = function(query) {\n    var re = new RegExp(query, 'i');\n    return _.map(_.filter(Card.$categories, function(category) {\n      return category.search(re) != -1;\n    }), function(category) {\n      return { value: category };\n    });\n  };\n\n  /**\n   * @memberof Card\n   * @desc Unwrap to a collection of Card instances.\n   * @param {object} futureCardData\n   */\n  Card.$unwrapCollection = function(futureCardData) {\n    var collection = {};\n\n    collection.$futureCardData = futureCardData;\n\n    futureCardData.then(function(cards) {\n      Card.$timeout(function() {\n        angular.forEach(cards, function(data, index) {\n          collection[data.id] = new Card(data);\n        });\n      });\n    });\n\n    return collection;\n  };\n\n  /**\n   * @function init\n   * @memberof Card.prototype\n   * @desc Extend instance with required attributes and new data.\n   * @param {object} data - attributes of card\n   */\n  Card.prototype.init = function(data, partial) {\n    var _this = this;\n\n    if (angular.isUndefined(this.refs))\n      this.refs = [];\n    if (angular.isUndefined(this.categories))\n      this.categories = [];\n    this.c_screenname = null;\n    angular.extend(this, data);\n    if (!this.$$fullname)\n      this.$$fullname = this.$fullname();\n    if (!this.$$email)\n      this.$$email = this.$preferredEmail(partial);\n    if (!this.$$image)\n      this.$$image = this.image;\n    if (!this.$$image)\n      this.$$image = Card.$Preferences.avatar(this.$$email, 32, {no_404: true});\n    if (this.hasphoto)\n      this.photoURL = Card.$$resource.path(this.pid, this.id, 'photo');\n    if (this.isgroup)\n      this.c_component = 'vlist';\n    this.$avatarIcon = this.$isList()? 'group' : 'person';\n    if (data.orgs && data.orgs.length)\n      this.orgs = _.map(data.orgs, function(org) { return { 'value': org }; });\n    if (data.notes && data.notes.length)\n      this.notes = _.map(data.notes, function(note) { return { 'value': note }; });\n    else if (!this.notes || !this.notes.length)\n      this.notes = [ { value: '' } ];\n    // Lowercase the type of specific fields\n    angular.forEach(['addresses', 'phones', 'urls'], function(key) {\n      angular.forEach(_this[key], function(o) {\n        if (o.type) o.type = o.type.toLowerCase();\n      });\n    });\n    // Instanciate Card objects for list members\n    angular.forEach(this.refs, function(o, i) {\n      if (o.email) o.emails = [{value: o.email}];\n      o.id = o.reference;\n      _this.refs[i] = new Card(o);\n    });\n    // Instanciate date object of birthday\n    if (this.birthday && angular.isString(this.birthday)) {\n      var dlp = Card.$Preferences.$mdDateLocaleProvider;\n      this.birthday = this.birthday.parseDate(dlp, '%Y-%m-%d');\n      this.$birthday = dlp.formatDate(this.birthday);\n    }\n\n    this.$loaded = angular.isDefined(this.c_name)? Card.STATUS.LOADED : Card.STATUS.NOT_LOADED;\n\n    // An empty attribute to trick md-autocomplete when adding attendees from the appointment editor\n    this.empty = ' ';\n  };\n\n  /**\n   * @function $id\n   * @memberof Card.prototype\n   * @desc Return the card ID.\n   * @returns the card ID\n   */\n  Card.prototype.$id = function() {\n    return this.$futureCardData.then(function(data) {\n      return data.id;\n    });\n  };\n\n  /**\n   * @function $isLoading\n   * @memberof Card.prototype\n   * @returns true if the Card definition is still being retrieved from server after a specific delay\n   * @see sgCard_STATUS\n   */\n  Card.prototype.$isLoading = function() {\n    return this.$loaded == Card.STATUS.LOADING;\n  };\n\n  /**\n   * @function $reload\n   * @memberof Message.prototype\n   * @desc Fetch the viewable message body along with other metadata such as the list of attachments.\n   * @returns a promise of the HTTP operation\n   */\n  Card.prototype.$reload = function() {\n    var futureCardData;\n\n    if (this.$futureCardData)\n      return this;\n\n    futureCardData = Card.$$resource.fetch([this.pid, this.id].join('/'), 'view');\n\n    return this.$unwrap(futureCardData);\n  };\n\n  /**\n   * @function $save\n   * @memberof Card.prototype\n   * @desc Save the card to the server.\n   */\n  Card.prototype.$save = function() {\n    var _this = this,\n        action = 'saveAsContact';\n\n    if (this.c_component == 'vlist') {\n      action = 'saveAsList';\n      _.forEach(this.refs, function(ref) {\n        ref.reference = ref.id;\n      });\n    }\n\n    return Card.$$resource.save([this.pid, this.id || '_new_'].join('/'),\n                                this.$omit(),\n                                { action: action })\n      .then(function(data) {\n        // Format birthdate\n        if (_this.birthday)\n          _this.$birthday = Card.$Preferences.$mdDateLocaleProvider.formatDate(_this.birthday);\n        // Make a copy of the data for an eventual reset\n        _this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  Card.prototype.$delete = function(attribute, index) {\n    if (attribute) {\n      if (index > -1 && this[attribute].length > index) {\n        this[attribute].splice(index, 1);\n      }\n      else\n        delete this[attribute];\n    }\n    else {\n      // No arguments -- delete card\n      return Card.$$resource.remove([this.pid, this.id].join('/'));\n    }\n  };\n\n  /**\n   * @function export\n   * @memberof Card.prototype\n   * @desc Download the current card\n   * @returns a promise of the HTTP operation\n   */\n  Card.prototype.export = function() {\n    var data, options;\n\n    data = { uids: [ this.id ] };\n    options = {\n      type: 'application/octet-stream',\n      filename: this.$$fullname + '.ldif'\n    };\n\n    return Card.$$resource.download(this.pid, 'export', data, options);\n  };\n\n  Card.prototype.$fullname = function(options) {\n    var fn = this.c_cn || '', html = options && options.html, email, names;\n    if (fn.length === 0) {\n      names = [];\n      if (this.c_givenname && this.c_givenname.length > 0)\n        names.push(this.c_givenname);\n      if (this.nickname && this.nickname.length > 0)\n        names.push((html?'<em>':'') + this.nickname + (html?'</em>':''));\n      if (this.c_sn && this.c_sn.length > 0)\n        names.push(this.c_sn);\n      if (names.length > 0)\n        fn = names.join(' ');\n      else if (this.org && this.org.length > 0) {\n        fn = this.org;\n      }\n      else if (this.emails && this.emails.length > 0) {\n        email = _.find(this.emails, function(i) { return i.value !== ''; });\n        if (email)\n          fn = email.value;\n      }\n    }\n    if (this.contactinfo)\n      fn += ' (' + this.contactinfo.split(\"\\n\").join(\"; \") + ')';\n\n    return fn;\n  };\n\n  Card.prototype.$description = function() {\n    var description = [];\n    if (this.title) description.push(this.title);\n    if (this.role) description.push(this.role);\n    if (this.org) description.push(this.org);\n    if (this.orgs) description = _.concat(description, _.map(this.orgs, 'value'));\n    if (this.description) description.push(this.description);\n\n    return description.join(', ');\n  };\n\n  /**\n   * @function $preferredEmail\n   * @memberof Card.prototype\n   * @desc Get the preferred email address.\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the first email address of type \"pref\" or the first address if none found\n   */\n  Card.prototype.$preferredEmail = function(partial) {\n    var email, re;\n    if (partial) {\n      re = new RegExp(partial, 'i');\n      email = _.find(this.emails, function(o) {\n        return re.test(o.value);\n      });\n    }\n    if (email) {\n      email = email.value;\n    }\n    else {\n      email = _.find(this.emails, function(o) {\n        return o.type == 'pref';\n      });\n      if (email) {\n        email = email.value;\n      }\n      else if (this.emails && this.emails.length) {\n        email = this.emails[0].value;\n      }\n      else if (this.c_mail && this.c_mail.length) {\n        email = this.c_mail[0];\n      }\n      else {\n        email = '';\n      }\n    }\n\n    return email;\n  };\n\n  /**\n   * @function $shortFormat\n   * @memberof Card.prototype\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the fullname along with a matching email address in parentheses\n   */\n  Card.prototype.$shortFormat = function(partial) {\n    var fullname = [this.$$fullname],\n        email = this.$preferredEmail(partial);\n    if (email && email != this.$$fullname)\n      fullname.push(' <' + email + '>');\n    return fullname.join(' ');\n  };\n\n  Card.prototype.$isCard = function() {\n    return this.c_component == 'vcard';\n  };\n\n  Card.prototype.$isList = function(options) {\n    // isGroup attribute means it's a group of a LDAP source (not expandable on the client-side)\n    var condition = (!options || !options.expandable || options.expandable && !this.isgroup);\n    return this.c_component == 'vlist' && condition;\n  };\n\n  Card.prototype.$addOrg = function(org) {\n    if (angular.isUndefined(this.orgs)) {\n      this.orgs = [org];\n    }\n    else if (org != this.org && !_.includes(this.orgs, org)) {\n      this.orgs.push(org);\n    }\n    return this.orgs.length - 1;\n  };\n\n  // Card.prototype.$addCategory = function(category) {\n  //   if (category) {\n  //     if (angular.isUndefined(this.categories)) {\n  //       this.categories = [{value: category}];\n  //     }\n  //     else {\n  //       for (var i = 0; i < this.categories.length; i++) {\n  //         if (this.categories[i].value == category) {\n  //           break;\n  //         }\n  //       }\n  //       if (i == this.categories.length)\n  //         this.categories.push({value: category});\n  //     }\n  //   }\n  // };\n\n  Card.prototype.$addEmail = function(type) {\n    if (angular.isUndefined(this.emails)) {\n      this.emails = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.emails, function(i) { return i.value === ''; }))) {\n      this.emails.push({type: type, value: ''});\n    }\n    return this.emails.length - 1;\n  };\n\n  Card.prototype.$addScreenName = function(screenName) {\n    this.c_screenname = screenName;\n  };\n\n  Card.prototype.$addPhone = function(type) {\n    if (angular.isUndefined(this.phones)) {\n      this.phones = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.phones, function(i) { return i.value === ''; }))) {\n      this.phones.push({type: type, value: ''});\n    }\n    return this.phones.length - 1;\n  };\n\n  Card.prototype.$addUrl = function(type, url) {\n    if (angular.isUndefined(this.urls)) {\n      this.urls = [{type: type, value: url}];\n    }\n    else if (_.isUndefined(_.find(this.urls, function(i) { return i.value == url; }))) {\n      this.urls.push({type: type, value: url});\n    }\n    return this.urls.length - 1;\n  };\n\n  Card.prototype.$addAddress = function(type, postoffice, street, street2, locality, region, country, postalcode) {\n    if (angular.isUndefined(this.addresses)) {\n      this.addresses = [{type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode}];\n    }\n    else if (!_.find(this.addresses, function(i) {\n      return i.street == street &&\n        i.street2 == street2 &&\n        i.locality == locality &&\n        i.country == country &&\n        i.postalcode == postalcode;\n    })) {\n      this.addresses.push({type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode});\n    }\n    return this.addresses.length - 1;\n  };\n\n  Card.prototype.$addMember = function(email) {\n    var card = new Card({email: email, emails: [{value: email}]}),\n        i;\n    if (angular.isUndefined(this.refs)) {\n      this.refs = [card];\n    }\n    else if (email.length === 0) {\n      this.refs.push(card);\n    }\n    else {\n      for (i = 0; i < this.refs.length; i++) {\n        if (this.refs[i].email == email) {\n          break;\n        }\n      }\n      if (i == this.refs.length)\n        this.refs.push(card);\n    }\n    return this.refs.length - 1;\n  };\n\n  /**\n   * @function $certificate\n   * @memberof Account.prototype\n   * @desc View the S/MIME certificate details associated to the account.\n   * @returns a promise of the HTTP operation\n   */\n  Card.prototype.$certificate = function() {\n    var _this = this;\n\n    if (this.hasCertificate) {\n      if (this.$$certificate)\n        return Card.$q.when(this.$$certificate);\n      else {\n        return Card.$$resource.fetch([this.pid, this.id].join('/'), 'certificate').then(function(data) {\n          _this.$$certificate = data;\n          return data;\n        });\n      }\n    }\n    else {\n      return Card.$q.reject();\n    }\n  };\n\n  /**\n   * @function $removeCertificate\n   * @memberof Account.prototype\n   * @desc Remove any S/MIME certificate associated with the account.\n   * @returns a promise of the HTTP operation\n   */\n  Card.prototype.$removeCertificate = function() {\n    var _this = this;\n\n    return Card.$$resource.fetch([this.pid, this.id].join('/'), 'removeCertificate').then(function() {\n      _this.hasCertificate = false;\n    });\n  };\n\n  /**\n   * @function explode\n   * @memberof Card.prototype\n   * @desc Create a new Card associated to each email address of this card.\n   * @return an array of Card instances\n   */\n  Card.prototype.explode = function() {\n    var _this = this, cards = [], data;\n\n    if (this.emails) {\n      if (this.emails.length > 1) {\n        data = this.$omit();\n        _.forEach(this.emails, function(email) {\n          var card = new Card(angular.extend({}, data, {emails: [email]}));\n          cards.push(card);\n        });\n        return cards;\n      }\n      else\n        return [this];\n    }\n\n    return [];\n  };\n\n  /**\n   * @function $reset\n   * @memberof Card.prototype\n   * @desc Reset the original state the card's data.\n   */\n  Card.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    this.init(this.$shadowData);\n    this.$shadowData = this.$omit(true);\n  };\n\n  /**\n   * @function $updateMember\n   * @memberof Card.prototype\n   * @desc Update an existing list member from a Card instance.\n   * A list member has the following attribtues:\n   * - email\n   * - reference\n   * - fn\n   * @param {number} index\n   * @param {string} email\n   * @param {Card} card\n   */\n  // Card.prototype.$updateMember = function(index, email, card) {\n  //   var ref = {\n  //     email: email,\n  //     emails: [{value: email}],\n  //     reference: card.c_name,\n  //     c_cn: card.$fullname()\n  //   };\n  //   this.refs[index] = new Card(ref);\n  // };\n\n  /**\n   * @function $unwrap\n   * @memberof Card.prototype\n   * @desc Unwrap a promise and make a copy of the resolved data.\n   * @param {object} futureCardData - a promise of the Card's data\n   */\n  Card.prototype.$unwrap = function(futureCardData) {\n    var _this = this;\n\n    // Card is not loaded yet\n    this.$loaded = Card.STATUS.DELAYED_LOADING;\n    Card.$timeout(function() {\n      if (_this.$loaded != Card.STATUS.LOADED)\n        _this.$loaded = Card.STATUS.LOADING;\n    }, Card.STATUS.DELAYED_MS);\n\n    // Expose the promise\n    this.$futureCardData = futureCardData.then(function(data) {\n      _this.init(data);\n      // Mark card as loaded\n      _this.$loaded = Card.STATUS.LOADED;\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit(true);\n\n      return _this;\n    });\n\n    return this.$futureCardData;\n  };\n\n  /**\n   * @function $omit\n   * @memberof Card.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Card instance\n   */\n  Card.prototype.$omit = function(deep) {\n    var card = {};\n    angular.forEach(this, function(value, key) {\n      if (key == 'refs') {\n        card.refs = _.map(value, function(o) {\n          return o.$omit(deep);\n        });\n      }\n      else if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          card[key] = angular.copy(value);\n        else\n          card[key] = value;\n      }\n    });\n\n    // We convert back our birthday object\n    if (!deep) {\n      if (card.birthday)\n        card.birthday = card.birthday.format(Card.$Preferences.$mdDateLocaleProvider, '%Y-%m-%d');\n      else\n        card.birthday = '';\n    }\n\n    // We flatten the organizations to an array of strings\n    if (this.orgs)\n      card.orgs = _.map(this.orgs, 'value');\n\n    // We flatten the notes to an array of strings\n    if (this.notes)\n      card.notes = _.map(this.notes, 'value');\n\n    return card;\n  };\n\n  Card.prototype.toString = function() {\n    var desc = this.id + ' ' + this.$$fullname;\n\n    if (this.$$email)\n      desc += ' <' + this.$$email + '>';\n\n    return '[' + desc + ']';\n  };\n})();\n"]}