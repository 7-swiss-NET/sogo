{"version":3,"file":"Contacts.services.js","sources":["Contacts/AddressBook.service.js","Contacts/Card.service.js"],"names":["AddressBook","futureAddressBookData","then","this","init","name","id","newAddressBookData","$$resource","create","$unwrap","$acl","$$Acl","$factory","$q","$timeout","$log","Settings","Resource","Card","Acl","Preferences","angular","extend","activeUser","$Card","$Preferences","selectedFolder","$refreshTimeout","module","e","factory","$filterAll","search","options","excludedCards","params","$cards","when","isUndefined","$query","fetch","response","results","card","index","compareIds","data","_","filter","contacts","find","length","splice","each","$add","addressbook","list","sibling","i","isSubscription","$subscriptions","$addressbooks","o","localeCompare","indexOf","pluck","$findAll","_this","$remotes","forEach","isRemote","push","$find","addressbookId","$subscribe","uid","path","userResource","addressbookData","prototype","cards","isOwned","isSuperUser","owner","login","value","sort","asc","$id","$futureAddressBookData","$selectedCount","count","selected","$startRefreshTimeout","cancel","ready","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","$reload","timeInterval","$filter","dry","oldIndex","removedCards","findIndex","$rename","$save","$delete","promise","d","defer","remove","resolve","status","reject","$deleteCards","uids","map","post","difference","$copyCards","folder","save","$omit","$getCard","cardId","isError","isObject","key","futureCardData","partial","pid","newCardData","newguid","isNew","$TEL_TYPES","$EMAIL_TYPES","$URL_TYPES","$ADDRESS_TYPES","Gravatar","$gravatar","SOGoContactsCategories","$categories","join","$unwrapCollection","filterCategories","query","re","RegExp","category","collection","$futureCardData","refs","$$fullname","$fullname","$$email","$preferredEmail","$$image","image","empty","action","c_component","$shadowData","attribute","names","fn","c_cn","c_givenname","nickname","c_sn","c_org","emails","$description","description","title","role","orgUnits","unit","org","email","test","type","$shortFormat","fullname","$birthday","Date","birthday","$isCard","$isList","$addOrgUnit","orgUnit","$addCategory","categories","$addEmail","$addPhone","phones","$addUrl","url","urls","$addAddress","postoffice","street","street2","locality","region","country","postalcode","addresses","$addMember","$reset","reference","deep","copy","toString","desc"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name AddressBook\n   * @constructor\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   */\n  function AddressBook(futureAddressBookData) {\n    // Data is immediately available\n    if (typeof futureAddressBookData.then !== 'function') {\n      this.init(futureAddressBookData);\n      if (this.name && !this.id) {\n        // Create a new addressbook on the server\n        var newAddressBookData = AddressBook.$$resource.create('createFolder', this.name);\n        this.$unwrap(newAddressBookData);\n      }\n      else if (this.id) {\n        this.$acl = new AddressBook.$$Acl('Contacts/' + this.id);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureAddressBookData);\n    }\n  }\n\n  /**\n   * @memberof AddressBook\n   * @desc The factory we'll use to register with Angular\n   * @returns the AddressBook constructor\n   */\n  AddressBook.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Card', 'Acl', 'Preferences', function($q, $timeout, $log, Settings, Resource, Card, Acl, Preferences) {\n    angular.extend(AddressBook, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $Card: Card,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      activeUser: Settings.activeUser(),\n      selectedFolder: null,\n      $refreshTimeout: null\n    });\n\n    return AddressBook; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of AddressBook in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .factory('AddressBook', AddressBook.$factory);\n\n  /**\n   * @memberof AddressBook\n   * @desc Search for cards among all addressbooks matching some criterias.\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query (excludeGroups and excludeLists)\n   * @param {object[]} excludedCards - a list of Card objects that must be excluded from the results\n   * @returns a collection of Cards instances\n   */\n  AddressBook.$filterAll = function(search, options, excludedCards) {\n    var params = {search: search};\n\n    if (!search) {\n      // No query specified\n      AddressBook.$cards = [];\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    if (angular.isUndefined(AddressBook.$cards)) {\n      // First session query\n      AddressBook.$cards = [];\n    }\n    else if (AddressBook.$query == search) {\n      // Query hasn't changed\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    AddressBook.$query = search;\n\n    angular.extend(params, options);\n\n    return AddressBook.$$resource.fetch(null, 'allContactSearch', params).then(function(response) {\n      var results, card, index,\n          compareIds = function(data) {\n            return this.id == data.id;\n          };\n      if (excludedCards) {\n        // Remove excluded cards from results\n        results = _.filter(response.contacts, function(data) {\n          return _.isUndefined(_.find(excludedCards, compareIds, data));\n        });\n      }\n      else {\n        results = response.contacts;\n      }\n      // Remove cards that no longer match the search query\n      for (index = AddressBook.$cards.length - 1; index >= 0; index--) {\n        card = AddressBook.$cards[index];\n        if (_.isUndefined(_.find(results, compareIds, card))) {\n          AddressBook.$cards.splice(index, 1);\n        }\n      }\n      // Add new cards matching the search query\n      _.each(results, function(data, index) {\n        if (_.isUndefined(_.find(AddressBook.$cards, compareIds, data))) {\n          var card = new AddressBook.$Card(data, search);\n          AddressBook.$cards.splice(index, 0, card);\n        }\n      });\n      return AddressBook.$cards;\n    });\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Add a new addressbook to the static list of addressbooks\n   * @param {AddressBook} addressbook - an Addressbook object instance\n   */\n  AddressBook.$add = function(addressbook) {\n    // Insert new addressbook at proper index\n    var list, sibling, i;\n\n    list = addressbook.isSubscription? this.$subscriptions : this.$addressbooks;\n    sibling = _.find(list, function(o) {\n      return (addressbook.id == 'personal' ||\n              (o.id != 'personal' &&\n               o.name.localeCompare(addressbook.name) === 1));\n    });\n    i = sibling ? _.indexOf(_.pluck(list, 'id'), sibling.id) : 1;\n    list.splice(i, 0, addressbook);\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Set or get the list of addressbooks. Will instantiate a new AddressBook object for each item.\n   * @param {array} [data] - the metadata of the addressbooks\n   * @returns the list of addressbooks\n   */\n  AddressBook.$findAll = function(data) {\n    var _this = this;\n    if (data) {\n      this.$addressbooks = [];\n      this.$subscriptions = [];\n      this.$remotes = [];\n      // Instanciate AddressBook objects\n      angular.forEach(data, function(o, i) {\n        var addressbook = new AddressBook(o);\n        if (addressbook.isRemote)\n          _this.$remotes.push(addressbook);\n        else if (addressbook.isSubscription)\n          _this.$subscriptions.push(addressbook);\n        else\n          _this.$addressbooks.push(addressbook);\n      });\n    }\n    return this.$addressbooks;\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Fetch list of cards and return an AddressBook instance.\n   * @param {string} addressbookId - the addressbook identifier\n   * @returns an AddressBook object instance\n   */\n  AddressBook.$find = function(addressbookId) {\n    var futureAddressBookData = AddressBook.$$resource.fetch(addressbookId, 'view');\n\n    return new AddressBook(futureAddressBookData);\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Subscribe to another user's addressbook and add it to the list of addressbooks.\n   * @param {string} uid - user id\n   * @param {string} path - path of folder for specified user\n   * @returns a promise of the HTTP query result\n   */\n  AddressBook.$subscribe = function(uid, path) {\n    var _this = this;\n    return AddressBook.$$resource.userResource(uid).fetch(path, 'subscribe').then(function(addressbookData) {\n      var addressbook = new AddressBook(addressbookData);\n      if (_.isUndefined(_.find(_this.$subscriptions, function(o) {\n        return o.id == addressbookData.id;\n      }))) {\n        // Not already subscribed\n        AddressBook.$add(addressbook);\n      }\n      return addressbook;\n    });\n  };\n\n  /**\n   * @function init\n   * @memberof AddressBook.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of addressbook\n   */\n  AddressBook.prototype.init = function(data) {\n    this.$cards = [];\n    this.cards = [];\n    angular.extend(this, data);\n    // Add 'isOwned' and 'isSubscription' attributes based on active user (TODO: add it server-side?)\n    this.isOwned = AddressBook.activeUser.isSuperUser || this.owner == AddressBook.activeUser.login;\n    this.isSubscription = !this.isRemote && this.owner != AddressBook.activeUser.login;\n    this.$query = {search: 'name_or_address', value: '', sort: 'c_cn', asc: 'true'};\n  };\n\n  /**\n   * @function $id\n   * @memberof AddressBook.prototype\n   * @desc Resolve the addressbook id.\n   * @returns a promise of the addressbook id\n   */\n  AddressBook.prototype.$id = function() {\n    if (this.id) {\n      // Object already unwrapped\n      return AddressBook.$q.when(this.id);\n    }\n    else {\n      // Wait until object is unwrapped\n      return this.$futureAddressBookData.then(function(addressbook) {\n        return addressbook.id;\n      });\n    }\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof AddressBook.prototype\n   * @desc Return the number of cards selected by the user.\n   * @returns the number of selected cards\n   */\n  AddressBook.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.cards) {\n      count = (_.filter(this.cards, function(card) { return card.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $startRefreshTimeout\n   * @memberof AddressBook.prototype\n   * @desc Starts the refresh timeout for the current selected address book\n   */\n  AddressBook.prototype.$startRefreshTimeout = function() {\n    var _this = this;\n\n    if (AddressBook.$refreshTimeout)\n      AddressBook.$timeout.cancel(AddressBook.$refreshTimeout);\n\n    AddressBook.$Preferences.ready().then(function() {\n      // Restart the refresh timer, if needed\n      var refreshViewCheck = AddressBook.$Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually') {\n        var f = angular.bind(_this, AddressBook.prototype.$reload);\n        AddressBook.$refreshTimeout = AddressBook.$timeout(f, refreshViewCheck.timeInterval()*1000);\n      }\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof AddressBook.prototype\n   * @desc Reload list of cards\n   * @returns a promise of the Cards instances\n   */\n  AddressBook.prototype.$reload = function() {\n    var _this = this;\n\n    this.$startRefreshTimeout();\n\n    return AddressBook.$$resource.fetch(this.id, 'view')\n      .then(function(response) {\n        var index, card,\n            results = response.cards,\n            cards = _this.cards,\n            compareIds = function(data) {\n              return this.id == data.id;\n            };\n\n        // Remove cards that no longer exist\n        for (index = cards.length - 1; index >= 0; index--) {\n          card = cards[index];\n          if (_.isUndefined(_.find(results, compareIds, card))) {\n            cards.splice(index, 1);\n          }\n        }\n\n        // Add new cards\n        _.each(results, function(data, index) {\n          if (_.isUndefined(_.find(cards, compareIds, data))) {\n            var card = new AddressBook.$Card(data);\n            cards.splice(index, 0, card);\n          }\n        });\n\n        return cards;\n      });\n  };\n\n    /**\n   * @function $filter\n   * @memberof AddressBook.prototype\n   * @desc Search for cards matching some criterias\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query\n   * @returns a collection of Cards instances\n   */\n  AddressBook.prototype.$filter = function(search, options, excludedCards) {\n    var _this = this;\n\n    if (options) {\n      angular.extend(this.$query, options);\n\n      if (options.dry) {\n        if (!search) {\n          // No query specified\n          this.$cards = [];\n          return AddressBook.$q.when(this.$cards);\n        }\n        else if (this.$query.value == search) {\n          // Query hasn't changed\n          return AddressBook.$q.when(this.$cards);\n        }\n      }\n    }\n\n    this.$query.value = search;\n\n    return this.$id().then(function(addressbookId) {\n      return AddressBook.$$resource.fetch(addressbookId, 'view', _this.$query);\n    }).then(function(response) {\n      var results, cards, card, index,\n          compareIds = function(data) {\n            return this.id == data.id;\n          };\n      if (options && options.dry) {\n        // Don't keep a copy of the resulting cards.\n        // This is usefull when doing autocompletion.\n        cards = _this.$cards;\n      }\n      else {\n        cards = _this.cards;\n      }\n      if (excludedCards) {\n        // Remove excluded cards from results\n        results = _.filter(response.cards, function(card) {\n          return _.isUndefined(_.find(excludedCards, compareIds, card));\n        });\n      }\n      else {\n        results = response.cards;\n      }\n      // Remove cards that no longer match the search query\n      for (index = cards.length - 1; index >= 0; index--) {\n        card = cards[index];\n        if (_.isUndefined(_.find(results, compareIds, card))) {\n          cards.splice(index, 1);\n        }\n      }\n      // Add new cards matching the search query\n      _.each(results, function(data, index) {\n        if (_.isUndefined(_.find(cards, compareIds, data))) {\n          var card = new AddressBook.$Card(data, search);\n          cards.splice(index, 0, card);\n        }\n      });\n      // Respect the order of the results\n      _.each(results, function(data, index) {\n        var oldIndex, removedCards;\n        if (cards[index].id != data.id) {\n          oldIndex = _.findIndex(cards, compareIds, data);\n          removedCards = cards.splice(oldIndex, 1);\n          cards.splice(index, 0, removedCards[0]);\n        }\n      });\n      return cards;\n    });\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$rename = function(name) {\n    var i = _.indexOf(_.pluck(AddressBook.$addressbooks, 'id'), this.id);\n    this.name = name;\n    AddressBook.$addressbooks.splice(i, 1);\n    AddressBook.$add(this);\n    return this.$save();\n  };\n\n  /**\n   * @function $delete\n   * @memberof AddressBook.prototype\n   * @desc Delete the addressbook from the server and the static list of addressbooks.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$delete = function() {\n    var _this = this,\n        d = AddressBook.$q.defer(),\n        list,\n        promise;\n\n    if (this.isSubscription) {\n      promise = AddressBook.$$resource.fetch(this.id, 'unsubscribe');\n      list = AddressBook.$subscriptions;\n    }\n    else {\n      promise = AddressBook.$$resource.remove(this.id);\n      list = AddressBook.$addressbooks;\n    }\n\n    promise.then(function() {\n      var i = _.indexOf(_.pluck(list, 'id'), _this.id);\n      list.splice(i, 1);\n      d.resolve();\n    }, function(data, status) {\n      d.reject(data);\n    });\n    return d.promise;\n  };\n\n  /**\n   * @function $deleteCards\n   * @memberof AddressBook.prototype\n   * @desc Delete multiple cards from addressbook.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$deleteCards = function(cards) {\n\n    var uids = _.map(cards, function(card) { return card.id; });\n    var _this = this;\n    \n    return AddressBook.$$resource.post(this.id, 'batchDelete', {uids: uids}).then(function() {\n      _this.cards = _.difference(_this.cards, cards);\n    });\n  };\n\n  /**\n   * @function $copyCards\n   * @memberof AddressBook.prototype\n   * @desc Copy multiple cards from addressbook to an other one.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$copyCards = function(cards, folder) {\n    var uids = _.map(cards, function(card) { return card.id; });\n    return AddressBook.$$resource.post(this.id, 'copy', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $save\n   * @memberof AddressBook.prototype\n   * @desc Save the addressbook to the server. This currently can only affect the name of the addressbook.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$save = function() {\n    return AddressBook.$$resource.save(this.id, this.$omit()).then(function(data) {\n      return data;\n    });\n  };\n\n  /**\n   * @function $getCard\n   * @memberof AddressBook.prototype\n   * @desc Fetch the card attributes from the server.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$getCard = function(cardId) {\n    return this.$id().then(function(addressbookId) {\n      return AddressBook.$Card.$find(addressbookId, cardId);\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof AddressBook.prototype\n   * @desc Unwrap a promise and instanciate new Card objects using received data.\n   * @param {promise} futureAddressBookData - a promise of the AddressBook's data\n   */\n  AddressBook.prototype.$unwrap = function(futureAddressBookData) {\n    var _this = this;\n\n    // Expose and sesolve the promise\n    this.$futureAddressBookData = futureAddressBookData.then(function(data) {\n      return AddressBook.$timeout(function() {\n        // Extend AddressBook instance from data of addressbooks list.\n        // Will inherit attributes such as isEditable and isRemote.\n        angular.forEach(AddressBook.$findAll(), function(o, i) {\n          if (o.id == data.id) {\n            angular.extend(_this, o);\n          }\n        });\n        // Extend AddressBook instance with received data\n        _this.init(data);\n        // Instanciate Card objects\n        angular.forEach(_this.cards, function(o, i) {\n          _this.cards[i] = new AddressBook.$Card(o);\n        });\n        // Instanciate Acl object\n        _this.$acl = new AddressBook.$$Acl('Contacts/' + _this.id);\n\n        _this.$startRefreshTimeout();\n\n        return _this;\n      });\n    }, function(data) {\n      _this.isError = true;\n      if (angular.isObject(data)) {\n        AddressBook.$timeout(function() {\n          angular.extend(_this, data);\n        });\n      }\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof AddressBook.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Addressbook instance\n   */\n  AddressBook.prototype.$omit = function() {\n    var addressbook = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'cards' &&\n          key[0] != '$') {\n        addressbook[key] = value;\n      }\n    });\n    return addressbook;\n  };\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Card\n   * @constructor\n   * @param {object} futureCardData\n   * @param {string} [partial]\n   */\n  function Card(futureCardData, partial) {\n\n    // Data is immediately available\n    if (typeof futureCardData.then !== 'function') {\n      this.init(futureCardData, partial);\n      if (this.pid && !this.id) {\n        // Prepare for the creation of a new card;\n        // Get UID from the server.\n        var newCardData = Card.$$resource.newguid(this.pid);\n        this.$unwrap(newCardData);\n        this.isNew = true;\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureCardData);\n    }\n  }\n\n  Card.$TEL_TYPES = ['work', 'home', 'cell', 'fax', 'pager'];\n  Card.$EMAIL_TYPES = ['work', 'home', 'pref'];\n  Card.$URL_TYPES = ['work', 'home', 'pref'];\n  Card.$ADDRESS_TYPES = ['work', 'home'];\n\n  /**\n   * @memberof Card\n   * @desc The factory we'll use to register with Angular.\n   * @returns the Card constructor\n   */\n  Card.$factory = ['$timeout', 'sgSettings', 'Resource', 'Preferences', 'Gravatar', function($timeout, Settings, Resource, Preferences, Gravatar) {\n    angular.extend(Card, {\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $timeout: $timeout,\n      $gravatar: Gravatar\n    });\n    // Initialize categories from user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoContactsCategories) {\n        Card.$categories = Preferences.defaults.SOGoContactsCategories;\n      }\n    });\n\n    return Card; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of Card in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .factory('Card', Card.$factory);\n\n  /**\n   * @memberof Card\n   * @desc Fetch a card from a specific addressbook.\n   * @param {string} addressbookId - the addressbook ID\n   * @param {string} cardId - the card ID\n   * @see {@link AddressBook.$getCard}\n   */\n  Card.$find = function(addressbookId, cardId) {\n    var futureCardData = this.$$resource.fetch([addressbookId, cardId].join('/'), 'view');\n\n    if (cardId) return new Card(futureCardData); // a single card\n\n    return Card.$unwrapCollection(futureCardData); // a collection of cards\n  };\n\n  /**\n   * @function filterCategories\n   * @memberof Card.prototype\n   * @desc Search for categories matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Card.filterCategories = function(query) {\n    var re = new RegExp(query, 'i');\n    return _.filter(Card.$categories, function(category) {\n      return category.search(re) != -1;\n    });\n  };\n\n  /**\n   * @memberof Card\n   * @desc Unwrap to a collection of Card instances.\n   * @param {object} futureCardData\n   */\n  Card.$unwrapCollection = function(futureCardData) {\n    var collection = {};\n\n    collection.$futureCardData = futureCardData;\n\n    futureCardData.then(function(cards) {\n      Card.$timeout(function() {\n        angular.forEach(cards, function(data, index) {\n          collection[data.id] = new Card(data);\n        });\n      });\n    });\n\n    return collection;\n  };\n\n  /**\n   * @function init\n   * @memberof Card.prototype\n   * @desc Extend instance with required attributes and new data.\n   * @param {object} data - attributes of card\n   */\n  Card.prototype.init = function(data, partial) {\n    this.refs = [];\n    angular.extend(this, data);\n    if (!this.$$fullname)\n      this.$$fullname = this.$fullname();\n    if (!this.$$email)\n      this.$$email = this.$preferredEmail(partial);\n    if (!this.$$image)\n      this.$$image = this.image || Card.$gravatar(this.$preferredEmail(partial), 32);\n    this.selected = false;\n\n    // An empty attribute to trick md-autocomplete when adding attendees from the appointment editor\n    this.empty = ' ';\n  };\n\n  /**\n   * @function $id\n   * @memberof Card.prototype\n   * @desc Return the card ID.\n   * @returns the card ID\n   */\n  Card.prototype.$id = function() {\n    return this.$futureCardData.then(function(data) {\n      return data.id;\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Card.prototype\n   * @desc Save the card to the server.\n   */\n  Card.prototype.$save = function() {\n    var _this = this,\n        action = 'saveAsContact';\n\n    if (this.c_component == 'vlist') action = 'saveAsList';\n\n    return Card.$$resource.save([this.pid, this.id || '_new_'].join('/'),\n                                this.$omit(),\n                                { action: action })\n      .then(function(data) {\n        // Make a copy of the data for an eventual reset\n        _this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  Card.prototype.$delete = function(attribute, index) {\n    if (attribute) {\n      if (index > -1 && this[attribute].length > index) {\n        this[attribute].splice(index, 1);\n      }\n    }\n    else {\n      // No arguments -- delete card\n      return Card.$$resource.remove([this.pid, this.id].join('/'));\n    }\n  };\n\n  Card.prototype.$fullname = function() {\n    var fn = this.c_cn || '', names;\n    if (fn.length === 0) {\n      names = [];\n      if (this.c_givenname && this.c_givenname.length > 0)\n        names.push(this.c_givenname);\n      if (this.nickname && this.nickname.length > 0)\n        names.push('<em>' + this.nickname + '</em>');\n      if (this.c_sn && this.c_sn.length > 0)\n        names.push(this.c_sn);\n      if (names.length > 0)\n        fn = names.join(' ');\n      else if (this.c_org && this.c_org.length > 0) {\n        fn = this.c_org;\n      }\n      else if (this.emails && this.emails.length > 0) {\n        fn = _.find(this.emails, function(i) { return i.value !== ''; }).value;\n      }\n      else if (this.c_cn && this.c_cn.length > 0) {\n        fn = this.c_cn;\n      }\n    }\n\n    return fn;\n  };\n\n  Card.prototype.$description = function() {\n    var description = [];\n    if (this.title) description.push(this.title);\n    if (this.role) description.push(this.role);\n    if (this.orgUnits && this.orgUnits.length > 0)\n      _.forEach(this.orgUnits, function(unit) {\n        if (unit.value !== '')\n          description.push(unit.value);\n      });\n    if (this.org) description.push(this.org);\n    if (this.description) description.push(this.description);\n\n    return description.join(', ');\n  };\n\n  /**\n   * @function $preferredEmail\n   * @memberof Card.prototype\n   * @desc Get the preferred email address.\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the first email address of type \"pref\" or the first address if none found\n   */\n  Card.prototype.$preferredEmail = function(partial) {\n    var email, re;\n    if (partial) {\n      re = new RegExp(partial, 'i');\n      email = _.find(this.emails, function(o) {\n        return re.test(o.value);\n      });\n    }\n    if (email) {\n      email = email.value;\n    }\n    else {\n      email = _.find(this.emails, function(o) {\n        return o.type == 'pref';\n      });\n      if (email) {\n        email = email.value;\n      }\n      else if (this.emails && this.emails.length) {\n        email = this.emails[0].value;\n      }\n      else {\n        email = '';\n      }\n    }\n\n    return email;\n  };\n\n  /**\n   * @function $shortFormat\n   * @memberof Card.prototype\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the fullname along with a matching email address in parentheses\n   */\n  Card.prototype.$shortFormat = function(partial) {\n    var fullname = this.$fullname(),\n        email = this.$preferredEmail(partial);\n    if (email && email != fullname)\n      fullname += ' <' + email + '>';\n    return fullname;\n  };\n\n  Card.prototype.$birthday = function() {\n    return new Date(this.birthday * 1000);\n  };\n\n  Card.prototype.$isCard = function() {\n    return this.c_component == 'vcard';\n  };\n\n  Card.prototype.$isList = function() {\n    return this.c_component == 'vlist';\n  };\n\n  Card.prototype.$addOrgUnit = function(orgUnit) {\n    if (angular.isUndefined(this.orgUnits)) {\n      this.orgUnits = [{value: orgUnit}];\n    }\n    else {\n      for (var i = 0; i < this.orgUnits.length; i++) {\n        if (this.orgUnits[i].value == orgUnit) {\n          break;\n        }\n      }\n      if (i == this.orgUnits.length)\n        this.orgUnits.push({value: orgUnit});\n    }\n    return this.orgUnits.length - 1;\n  };\n\n  Card.prototype.$addCategory = function(category) {\n    if (angular.isUndefined(this.categories)) {\n      this.categories = [{value: category}];\n    }\n    else {\n      for (var i = 0; i < this.categories.length; i++) {\n        if (this.categories[i].value == category) {\n          break;\n        }\n      }\n      if (i == this.categories.length)\n        this.categories.push({value: category});\n    }\n  };\n\n  Card.prototype.$addEmail = function(type) {\n    if (angular.isUndefined(this.emails)) {\n      this.emails = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.emails, function(i) { return i.value === ''; }))) {\n      this.emails.push({type: type, value: ''});\n    }\n    return this.emails.length - 1;\n  };\n\n  Card.prototype.$addPhone = function(type) {\n    if (angular.isUndefined(this.phones)) {\n      this.phones = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.phones, function(i) { return i.value === ''; }))) {\n      this.phones.push({type: type, value: ''});\n    }\n    return this.phones.length - 1;\n  };\n\n  Card.prototype.$addUrl = function(type, url) {\n    if (angular.isUndefined(this.urls)) {\n      this.urls = [{type: type, value: url}];\n    }\n    else if (_.isUndefined(_.find(this.urls, function(i) { return i.value == url; }))) {\n      this.urls.push({type: type, value: url});\n    }\n    return this.urls.length - 1;\n  };\n\n  Card.prototype.$addAddress = function(type, postoffice, street, street2, locality, region, country, postalcode) {\n    if (angular.isUndefined(this.addresses)) {\n      this.addresses = [{type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode}];\n    }\n    else if (!_.find(this.addresses, function(i) {\n      return i.street == street &&\n        i.street2 == street2 &&\n        i.locality == locality &&\n        i.country == country &&\n        i.postalcode == postalcode;\n    })) {\n      this.addresses.push({type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode});\n    }\n    return this.addresses.length - 1;\n  };\n\n  Card.prototype.$addMember = function(email) {\n    var card = new Card({email: email, emails: [{value: email}]}),\n        i;\n    if (angular.isUndefined(this.refs)) {\n      this.refs = [card];\n    }\n    else if (email.length === 0) {\n      this.refs.push(card);\n    }\n    else {\n      for (i = 0; i < this.refs.length; i++) {\n        if (this.refs[i].email == email) {\n          break;\n        }\n      }\n      if (i == this.refs.length)\n        this.refs.push(card);\n    }\n    return this.refs.length - 1;\n  };\n\n  /**\n   * @function $reset\n   * @memberof Card.prototype\n   * @desc Reset the original state the card's data.\n   */\n  Card.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    // Reinstanciate Card objects for list members\n    angular.forEach(this.refs, function(o, i) {\n      if (o.email) o.emails = [{value: o.email}];\n      _this.refs[i] = new Card(o);\n    });\n    this.$shadowData = this.$omit(true);\n  };\n\n  /**\n   * @function $updateMember\n   * @memberof Card.prototype\n   * @desc Update an existing list member from a Card instance.\n   * A list member has the following attribtues:\n   * - email\n   * - reference\n   * - fn\n   * @param {number} index\n   * @param {string} email\n   * @param {Card} card\n   */\n  // Card.prototype.$updateMember = function(index, email, card) {\n  //   var ref = {\n  //     email: email,\n  //     emails: [{value: email}],\n  //     reference: card.c_name,\n  //     c_cn: card.$fullname()\n  //   };\n  //   this.refs[index] = new Card(ref);\n  // };\n\n  /**\n   * @function $unwrap\n   * @memberof Card.prototype\n   * @desc Unwrap a promise and make a copy of the resolved data.\n   * @param {object} futureCardData - a promise of the Card's data\n   */\n  Card.prototype.$unwrap = function(futureCardData) {\n    var _this = this;\n\n    // Expose the promise\n    this.$futureCardData = futureCardData;\n\n    // Resolve the promise\n    this.$futureCardData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      Card.$timeout(function() {\n        _this.init(data);\n        // Instanciate Card objects for list members\n        angular.forEach(_this.refs, function(o, i) {\n          if (o.email) o.emails = [{value: o.email}];\n          o.id = o.reference;\n          _this.refs[i] = new Card(o);\n        });\n        if (_this.birthday) {\n          _this.birthday = new Date(_this.birthday * 1000);\n        }\n        // Make a copy of the data for an eventual reset\n        _this.$shadowData = _this.$omit(true);\n      });\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof Card.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Card instance\n   */\n  Card.prototype.$omit = function(deep) {\n    var card = {};\n    angular.forEach(this, function(value, key) {\n      if (key == 'refs') {\n        card.refs = _.map(value, function(o) {\n          return o.$omit(deep);\n        });\n      }\n      else if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          card[key] = angular.copy(value);\n        else\n          card[key] = value;\n      }\n    });\n    return card;\n  };\n\n  Card.prototype.toString = function() {\n    var desc = this.id + ' ' + this.$$fullname;\n\n    if (this.$$email)\n      desc += ' <' + this.$$email + '>';\n\n    return '[' + desc + ']';\n  };\n})();\n"]}