{"version":3,"file":"Contacts.services.js","sources":["Contacts/AddressBook.service.js","Contacts/Card.service.js"],"names":["AddressBook","futureAddressBookData","then","this","init","name","id","newAddressBookData","$$resource","create","$unwrap","$acl","$$Acl","$factory","$q","$timeout","$log","Settings","Resource","Card","Acl","Preferences","angular","extend","activeUser","$Card","$Preferences","$query","search","value","sort","asc","selectedFolder","$refreshTimeout","ready","settings","Contact","SortingState","parseInt","module","e","factory","$filterAll","options","excludedCards","params","$cards","when","isUndefined","fetch","response","results","card","index","compareIds","data","_","filter","contacts","find","length","splice","each","debug","$add","addressbook","list","sibling","i","isSubscription","$subscriptions","$addressbooks","o","localeCompare","indexOf","pluck","$findAll","_this","$remotes","forEach","isRemote","push","union","$find","addressbookId","$subscribe","uid","path","userResource","addressbookData","prototype","$isLoading","cards","isOwned","isSuperUser","owner","login","$id","$futureAddressBookData","$selectedCount","count","selected","$startRefreshTimeout","cancel","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","$reload","timeInterval","$filter","dry","isDefined","oldIndex","removedCards","findIndex","$rename","$save","$delete","promise","d","defer","remove","resolve","status","reject","$deleteCards","uids","map","post","difference","$copyCards","folder","save","$omit","$getCard","cardId","fullCard","cachedCard","$futureCardData","isError","isObject","key","futureCardData","partial","pid","newCardData","newguid","isNew","$TEL_TYPES","$EMAIL_TYPES","$URL_TYPES","$ADDRESS_TYPES","Gravatar","$gravatar","SOGoContactsCategories","$categories","join","$unwrapCollection","filterCategories","query","re","RegExp","category","collection","refs","$$fullname","$fullname","$$email","$preferredEmail","$$image","image","empty","action","c_component","$shadowData","attribute","names","fn","c_cn","c_givenname","nickname","c_sn","c_org","emails","$description","description","title","role","orgUnits","unit","email","test","type","$shortFormat","fullname","$birthday","birthday","getFullYear","getMonth","getDate","$isCard","$isList","$addOrgUnit","orgUnit","$addCategory","categories","$addEmail","$addPhone","phones","$addUrl","url","urls","$addAddress","postoffice","street","street2","locality","region","country","postalcode","addresses","$addMember","$reset","reference","Date","deep","copy","getTime","toString","desc"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name AddressBook\n   * @constructor\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   */\n  function AddressBook(futureAddressBookData) {\n    // Data is immediately available\n    if (typeof futureAddressBookData.then !== 'function') {\n      this.init(futureAddressBookData);\n      if (this.name && !this.id) {\n        // Create a new addressbook on the server\n        var newAddressBookData = AddressBook.$$resource.create('createFolder', this.name);\n        this.$unwrap(newAddressBookData);\n      }\n      else if (this.id) {\n        this.$acl = new AddressBook.$$Acl('Contacts/' + this.id);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureAddressBookData);\n    }\n  }\n\n  /**\n   * @memberof AddressBook\n   * @desc The factory we'll use to register with Angular\n   * @returns the AddressBook constructor\n   */\n  AddressBook.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Card', 'Acl', 'Preferences', function($q, $timeout, $log, Settings, Resource, Card, Acl, Preferences) {\n    angular.extend(AddressBook, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $Card: Card,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: {search: 'name_or_address', value: '', sort: 'c_cn', asc: 1},\n      activeUser: Settings.activeUser(),\n      selectedFolder: null,\n      $refreshTimeout: null\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Contact.SortingState) {\n        AddressBook.$query.sort = Preferences.settings.Contact.SortingState[0];\n        AddressBook.$query.asc = parseInt(Preferences.settings.Contact.SortingState[1]);\n      }\n    });\n    return AddressBook; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of AddressBook in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .factory('AddressBook', AddressBook.$factory);\n\n  /**\n   * @memberof AddressBook\n   * @desc Search for cards among all addressbooks matching some criterias.\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query (excludeGroups and excludeLists)\n   * @param {object[]} excludedCards - a list of Card objects that must be excluded from the results\n   * @returns a collection of Cards instances\n   */\n  AddressBook.$filterAll = function(search, options, excludedCards) {\n    var params = {search: search};\n\n    if (!search) {\n      // No query specified\n      AddressBook.$cards = [];\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    if (angular.isUndefined(AddressBook.$cards)) {\n      // First session query\n      AddressBook.$cards = [];\n    }\n    else if (AddressBook.$query.value == search) {\n      // Query hasn't changed\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    AddressBook.$query.value = search;\n\n    angular.extend(params, options);\n\n    return AddressBook.$$resource.fetch(null, 'allContactSearch', params).then(function(response) {\n      var results, card, index,\n          compareIds = function(data) {\n            return this.id == data.id;\n          };\n      if (excludedCards) {\n        // Remove excluded cards from results\n        results = _.filter(response.contacts, function(data) {\n          return _.isUndefined(_.find(excludedCards, compareIds, data));\n        });\n      }\n      else {\n        results = response.contacts;\n      }\n      // Remove cards that no longer match the search query\n      for (index = AddressBook.$cards.length - 1; index >= 0; index--) {\n        card = AddressBook.$cards[index];\n        if (_.isUndefined(_.find(results, compareIds, card))) {\n          AddressBook.$cards.splice(index, 1);\n        }\n      }\n      // Add new cards matching the search query\n      _.each(results, function(data, index) {\n        if (_.isUndefined(_.find(AddressBook.$cards, compareIds, data))) {\n          var card = new AddressBook.$Card(data, search);\n          AddressBook.$cards.splice(index, 0, card);\n        }\n      });\n      AddressBook.$log.debug(AddressBook.$cards);\n      return AddressBook.$cards;\n    });\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Add a new addressbook to the static list of addressbooks\n   * @param {AddressBook} addressbook - an Addressbook object instance\n   */\n  AddressBook.$add = function(addressbook) {\n    // Insert new addressbook at proper index\n    var list, sibling, i;\n\n    list = addressbook.isSubscription? this.$subscriptions : this.$addressbooks;\n    sibling = _.find(list, function(o) {\n      return (addressbook.id == 'personal' ||\n              (o.id != 'personal' &&\n               o.name.localeCompare(addressbook.name) === 1));\n    });\n    i = sibling ? _.indexOf(_.pluck(list, 'id'), sibling.id) : 1;\n    list.splice(i, 0, addressbook);\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Set or get the list of addressbooks. Will instantiate a new AddressBook object for each item.\n   * @param {array} [data] - the metadata of the addressbooks\n   * @returns the list of addressbooks\n   */\n  AddressBook.$findAll = function(data) {\n    var _this = this;\n    if (data) {\n      this.$addressbooks = [];\n      this.$subscriptions = [];\n      this.$remotes = [];\n      // Instanciate AddressBook objects\n      angular.forEach(data, function(o, i) {\n        var addressbook = new AddressBook(o);\n        if (addressbook.isRemote)\n          _this.$remotes.push(addressbook);\n        else if (addressbook.isSubscription)\n          _this.$subscriptions.push(addressbook);\n        else\n          _this.$addressbooks.push(addressbook);\n      });\n    }\n    return _.union(this.$addressbooks, this.$subscriptions, this.$remotes);\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Fetch list of cards and return an AddressBook instance.\n   * @param {string} addressbookId - the addressbook identifier\n   * @returns an AddressBook object instance\n   */\n  AddressBook.$find = function(addressbookId) {\n    var futureAddressBookData = AddressBook.$Preferences.ready().then(function() {\n      return AddressBook.$$resource.fetch(addressbookId, 'view', AddressBook.$query);\n    });\n    return new AddressBook(futureAddressBookData);\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Subscribe to another user's addressbook and add it to the list of addressbooks.\n   * @param {string} uid - user id\n   * @param {string} path - path of folder for specified user\n   * @returns a promise of the HTTP query result\n   */\n  AddressBook.$subscribe = function(uid, path) {\n    var _this = this;\n    return AddressBook.$$resource.userResource(uid).fetch(path, 'subscribe').then(function(addressbookData) {\n      var addressbook = new AddressBook(addressbookData);\n      if (_.isUndefined(_.find(_this.$subscriptions, function(o) {\n        return o.id == addressbookData.id;\n      }))) {\n        // Not already subscribed\n        AddressBook.$add(addressbook);\n      }\n      return addressbook;\n    });\n  };\n\n  /**\n   * @function init\n   * @memberof AddressBook.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of addressbook\n   */\n  AddressBook.prototype.init = function(data) {\n    this.$isLoading = true;\n    this.$cards = [];\n    this.cards = [];\n    angular.extend(this, data);\n    // Add 'isOwned' and 'isSubscription' attributes based on active user (TODO: add it server-side?)\n    this.isOwned = AddressBook.activeUser.isSuperUser || this.owner == AddressBook.activeUser.login;\n    this.isSubscription = !this.isRemote && this.owner != AddressBook.activeUser.login;\n  };\n\n  /**\n   * @function $id\n   * @memberof AddressBook.prototype\n   * @desc Resolve the addressbook id.\n   * @returns a promise of the addressbook id\n   */\n  AddressBook.prototype.$id = function() {\n    if (this.id) {\n      // Object already unwrapped\n      return AddressBook.$q.when(this.id);\n    }\n    else {\n      // Wait until object is unwrapped\n      return this.$futureAddressBookData.then(function(addressbook) {\n        return addressbook.id;\n      });\n    }\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof AddressBook.prototype\n   * @desc Return the number of cards selected by the user.\n   * @returns the number of selected cards\n   */\n  AddressBook.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.cards) {\n      count = (_.filter(this.cards, function(card) { return card.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $startRefreshTimeout\n   * @memberof AddressBook.prototype\n   * @desc Starts the refresh timeout for the current selected address book\n   */\n  AddressBook.prototype.$startRefreshTimeout = function() {\n    var _this = this;\n\n    if (AddressBook.$refreshTimeout)\n      AddressBook.$timeout.cancel(AddressBook.$refreshTimeout);\n\n    AddressBook.$Preferences.ready().then(function() {\n      // Restart the refresh timer, if needed\n      var refreshViewCheck = AddressBook.$Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually') {\n        var f = angular.bind(_this, AddressBook.prototype.$reload);\n        AddressBook.$refreshTimeout = AddressBook.$timeout(f, refreshViewCheck.timeInterval()*1000);\n      }\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof AddressBook.prototype\n   * @desc Reload list of cards\n   * @returns a promise of the Cards instances\n   */\n  AddressBook.prototype.$reload = function() {\n    var _this = this;\n\n    this.$startRefreshTimeout();\n    return this.$filter();\n  };\n\n    /**\n   * @function $filter\n   * @memberof AddressBook.prototype\n   * @desc Search for cards matching some criterias\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query\n   * @returns a collection of Cards instances\n   */\n  AddressBook.prototype.$filter = function(search, options, excludedCards) {\n    var _this = this;\n\n    if (!options || !options.dry)\n      this.$isLoading = true;\n\n    return AddressBook.$Preferences.ready().then(function() {\n      if (options) {\n        angular.extend(AddressBook.$query, options);\n\n        if (options.dry) {\n          if (!search) {\n            // No query specified\n            _this.$cards = [];\n            return AddressBook.$q.when(_this.$cards);\n          }\n          else if (AddressBook.$query.value == search) {\n            // Query hasn't changed\n            return AddressBook.$q.when(_this.$cards);\n          }\n        }\n      }\n\n      if (angular.isDefined(search))\n        AddressBook.$query.value = search;\n\n      return _this.$id().then(function(addressbookId) {\n        return AddressBook.$$resource.fetch(addressbookId, 'view', AddressBook.$query);\n      }).then(function(response) {\n        var results, cards, card, index,\n            compareIds = function(data) {\n              return _this.id == data.id;\n            };\n        if (options && options.dry) {\n          // Don't keep a copy of the resulting cards.\n          // This is usefull when doing autocompletion.\n          cards = _this.$cards;\n        }\n        else {\n          cards = _this.cards;\n        }\n        if (excludedCards) {\n          // Remove excluded cards from results\n          results = _.filter(response.cards, function(card) {\n            return _.isUndefined(_.find(excludedCards, compareIds, card));\n          });\n        }\n        else {\n          results = response.cards;\n        }\n        // Remove cards that no longer match the search query\n        for (index = cards.length - 1; index >= 0; index--) {\n          card = cards[index];\n          if (_.isUndefined(_.find(results, compareIds, card))) {\n            cards.splice(index, 1);\n          }\n        }\n        // Add new cards matching the search query\n        _.each(results, function(data, index) {\n          if (_.isUndefined(_.find(cards, compareIds, data))) {\n            var card = new AddressBook.$Card(data, search);\n            cards.splice(index, 0, card);\n          }\n        });\n        // Respect the order of the results\n        _.each(results, function(data, index) {\n          var oldIndex, removedCards;\n          if (cards[index].id != data.id) {\n            oldIndex = _.findIndex(cards, compareIds, data);\n            removedCards = cards.splice(oldIndex, 1);\n            cards.splice(index, 0, removedCards[0]);\n          }\n        });\n        _this.$isLoading = false;\n        return cards;\n      });\n    });\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$rename = function(name) {\n    var i = _.indexOf(_.pluck(AddressBook.$addressbooks, 'id'), this.id);\n    this.name = name;\n    AddressBook.$addressbooks.splice(i, 1);\n    AddressBook.$add(this);\n    return this.$save();\n  };\n\n  /**\n   * @function $delete\n   * @memberof AddressBook.prototype\n   * @desc Delete the addressbook from the server and the static list of addressbooks.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$delete = function() {\n    var _this = this,\n        d = AddressBook.$q.defer(),\n        list,\n        promise;\n\n    if (this.isSubscription) {\n      promise = AddressBook.$$resource.fetch(this.id, 'unsubscribe');\n      list = AddressBook.$subscriptions;\n    }\n    else {\n      promise = AddressBook.$$resource.remove(this.id);\n      list = AddressBook.$addressbooks;\n    }\n\n    promise.then(function() {\n      var i = _.indexOf(_.pluck(list, 'id'), _this.id);\n      list.splice(i, 1);\n      d.resolve();\n    }, function(data, status) {\n      d.reject(data);\n    });\n    return d.promise;\n  };\n\n  /**\n   * @function $deleteCards\n   * @memberof AddressBook.prototype\n   * @desc Delete multiple cards from addressbook.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$deleteCards = function(cards) {\n\n    var uids = _.map(cards, function(card) { return card.id; });\n    var _this = this;\n    \n    return AddressBook.$$resource.post(this.id, 'batchDelete', {uids: uids}).then(function() {\n      _this.cards = _.difference(_this.cards, cards);\n    });\n  };\n\n  /**\n   * @function $copyCards\n   * @memberof AddressBook.prototype\n   * @desc Copy multiple cards from addressbook to an other one.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$copyCards = function(cards, folder) {\n    var uids = _.map(cards, function(card) { return card.id; });\n    return AddressBook.$$resource.post(this.id, 'copy', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $save\n   * @memberof AddressBook.prototype\n   * @desc Save the addressbook to the server. This currently can only affect the name of the addressbook.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$save = function() {\n    return AddressBook.$$resource.save(this.id, this.$omit()).then(function(data) {\n      return data;\n    });\n  };\n\n  /**\n   * @function $getCard\n   * @memberof AddressBook.prototype\n   * @desc Fetch the card attributes from the server.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$getCard = function(cardId) {\n    var _this = this;\n\n    return this.$id().then(function(addressbookId) {\n      var fullCard,\n          cachedCard = _.find(_this.cards, function(data) {\n            return cardId == data.id;\n          });\n\n      if (cachedCard && cachedCard.$futureCardData)\n        // Full card is available\n        return cachedCard;\n\n      fullCard = AddressBook.$Card.$find(addressbookId, cardId);\n      fullCard.$id().then(function(cardId) {\n        // Extend the Card object of the addressbook list with the full card description\n        if (cachedCard)\n          angular.extend(cachedCard, fullCard);\n      });\n      return fullCard;\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof AddressBook.prototype\n   * @desc Unwrap a promise and instanciate new Card objects using received data.\n   * @param {promise} futureAddressBookData - a promise of the AddressBook's data\n   */\n  AddressBook.prototype.$unwrap = function(futureAddressBookData) {\n    var _this = this;\n\n    // Expose and sesolve the promise\n    this.$futureAddressBookData = futureAddressBookData.then(function(data) {\n      return AddressBook.$timeout(function() {\n        // Extend AddressBook instance from data of addressbooks list.\n        // Will inherit attributes such as isEditable and isRemote.\n        angular.forEach(AddressBook.$findAll(), function(o, i) {\n          if (o.id == data.id) {\n            angular.extend(_this, o);\n          }\n        });\n        // Extend AddressBook instance with received data\n        _this.init(data);\n        // Instanciate Card objects\n        angular.forEach(_this.cards, function(o, i) {\n          _this.cards[i] = new AddressBook.$Card(o);\n        });\n        // Instanciate Acl object\n        _this.$acl = new AddressBook.$$Acl('Contacts/' + _this.id);\n\n        _this.$startRefreshTimeout();\n\n        _this.$isLoading = false;\n\n        return _this;\n      });\n    }, function(data) {\n      _this.isError = true;\n      if (angular.isObject(data)) {\n        AddressBook.$timeout(function() {\n          angular.extend(_this, data);\n        });\n      }\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof AddressBook.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Addressbook instance\n   */\n  AddressBook.prototype.$omit = function() {\n    var addressbook = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'cards' &&\n          key[0] != '$') {\n        addressbook[key] = value;\n      }\n    });\n    return addressbook;\n  };\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Card\n   * @constructor\n   * @param {object} futureCardData\n   * @param {string} [partial]\n   */\n  function Card(futureCardData, partial) {\n\n    // Data is immediately available\n    if (typeof futureCardData.then !== 'function') {\n      this.init(futureCardData, partial);\n      if (this.pid && !this.id) {\n        // Prepare for the creation of a new card;\n        // Get UID from the server.\n        var newCardData = Card.$$resource.newguid(this.pid);\n        this.$unwrap(newCardData);\n        this.isNew = true;\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureCardData);\n    }\n  }\n\n  Card.$TEL_TYPES = ['work', 'home', 'cell', 'fax', 'pager'];\n  Card.$EMAIL_TYPES = ['work', 'home', 'pref'];\n  Card.$URL_TYPES = ['work', 'home', 'pref'];\n  Card.$ADDRESS_TYPES = ['work', 'home'];\n\n  /**\n   * @memberof Card\n   * @desc The factory we'll use to register with Angular.\n   * @returns the Card constructor\n   */\n  Card.$factory = ['$timeout', 'sgSettings', 'Resource', 'Preferences', 'Gravatar', function($timeout, Settings, Resource, Preferences, Gravatar) {\n    angular.extend(Card, {\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $timeout: $timeout,\n      $gravatar: Gravatar\n    });\n    // Initialize categories from user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoContactsCategories) {\n        Card.$categories = Preferences.defaults.SOGoContactsCategories;\n      }\n    });\n\n    return Card; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of Card in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .factory('Card', Card.$factory);\n\n  /**\n   * @memberof Card\n   * @desc Fetch a card from a specific addressbook.\n   * @param {string} addressbookId - the addressbook ID\n   * @param {string} cardId - the card ID\n   * @see {@link AddressBook.$getCard}\n   */\n  Card.$find = function(addressbookId, cardId) {\n    var futureCardData = this.$$resource.fetch([addressbookId, cardId].join('/'), 'view');\n\n    if (cardId) return new Card(futureCardData); // a single card\n\n    return Card.$unwrapCollection(futureCardData); // a collection of cards\n  };\n\n  /**\n   * @function filterCategories\n   * @memberof Card.prototype\n   * @desc Search for categories matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Card.filterCategories = function(query) {\n    var re = new RegExp(query, 'i');\n    return _.filter(Card.$categories, function(category) {\n      return category.search(re) != -1;\n    });\n  };\n\n  /**\n   * @memberof Card\n   * @desc Unwrap to a collection of Card instances.\n   * @param {object} futureCardData\n   */\n  Card.$unwrapCollection = function(futureCardData) {\n    var collection = {};\n\n    collection.$futureCardData = futureCardData;\n\n    futureCardData.then(function(cards) {\n      Card.$timeout(function() {\n        angular.forEach(cards, function(data, index) {\n          collection[data.id] = new Card(data);\n        });\n      });\n    });\n\n    return collection;\n  };\n\n  /**\n   * @function init\n   * @memberof Card.prototype\n   * @desc Extend instance with required attributes and new data.\n   * @param {object} data - attributes of card\n   */\n  Card.prototype.init = function(data, partial) {\n    this.refs = [];\n    angular.extend(this, data);\n    if (!this.$$fullname)\n      this.$$fullname = this.$fullname();\n    if (!this.$$email)\n      this.$$email = this.$preferredEmail(partial);\n    if (!this.$$image)\n      this.$$image = this.image || Card.$gravatar(this.$preferredEmail(partial), 32);\n    this.selected = false;\n\n    // An empty attribute to trick md-autocomplete when adding attendees from the appointment editor\n    this.empty = ' ';\n  };\n\n  /**\n   * @function $id\n   * @memberof Card.prototype\n   * @desc Return the card ID.\n   * @returns the card ID\n   */\n  Card.prototype.$id = function() {\n    return this.$futureCardData.then(function(data) {\n      return data.id;\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Card.prototype\n   * @desc Save the card to the server.\n   */\n  Card.prototype.$save = function() {\n    var _this = this,\n        action = 'saveAsContact';\n\n    if (this.c_component == 'vlist') action = 'saveAsList';\n\n    return Card.$$resource.save([this.pid, this.id || '_new_'].join('/'),\n                                this.$omit(),\n                                { action: action })\n      .then(function(data) {\n        // Make a copy of the data for an eventual reset\n        _this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  Card.prototype.$delete = function(attribute, index) {\n    if (attribute) {\n      if (index > -1 && this[attribute].length > index) {\n        this[attribute].splice(index, 1);\n      }\n      else\n        delete this[attribute];\n    }\n    else {\n      // No arguments -- delete card\n      return Card.$$resource.remove([this.pid, this.id].join('/'));\n    }\n  };\n\n  Card.prototype.$fullname = function() {\n    var fn = this.c_cn || '', names;\n    if (fn.length === 0) {\n      names = [];\n      if (this.c_givenname && this.c_givenname.length > 0)\n        names.push(this.c_givenname);\n      if (this.nickname && this.nickname.length > 0)\n        names.push('<em>' + this.nickname + '</em>');\n      if (this.c_sn && this.c_sn.length > 0)\n        names.push(this.c_sn);\n      if (names.length > 0)\n        fn = names.join(' ');\n      else if (this.c_org && this.c_org.length > 0) {\n        fn = this.c_org;\n      }\n      else if (this.emails && this.emails.length > 0) {\n        fn = _.find(this.emails, function(i) { return i.value !== ''; }).value;\n      }\n      else if (this.c_cn && this.c_cn.length > 0) {\n        fn = this.c_cn;\n      }\n    }\n\n    return fn;\n  };\n\n  Card.prototype.$description = function() {\n    var description = [];\n    if (this.title) description.push(this.title);\n    if (this.role) description.push(this.role);\n    if (this.orgUnits && this.orgUnits.length > 0)\n      _.forEach(this.orgUnits, function(unit) {\n        if (unit.value !== '')\n          description.push(unit.value);\n      });\n    if (this.c_org) description.push(this.c_org);\n    if (this.description) description.push(this.description);\n\n    return description.join(', ');\n  };\n\n  /**\n   * @function $preferredEmail\n   * @memberof Card.prototype\n   * @desc Get the preferred email address.\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the first email address of type \"pref\" or the first address if none found\n   */\n  Card.prototype.$preferredEmail = function(partial) {\n    var email, re;\n    if (partial) {\n      re = new RegExp(partial, 'i');\n      email = _.find(this.emails, function(o) {\n        return re.test(o.value);\n      });\n    }\n    if (email) {\n      email = email.value;\n    }\n    else {\n      email = _.find(this.emails, function(o) {\n        return o.type == 'pref';\n      });\n      if (email) {\n        email = email.value;\n      }\n      else if (this.emails && this.emails.length) {\n        email = this.emails[0].value;\n      }\n      else {\n        email = '';\n      }\n    }\n\n    return email;\n  };\n\n  /**\n   * @function $shortFormat\n   * @memberof Card.prototype\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the fullname along with a matching email address in parentheses\n   */\n  Card.prototype.$shortFormat = function(partial) {\n    var fullname = this.$fullname(),\n        email = this.$preferredEmail(partial);\n    if (email && email != fullname)\n      fullname += ' <' + email + '>';\n    return fullname;\n  };\n\n  /**\n   * @function $birthday\n   * @memberof Card.prototype\n   * @returns the formatted birthday object\n   */\n  Card.prototype.$birthday = function() {\n    if (this.birthday) {\n      return [this.birthday.getFullYear(), this.birthday.getMonth() + 1, this.birthday.getDate()].join('/');\n    }\n    return '';\n  };\n\n  Card.prototype.$isCard = function() {\n    return this.c_component == 'vcard';\n  };\n\n  Card.prototype.$isList = function() {\n    return this.c_component == 'vlist';\n  };\n\n  Card.prototype.$addOrgUnit = function(orgUnit) {\n    if (angular.isUndefined(this.orgUnits)) {\n      this.orgUnits = [{value: orgUnit}];\n    }\n    else {\n      for (var i = 0; i < this.orgUnits.length; i++) {\n        if (this.orgUnits[i].value == orgUnit) {\n          break;\n        }\n      }\n      if (i == this.orgUnits.length)\n        this.orgUnits.push({value: orgUnit});\n    }\n    return this.orgUnits.length - 1;\n  };\n\n  Card.prototype.$addCategory = function(category) {\n    if (angular.isUndefined(this.categories)) {\n      this.categories = [{value: category}];\n    }\n    else {\n      for (var i = 0; i < this.categories.length; i++) {\n        if (this.categories[i].value == category) {\n          break;\n        }\n      }\n      if (i == this.categories.length)\n        this.categories.push({value: category});\n    }\n  };\n\n  Card.prototype.$addEmail = function(type) {\n    if (angular.isUndefined(this.emails)) {\n      this.emails = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.emails, function(i) { return i.value === ''; }))) {\n      this.emails.push({type: type, value: ''});\n    }\n    return this.emails.length - 1;\n  };\n\n  Card.prototype.$addPhone = function(type) {\n    if (angular.isUndefined(this.phones)) {\n      this.phones = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.phones, function(i) { return i.value === ''; }))) {\n      this.phones.push({type: type, value: ''});\n    }\n    return this.phones.length - 1;\n  };\n\n  Card.prototype.$addUrl = function(type, url) {\n    if (angular.isUndefined(this.urls)) {\n      this.urls = [{type: type, value: url}];\n    }\n    else if (_.isUndefined(_.find(this.urls, function(i) { return i.value == url; }))) {\n      this.urls.push({type: type, value: url});\n    }\n    return this.urls.length - 1;\n  };\n\n  Card.prototype.$addAddress = function(type, postoffice, street, street2, locality, region, country, postalcode) {\n    if (angular.isUndefined(this.addresses)) {\n      this.addresses = [{type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode}];\n    }\n    else if (!_.find(this.addresses, function(i) {\n      return i.street == street &&\n        i.street2 == street2 &&\n        i.locality == locality &&\n        i.country == country &&\n        i.postalcode == postalcode;\n    })) {\n      this.addresses.push({type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode});\n    }\n    return this.addresses.length - 1;\n  };\n\n  Card.prototype.$addMember = function(email) {\n    var card = new Card({email: email, emails: [{value: email}]}),\n        i;\n    if (angular.isUndefined(this.refs)) {\n      this.refs = [card];\n    }\n    else if (email.length === 0) {\n      this.refs.push(card);\n    }\n    else {\n      for (i = 0; i < this.refs.length; i++) {\n        if (this.refs[i].email == email) {\n          break;\n        }\n      }\n      if (i == this.refs.length)\n        this.refs.push(card);\n    }\n    return this.refs.length - 1;\n  };\n\n  /**\n   * @function $reset\n   * @memberof Card.prototype\n   * @desc Reset the original state the card's data.\n   */\n  Card.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    // Reinstanciate Card objects for list members\n    angular.forEach(this.refs, function(o, i) {\n      if (o.email) o.emails = [{value: o.email}];\n      _this.refs[i] = new Card(o);\n    });\n    this.$shadowData = this.$omit(true);\n  };\n\n  /**\n   * @function $updateMember\n   * @memberof Card.prototype\n   * @desc Update an existing list member from a Card instance.\n   * A list member has the following attribtues:\n   * - email\n   * - reference\n   * - fn\n   * @param {number} index\n   * @param {string} email\n   * @param {Card} card\n   */\n  // Card.prototype.$updateMember = function(index, email, card) {\n  //   var ref = {\n  //     email: email,\n  //     emails: [{value: email}],\n  //     reference: card.c_name,\n  //     c_cn: card.$fullname()\n  //   };\n  //   this.refs[index] = new Card(ref);\n  // };\n\n  /**\n   * @function $unwrap\n   * @memberof Card.prototype\n   * @desc Unwrap a promise and make a copy of the resolved data.\n   * @param {object} futureCardData - a promise of the Card's data\n   */\n  Card.prototype.$unwrap = function(futureCardData) {\n    var _this = this;\n\n    // Expose the promise\n    this.$futureCardData = futureCardData.then(function(data) {\n      _this.init(data);\n      // Instanciate Card objects for list members\n      angular.forEach(_this.refs, function(o, i) {\n        if (o.email) o.emails = [{value: o.email}];\n        o.id = o.reference;\n        _this.refs[i] = new Card(o);\n      });\n      if (_this.birthday) {\n        _this.birthday = new Date(_this.birthday * 1000);\n      }\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit(true);\n      return _this;\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof Card.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Card instance\n   */\n  Card.prototype.$omit = function(deep) {\n    var card = {};\n    angular.forEach(this, function(value, key) {\n      if (key == 'refs') {\n        card.refs = _.map(value, function(o) {\n          return o.$omit(deep);\n        });\n      }\n      else if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          card[key] = angular.copy(value);\n        else\n          card[key] = value;\n      }\n    });\n\n    // We convert back our birthday object\n    if (!deep) {\n      if (card.birthday)\n        card.birthday = card.birthday.getTime()/1000;\n      else\n        card.birthday = 0;\n    }\n\n    return card;\n  };\n\n  Card.prototype.toString = function() {\n    var desc = this.id + ' ' + this.$$fullname;\n\n    if (this.$$email)\n      desc += ' <' + this.$$email + '>';\n\n    return '[' + desc + ']';\n  };\n})();\n"]}