{"version":3,"file":"Contacts.services.js","sources":["Contacts/AddressBook.service.js","Contacts/Card.service.js"],"names":["AddressBook","futureAddressBookData","then","this","init","name","id","newAddressBookData","$$resource","create","$unwrap","$acl","$$Acl","$factory","$q","$timeout","$log","Settings","Resource","Card","Acl","Preferences","angular","extend","activeUser","$Card","$Preferences","$query","search","value","sort","asc","selectedFolder","$refreshTimeout","ready","settings","Contact","SortingState","parseInt","module","e","factory","$filterAll","options","excludedCards","params","$cards","when","isUndefined","fetch","response","results","card","index","compareIds","data","_","filter","contacts","find","length","splice","each","$add","addressbook","list","sibling","i","isSubscription","$subscriptions","$addressbooks","o","localeCompare","indexOf","pluck","$findAll","_this","$remotes","forEach","isRemote","push","union","$find","addressbookId","$subscribe","uid","path","userResource","addressbookData","prototype","cards","isOwned","isSuperUser","owner","login","$id","$futureAddressBookData","$selectedCount","count","selected","$startRefreshTimeout","cancel","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","$reload","timeInterval","$filter","dry","oldIndex","removedCards","findIndex","$rename","$save","$delete","promise","d","defer","remove","resolve","status","reject","$deleteCards","uids","map","post","difference","$copyCards","folder","save","$omit","$getCard","cardId","isError","isObject","key","futureCardData","partial","pid","newCardData","newguid","isNew","$TEL_TYPES","$EMAIL_TYPES","$URL_TYPES","$ADDRESS_TYPES","Gravatar","$gravatar","SOGoContactsCategories","$categories","join","$unwrapCollection","filterCategories","query","re","RegExp","category","collection","$futureCardData","refs","$$fullname","$fullname","$$email","$preferredEmail","$$image","image","empty","action","c_component","$shadowData","attribute","names","fn","c_cn","c_givenname","nickname","c_sn","c_org","emails","$description","description","title","role","orgUnits","unit","org","email","test","type","$shortFormat","fullname","$birthday","birthday","getFullYear","getMonth","getDate","$isCard","$isList","$addOrgUnit","orgUnit","$addCategory","categories","$addEmail","$addPhone","phones","$addUrl","url","urls","$addAddress","postoffice","street","street2","locality","region","country","postalcode","addresses","$addMember","$reset","reference","Date","deep","copy","getTime","toString","desc"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name AddressBook\n   * @constructor\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   */\n  function AddressBook(futureAddressBookData) {\n    // Data is immediately available\n    if (typeof futureAddressBookData.then !== 'function') {\n      this.init(futureAddressBookData);\n      if (this.name && !this.id) {\n        // Create a new addressbook on the server\n        var newAddressBookData = AddressBook.$$resource.create('createFolder', this.name);\n        this.$unwrap(newAddressBookData);\n      }\n      else if (this.id) {\n        this.$acl = new AddressBook.$$Acl('Contacts/' + this.id);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureAddressBookData);\n    }\n  }\n\n  /**\n   * @memberof AddressBook\n   * @desc The factory we'll use to register with Angular\n   * @returns the AddressBook constructor\n   */\n  AddressBook.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Card', 'Acl', 'Preferences', function($q, $timeout, $log, Settings, Resource, Card, Acl, Preferences) {\n    angular.extend(AddressBook, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $Card: Card,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: {search: 'name_or_address', value: '', sort: 'c_cn', asc: 1},\n      activeUser: Settings.activeUser(),\n      selectedFolder: null,\n      $refreshTimeout: null\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Contact.SortingState) {\n        AddressBook.$query.sort = Preferences.settings.Contact.SortingState[0];\n        AddressBook.$query.asc = parseInt(Preferences.settings.Contact.SortingState[1]);\n      }\n    });\n    return AddressBook; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of AddressBook in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .factory('AddressBook', AddressBook.$factory);\n\n  /**\n   * @memberof AddressBook\n   * @desc Search for cards among all addressbooks matching some criterias.\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query (excludeGroups and excludeLists)\n   * @param {object[]} excludedCards - a list of Card objects that must be excluded from the results\n   * @returns a collection of Cards instances\n   */\n  AddressBook.$filterAll = function(search, options, excludedCards) {\n    var params = {search: search};\n\n    if (!search) {\n      // No query specified\n      AddressBook.$cards = [];\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    if (angular.isUndefined(AddressBook.$cards)) {\n      // First session query\n      AddressBook.$cards = [];\n    }\n    else if (AddressBook.$query == search) {\n      // Query hasn't changed\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    AddressBook.$query = search;\n\n    angular.extend(params, options);\n\n    return AddressBook.$$resource.fetch(null, 'allContactSearch', params).then(function(response) {\n      var results, card, index,\n          compareIds = function(data) {\n            return this.id == data.id;\n          };\n      if (excludedCards) {\n        // Remove excluded cards from results\n        results = _.filter(response.contacts, function(data) {\n          return _.isUndefined(_.find(excludedCards, compareIds, data));\n        });\n      }\n      else {\n        results = response.contacts;\n      }\n      // Remove cards that no longer match the search query\n      for (index = AddressBook.$cards.length - 1; index >= 0; index--) {\n        card = AddressBook.$cards[index];\n        if (_.isUndefined(_.find(results, compareIds, card))) {\n          AddressBook.$cards.splice(index, 1);\n        }\n      }\n      // Add new cards matching the search query\n      _.each(results, function(data, index) {\n        if (_.isUndefined(_.find(AddressBook.$cards, compareIds, data))) {\n          var card = new AddressBook.$Card(data, search);\n          AddressBook.$cards.splice(index, 0, card);\n        }\n      });\n      return AddressBook.$cards;\n    });\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Add a new addressbook to the static list of addressbooks\n   * @param {AddressBook} addressbook - an Addressbook object instance\n   */\n  AddressBook.$add = function(addressbook) {\n    // Insert new addressbook at proper index\n    var list, sibling, i;\n\n    list = addressbook.isSubscription? this.$subscriptions : this.$addressbooks;\n    sibling = _.find(list, function(o) {\n      return (addressbook.id == 'personal' ||\n              (o.id != 'personal' &&\n               o.name.localeCompare(addressbook.name) === 1));\n    });\n    i = sibling ? _.indexOf(_.pluck(list, 'id'), sibling.id) : 1;\n    list.splice(i, 0, addressbook);\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Set or get the list of addressbooks. Will instantiate a new AddressBook object for each item.\n   * @param {array} [data] - the metadata of the addressbooks\n   * @returns the list of addressbooks\n   */\n  AddressBook.$findAll = function(data) {\n    var _this = this;\n    if (data) {\n      this.$addressbooks = [];\n      this.$subscriptions = [];\n      this.$remotes = [];\n      // Instanciate AddressBook objects\n      angular.forEach(data, function(o, i) {\n        var addressbook = new AddressBook(o);\n        if (addressbook.isRemote)\n          _this.$remotes.push(addressbook);\n        else if (addressbook.isSubscription)\n          _this.$subscriptions.push(addressbook);\n        else\n          _this.$addressbooks.push(addressbook);\n      });\n    }\n    return _.union(this.$addressbooks, this.$subscriptions, this.$remotes);\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Fetch list of cards and return an AddressBook instance.\n   * @param {string} addressbookId - the addressbook identifier\n   * @returns an AddressBook object instance\n   */\n  AddressBook.$find = function(addressbookId) {\n    var futureAddressBookData = AddressBook.$$resource.fetch(addressbookId, 'view', AddressBook.$query);\n    return new AddressBook(futureAddressBookData);\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Subscribe to another user's addressbook and add it to the list of addressbooks.\n   * @param {string} uid - user id\n   * @param {string} path - path of folder for specified user\n   * @returns a promise of the HTTP query result\n   */\n  AddressBook.$subscribe = function(uid, path) {\n    var _this = this;\n    return AddressBook.$$resource.userResource(uid).fetch(path, 'subscribe').then(function(addressbookData) {\n      var addressbook = new AddressBook(addressbookData);\n      if (_.isUndefined(_.find(_this.$subscriptions, function(o) {\n        return o.id == addressbookData.id;\n      }))) {\n        // Not already subscribed\n        AddressBook.$add(addressbook);\n      }\n      return addressbook;\n    });\n  };\n\n  /**\n   * @function init\n   * @memberof AddressBook.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of addressbook\n   */\n  AddressBook.prototype.init = function(data) {\n    this.$cards = [];\n    this.cards = [];\n    angular.extend(this, data);\n    // Add 'isOwned' and 'isSubscription' attributes based on active user (TODO: add it server-side?)\n    this.isOwned = AddressBook.activeUser.isSuperUser || this.owner == AddressBook.activeUser.login;\n    this.isSubscription = !this.isRemote && this.owner != AddressBook.activeUser.login;\n  };\n\n  /**\n   * @function $id\n   * @memberof AddressBook.prototype\n   * @desc Resolve the addressbook id.\n   * @returns a promise of the addressbook id\n   */\n  AddressBook.prototype.$id = function() {\n    if (this.id) {\n      // Object already unwrapped\n      return AddressBook.$q.when(this.id);\n    }\n    else {\n      // Wait until object is unwrapped\n      return this.$futureAddressBookData.then(function(addressbook) {\n        return addressbook.id;\n      });\n    }\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof AddressBook.prototype\n   * @desc Return the number of cards selected by the user.\n   * @returns the number of selected cards\n   */\n  AddressBook.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.cards) {\n      count = (_.filter(this.cards, function(card) { return card.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $startRefreshTimeout\n   * @memberof AddressBook.prototype\n   * @desc Starts the refresh timeout for the current selected address book\n   */\n  AddressBook.prototype.$startRefreshTimeout = function() {\n    var _this = this;\n\n    if (AddressBook.$refreshTimeout)\n      AddressBook.$timeout.cancel(AddressBook.$refreshTimeout);\n\n    AddressBook.$Preferences.ready().then(function() {\n      // Restart the refresh timer, if needed\n      var refreshViewCheck = AddressBook.$Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually') {\n        var f = angular.bind(_this, AddressBook.prototype.$reload);\n        AddressBook.$refreshTimeout = AddressBook.$timeout(f, refreshViewCheck.timeInterval()*1000);\n      }\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof AddressBook.prototype\n   * @desc Reload list of cards\n   * @returns a promise of the Cards instances\n   */\n  AddressBook.prototype.$reload = function() {\n    var _this = this;\n\n    this.$startRefreshTimeout();\n\n    return AddressBook.$$resource.fetch(this.id, 'view')\n      .then(function(response) {\n        var index, card,\n            results = response.cards,\n            cards = _this.cards,\n            compareIds = function(data) {\n              return this.id == data.id;\n            };\n\n        // Remove cards that no longer exist\n        for (index = cards.length - 1; index >= 0; index--) {\n          card = cards[index];\n          if (_.isUndefined(_.find(results, compareIds, card))) {\n            cards.splice(index, 1);\n          }\n        }\n\n        // Add new cards\n        _.each(results, function(data, index) {\n          if (_.isUndefined(_.find(cards, compareIds, data))) {\n            var card = new AddressBook.$Card(data);\n            cards.splice(index, 0, card);\n          }\n        });\n\n        return cards;\n      });\n  };\n\n    /**\n   * @function $filter\n   * @memberof AddressBook.prototype\n   * @desc Search for cards matching some criterias\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query\n   * @returns a collection of Cards instances\n   */\n  AddressBook.prototype.$filter = function(search, options, excludedCards) {\n    var _this = this;\n\n    return AddressBook.$Preferences.ready().then(function() {\n      if (options) {\n        angular.extend(AddressBook.$query, options);\n\n        if (options.dry) {\n          if (!search) {\n            // No query specified\n            _this.$cards = [];\n            return AddressBook.$q.when(_this.$cards);\n          }\n          else if (AddressBook.$query.value == search) {\n            // Query hasn't changed\n            return AddressBook.$q.when(_this.$cards);\n          }\n        }\n      }\n\n      AddressBook.$query.value = search;\n\n      return _this.$id().then(function(addressbookId) {\n        return AddressBook.$$resource.fetch(addressbookId, 'view', AddressBook.$query);\n      }).then(function(response) {\n        var results, cards, card, index,\n            compareIds = function(data) {\n              return _this.id == data.id;\n            };\n        if (options && options.dry) {\n          // Don't keep a copy of the resulting cards.\n          // This is usefull when doing autocompletion.\n          cards = _this.$cards;\n        }\n        else {\n          cards = _this.cards;\n        }\n        if (excludedCards) {\n          // Remove excluded cards from results\n          results = _.filter(response.cards, function(card) {\n            return _.isUndefined(_.find(excludedCards, compareIds, card));\n          });\n        }\n        else {\n          results = response.cards;\n        }\n        // Remove cards that no longer match the search query\n        for (index = cards.length - 1; index >= 0; index--) {\n          card = cards[index];\n          if (_.isUndefined(_.find(results, compareIds, card))) {\n            cards.splice(index, 1);\n          }\n        }\n        // Add new cards matching the search query\n        _.each(results, function(data, index) {\n          if (_.isUndefined(_.find(cards, compareIds, data))) {\n            var card = new AddressBook.$Card(data, search);\n            cards.splice(index, 0, card);\n          }\n        });\n        // Respect the order of the results\n        _.each(results, function(data, index) {\n          var oldIndex, removedCards;\n          if (cards[index].id != data.id) {\n            oldIndex = _.findIndex(cards, compareIds, data);\n            removedCards = cards.splice(oldIndex, 1);\n            cards.splice(index, 0, removedCards[0]);\n          }\n        });\n        return cards;\n      });\n    });\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$rename = function(name) {\n    var i = _.indexOf(_.pluck(AddressBook.$addressbooks, 'id'), this.id);\n    this.name = name;\n    AddressBook.$addressbooks.splice(i, 1);\n    AddressBook.$add(this);\n    return this.$save();\n  };\n\n  /**\n   * @function $delete\n   * @memberof AddressBook.prototype\n   * @desc Delete the addressbook from the server and the static list of addressbooks.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$delete = function() {\n    var _this = this,\n        d = AddressBook.$q.defer(),\n        list,\n        promise;\n\n    if (this.isSubscription) {\n      promise = AddressBook.$$resource.fetch(this.id, 'unsubscribe');\n      list = AddressBook.$subscriptions;\n    }\n    else {\n      promise = AddressBook.$$resource.remove(this.id);\n      list = AddressBook.$addressbooks;\n    }\n\n    promise.then(function() {\n      var i = _.indexOf(_.pluck(list, 'id'), _this.id);\n      list.splice(i, 1);\n      d.resolve();\n    }, function(data, status) {\n      d.reject(data);\n    });\n    return d.promise;\n  };\n\n  /**\n   * @function $deleteCards\n   * @memberof AddressBook.prototype\n   * @desc Delete multiple cards from addressbook.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$deleteCards = function(cards) {\n\n    var uids = _.map(cards, function(card) { return card.id; });\n    var _this = this;\n    \n    return AddressBook.$$resource.post(this.id, 'batchDelete', {uids: uids}).then(function() {\n      _this.cards = _.difference(_this.cards, cards);\n    });\n  };\n\n  /**\n   * @function $copyCards\n   * @memberof AddressBook.prototype\n   * @desc Copy multiple cards from addressbook to an other one.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$copyCards = function(cards, folder) {\n    var uids = _.map(cards, function(card) { return card.id; });\n    return AddressBook.$$resource.post(this.id, 'copy', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $save\n   * @memberof AddressBook.prototype\n   * @desc Save the addressbook to the server. This currently can only affect the name of the addressbook.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$save = function() {\n    return AddressBook.$$resource.save(this.id, this.$omit()).then(function(data) {\n      return data;\n    });\n  };\n\n  /**\n   * @function $getCard\n   * @memberof AddressBook.prototype\n   * @desc Fetch the card attributes from the server.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$getCard = function(cardId) {\n    return this.$id().then(function(addressbookId) {\n      return AddressBook.$Card.$find(addressbookId, cardId);\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof AddressBook.prototype\n   * @desc Unwrap a promise and instanciate new Card objects using received data.\n   * @param {promise} futureAddressBookData - a promise of the AddressBook's data\n   */\n  AddressBook.prototype.$unwrap = function(futureAddressBookData) {\n    var _this = this;\n\n    // Expose and sesolve the promise\n    this.$futureAddressBookData = futureAddressBookData.then(function(data) {\n      return AddressBook.$timeout(function() {\n        // Extend AddressBook instance from data of addressbooks list.\n        // Will inherit attributes such as isEditable and isRemote.\n        angular.forEach(AddressBook.$findAll(), function(o, i) {\n          if (o.id == data.id) {\n            angular.extend(_this, o);\n          }\n        });\n        // Extend AddressBook instance with received data\n        _this.init(data);\n        // Instanciate Card objects\n        angular.forEach(_this.cards, function(o, i) {\n          _this.cards[i] = new AddressBook.$Card(o);\n        });\n        // Instanciate Acl object\n        _this.$acl = new AddressBook.$$Acl('Contacts/' + _this.id);\n\n        _this.$startRefreshTimeout();\n\n        return _this;\n      });\n    }, function(data) {\n      _this.isError = true;\n      if (angular.isObject(data)) {\n        AddressBook.$timeout(function() {\n          angular.extend(_this, data);\n        });\n      }\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof AddressBook.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Addressbook instance\n   */\n  AddressBook.prototype.$omit = function() {\n    var addressbook = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'cards' &&\n          key[0] != '$') {\n        addressbook[key] = value;\n      }\n    });\n    return addressbook;\n  };\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Card\n   * @constructor\n   * @param {object} futureCardData\n   * @param {string} [partial]\n   */\n  function Card(futureCardData, partial) {\n\n    // Data is immediately available\n    if (typeof futureCardData.then !== 'function') {\n      this.init(futureCardData, partial);\n      if (this.pid && !this.id) {\n        // Prepare for the creation of a new card;\n        // Get UID from the server.\n        var newCardData = Card.$$resource.newguid(this.pid);\n        this.$unwrap(newCardData);\n        this.isNew = true;\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureCardData);\n    }\n  }\n\n  Card.$TEL_TYPES = ['work', 'home', 'cell', 'fax', 'pager'];\n  Card.$EMAIL_TYPES = ['work', 'home', 'pref'];\n  Card.$URL_TYPES = ['work', 'home', 'pref'];\n  Card.$ADDRESS_TYPES = ['work', 'home'];\n\n  /**\n   * @memberof Card\n   * @desc The factory we'll use to register with Angular.\n   * @returns the Card constructor\n   */\n  Card.$factory = ['$timeout', 'sgSettings', 'Resource', 'Preferences', 'Gravatar', function($timeout, Settings, Resource, Preferences, Gravatar) {\n    angular.extend(Card, {\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $timeout: $timeout,\n      $gravatar: Gravatar\n    });\n    // Initialize categories from user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoContactsCategories) {\n        Card.$categories = Preferences.defaults.SOGoContactsCategories;\n      }\n    });\n\n    return Card; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of Card in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .factory('Card', Card.$factory);\n\n  /**\n   * @memberof Card\n   * @desc Fetch a card from a specific addressbook.\n   * @param {string} addressbookId - the addressbook ID\n   * @param {string} cardId - the card ID\n   * @see {@link AddressBook.$getCard}\n   */\n  Card.$find = function(addressbookId, cardId) {\n    var futureCardData = this.$$resource.fetch([addressbookId, cardId].join('/'), 'view');\n\n    if (cardId) return new Card(futureCardData); // a single card\n\n    return Card.$unwrapCollection(futureCardData); // a collection of cards\n  };\n\n  /**\n   * @function filterCategories\n   * @memberof Card.prototype\n   * @desc Search for categories matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Card.filterCategories = function(query) {\n    var re = new RegExp(query, 'i');\n    return _.filter(Card.$categories, function(category) {\n      return category.search(re) != -1;\n    });\n  };\n\n  /**\n   * @memberof Card\n   * @desc Unwrap to a collection of Card instances.\n   * @param {object} futureCardData\n   */\n  Card.$unwrapCollection = function(futureCardData) {\n    var collection = {};\n\n    collection.$futureCardData = futureCardData;\n\n    futureCardData.then(function(cards) {\n      Card.$timeout(function() {\n        angular.forEach(cards, function(data, index) {\n          collection[data.id] = new Card(data);\n        });\n      });\n    });\n\n    return collection;\n  };\n\n  /**\n   * @function init\n   * @memberof Card.prototype\n   * @desc Extend instance with required attributes and new data.\n   * @param {object} data - attributes of card\n   */\n  Card.prototype.init = function(data, partial) {\n    this.refs = [];\n    angular.extend(this, data);\n    if (!this.$$fullname)\n      this.$$fullname = this.$fullname();\n    if (!this.$$email)\n      this.$$email = this.$preferredEmail(partial);\n    if (!this.$$image)\n      this.$$image = this.image || Card.$gravatar(this.$preferredEmail(partial), 32);\n    this.selected = false;\n\n    // An empty attribute to trick md-autocomplete when adding attendees from the appointment editor\n    this.empty = ' ';\n  };\n\n  /**\n   * @function $id\n   * @memberof Card.prototype\n   * @desc Return the card ID.\n   * @returns the card ID\n   */\n  Card.prototype.$id = function() {\n    return this.$futureCardData.then(function(data) {\n      return data.id;\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Card.prototype\n   * @desc Save the card to the server.\n   */\n  Card.prototype.$save = function() {\n    var _this = this,\n        action = 'saveAsContact';\n\n    if (this.c_component == 'vlist') action = 'saveAsList';\n\n    return Card.$$resource.save([this.pid, this.id || '_new_'].join('/'),\n                                this.$omit(),\n                                { action: action })\n      .then(function(data) {\n        // Make a copy of the data for an eventual reset\n        _this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  Card.prototype.$delete = function(attribute, index) {\n    if (attribute) {\n      if (index > -1 && this[attribute].length > index) {\n        this[attribute].splice(index, 1);\n      }\n      else\n        delete this[attribute];\n    }\n    else {\n      // No arguments -- delete card\n      return Card.$$resource.remove([this.pid, this.id].join('/'));\n    }\n  };\n\n  Card.prototype.$fullname = function() {\n    var fn = this.c_cn || '', names;\n    if (fn.length === 0) {\n      names = [];\n      if (this.c_givenname && this.c_givenname.length > 0)\n        names.push(this.c_givenname);\n      if (this.nickname && this.nickname.length > 0)\n        names.push('<em>' + this.nickname + '</em>');\n      if (this.c_sn && this.c_sn.length > 0)\n        names.push(this.c_sn);\n      if (names.length > 0)\n        fn = names.join(' ');\n      else if (this.c_org && this.c_org.length > 0) {\n        fn = this.c_org;\n      }\n      else if (this.emails && this.emails.length > 0) {\n        fn = _.find(this.emails, function(i) { return i.value !== ''; }).value;\n      }\n      else if (this.c_cn && this.c_cn.length > 0) {\n        fn = this.c_cn;\n      }\n    }\n\n    return fn;\n  };\n\n  Card.prototype.$description = function() {\n    var description = [];\n    if (this.title) description.push(this.title);\n    if (this.role) description.push(this.role);\n    if (this.orgUnits && this.orgUnits.length > 0)\n      _.forEach(this.orgUnits, function(unit) {\n        if (unit.value !== '')\n          description.push(unit.value);\n      });\n    if (this.org) description.push(this.org);\n    if (this.description) description.push(this.description);\n\n    return description.join(', ');\n  };\n\n  /**\n   * @function $preferredEmail\n   * @memberof Card.prototype\n   * @desc Get the preferred email address.\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the first email address of type \"pref\" or the first address if none found\n   */\n  Card.prototype.$preferredEmail = function(partial) {\n    var email, re;\n    if (partial) {\n      re = new RegExp(partial, 'i');\n      email = _.find(this.emails, function(o) {\n        return re.test(o.value);\n      });\n    }\n    if (email) {\n      email = email.value;\n    }\n    else {\n      email = _.find(this.emails, function(o) {\n        return o.type == 'pref';\n      });\n      if (email) {\n        email = email.value;\n      }\n      else if (this.emails && this.emails.length) {\n        email = this.emails[0].value;\n      }\n      else {\n        email = '';\n      }\n    }\n\n    return email;\n  };\n\n  /**\n   * @function $shortFormat\n   * @memberof Card.prototype\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the fullname along with a matching email address in parentheses\n   */\n  Card.prototype.$shortFormat = function(partial) {\n    var fullname = this.$fullname(),\n        email = this.$preferredEmail(partial);\n    if (email && email != fullname)\n      fullname += ' <' + email + '>';\n    return fullname;\n  };\n\n  /**\n   * @function $birthday\n   * @memberof Card.prototype\n   * @returns the formatted birthday object\n   */\n  Card.prototype.$birthday = function() {\n    if (this.birthday) {\n      return [this.birthday.getFullYear(), this.birthday.getMonth() + 1, this.birthday.getDate()].join('/');\n    }\n    return '';\n  };\n\n  Card.prototype.$isCard = function() {\n    return this.c_component == 'vcard';\n  };\n\n  Card.prototype.$isList = function() {\n    return this.c_component == 'vlist';\n  };\n\n  Card.prototype.$addOrgUnit = function(orgUnit) {\n    if (angular.isUndefined(this.orgUnits)) {\n      this.orgUnits = [{value: orgUnit}];\n    }\n    else {\n      for (var i = 0; i < this.orgUnits.length; i++) {\n        if (this.orgUnits[i].value == orgUnit) {\n          break;\n        }\n      }\n      if (i == this.orgUnits.length)\n        this.orgUnits.push({value: orgUnit});\n    }\n    return this.orgUnits.length - 1;\n  };\n\n  Card.prototype.$addCategory = function(category) {\n    if (angular.isUndefined(this.categories)) {\n      this.categories = [{value: category}];\n    }\n    else {\n      for (var i = 0; i < this.categories.length; i++) {\n        if (this.categories[i].value == category) {\n          break;\n        }\n      }\n      if (i == this.categories.length)\n        this.categories.push({value: category});\n    }\n  };\n\n  Card.prototype.$addEmail = function(type) {\n    if (angular.isUndefined(this.emails)) {\n      this.emails = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.emails, function(i) { return i.value === ''; }))) {\n      this.emails.push({type: type, value: ''});\n    }\n    return this.emails.length - 1;\n  };\n\n  Card.prototype.$addPhone = function(type) {\n    if (angular.isUndefined(this.phones)) {\n      this.phones = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.phones, function(i) { return i.value === ''; }))) {\n      this.phones.push({type: type, value: ''});\n    }\n    return this.phones.length - 1;\n  };\n\n  Card.prototype.$addUrl = function(type, url) {\n    if (angular.isUndefined(this.urls)) {\n      this.urls = [{type: type, value: url}];\n    }\n    else if (_.isUndefined(_.find(this.urls, function(i) { return i.value == url; }))) {\n      this.urls.push({type: type, value: url});\n    }\n    return this.urls.length - 1;\n  };\n\n  Card.prototype.$addAddress = function(type, postoffice, street, street2, locality, region, country, postalcode) {\n    if (angular.isUndefined(this.addresses)) {\n      this.addresses = [{type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode}];\n    }\n    else if (!_.find(this.addresses, function(i) {\n      return i.street == street &&\n        i.street2 == street2 &&\n        i.locality == locality &&\n        i.country == country &&\n        i.postalcode == postalcode;\n    })) {\n      this.addresses.push({type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode});\n    }\n    return this.addresses.length - 1;\n  };\n\n  Card.prototype.$addMember = function(email) {\n    var card = new Card({email: email, emails: [{value: email}]}),\n        i;\n    if (angular.isUndefined(this.refs)) {\n      this.refs = [card];\n    }\n    else if (email.length === 0) {\n      this.refs.push(card);\n    }\n    else {\n      for (i = 0; i < this.refs.length; i++) {\n        if (this.refs[i].email == email) {\n          break;\n        }\n      }\n      if (i == this.refs.length)\n        this.refs.push(card);\n    }\n    return this.refs.length - 1;\n  };\n\n  /**\n   * @function $reset\n   * @memberof Card.prototype\n   * @desc Reset the original state the card's data.\n   */\n  Card.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    // Reinstanciate Card objects for list members\n    angular.forEach(this.refs, function(o, i) {\n      if (o.email) o.emails = [{value: o.email}];\n      _this.refs[i] = new Card(o);\n    });\n    this.$shadowData = this.$omit(true);\n  };\n\n  /**\n   * @function $updateMember\n   * @memberof Card.prototype\n   * @desc Update an existing list member from a Card instance.\n   * A list member has the following attribtues:\n   * - email\n   * - reference\n   * - fn\n   * @param {number} index\n   * @param {string} email\n   * @param {Card} card\n   */\n  // Card.prototype.$updateMember = function(index, email, card) {\n  //   var ref = {\n  //     email: email,\n  //     emails: [{value: email}],\n  //     reference: card.c_name,\n  //     c_cn: card.$fullname()\n  //   };\n  //   this.refs[index] = new Card(ref);\n  // };\n\n  /**\n   * @function $unwrap\n   * @memberof Card.prototype\n   * @desc Unwrap a promise and make a copy of the resolved data.\n   * @param {object} futureCardData - a promise of the Card's data\n   */\n  Card.prototype.$unwrap = function(futureCardData) {\n    var _this = this;\n\n    // Expose the promise\n    this.$futureCardData = futureCardData;\n\n    // Resolve the promise\n    this.$futureCardData.then(function(data) {\n      // Calling $timeout will force Angular to refresh the view\n      Card.$timeout(function() {\n        _this.init(data);\n        // Instanciate Card objects for list members\n        angular.forEach(_this.refs, function(o, i) {\n          if (o.email) o.emails = [{value: o.email}];\n          o.id = o.reference;\n          _this.refs[i] = new Card(o);\n        });\n        if (_this.birthday) {\n          _this.birthday = new Date(_this.birthday * 1000);\n        }\n        // Make a copy of the data for an eventual reset\n        _this.$shadowData = _this.$omit(true);\n      });\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof Card.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Card instance\n   */\n  Card.prototype.$omit = function(deep) {\n    var card = {};\n    angular.forEach(this, function(value, key) {\n      if (key == 'refs') {\n        card.refs = _.map(value, function(o) {\n          return o.$omit(deep);\n        });\n      }\n      else if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          card[key] = angular.copy(value);\n        else\n          card[key] = value;\n      }\n    });\n\n    // We convert back our birthday object\n    if (!deep) {\n      if (card.birthday)\n        card.birthday = card.birthday.getTime()/1000;\n      else\n        card.birthday = 0;\n    }\n\n    return card;\n  };\n\n  Card.prototype.toString = function() {\n    var desc = this.id + ' ' + this.$$fullname;\n\n    if (this.$$email)\n      desc += ' <' + this.$$email + '>';\n\n    return '[' + desc + ']';\n  };\n})();\n"]}