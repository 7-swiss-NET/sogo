{"version":3,"file":"Contacts.services.js","sources":["Contacts/AddressBook.service.js","Contacts/Card.service.js"],"names":["AddressBook","futureAddressBookData","then","this","init","name","id","newAddressBookData","$$resource","create","$unwrap","$acl","$$Acl","$factory","$q","$timeout","$log","Settings","Resource","Card","Acl","Preferences","angular","extend","activeUser","$Card","$Preferences","$query","search","value","sort","asc","selectedFolder","$refreshTimeout","ready","settings","Contact","SortingState","parseInt","module","e","factory","$filterAll","options","excludedCards","params","$cards","when","isUndefined","fetch","response","results","card","index","compareIds","data","_","filter","contacts","find","length","splice","each","debug","$add","addressbook","list","sibling","i","isSubscription","$subscriptions","$addressbooks","o","localeCompare","indexOf","pluck","$findAll","_this","$remotes","forEach","isRemote","push","union","$find","addressbookId","$subscribe","uid","path","userResource","addressbookData","prototype","$isLoading","cards","isOwned","isSuperUser","owner","login","$id","$futureAddressBookData","isSelectedCard","cardId","selectedCard","$selectedCount","count","selected","$startRefreshTimeout","cancel","refreshViewCheck","defaults","SOGoRefreshViewCheck","f","bind","$reload","timeInterval","$filter","dry","isDefined","oldIndex","removedCards","findIndex","$rename","$save","$delete","promise","d","defer","remove","resolve","reject","$deleteCards","uids","map","post","difference","$copyCards","folder","save","$omit","$getCard","fullCard","cachedCard","$futureCardData","isError","isObject","key","futureCardData","partial","pid","newCardData","newguid","isNew","$TEL_TYPES","$EMAIL_TYPES","$URL_TYPES","$ADDRESS_TYPES","Gravatar","$gravatar","SOGoContactsCategories","$categories","SOGoAlternateAvatar","$alternateAvatar","join","$unwrapCollection","filterCategories","query","re","RegExp","category","collection","refs","$$fullname","$fullname","$$email","$preferredEmail","$$image","image","no_404","empty","action","c_component","$shadowData","attribute","names","fn","c_cn","c_givenname","nickname","c_sn","c_org","emails","$description","description","title","role","orgUnits","unit","email","test","type","$shortFormat","fullname","$birthday","birthday","getFullYear","getMonth","getDate","$isCard","$isList","$addOrgUnit","orgUnit","$addCategory","categories","$addEmail","$addScreenName","screenName","c_screenname","$addPhone","phones","$addUrl","url","urls","$addAddress","postoffice","street","street2","locality","region","country","postalcode","addresses","$addMember","$reset","reference","Date","deep","copy","getTime","toString","desc"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name AddressBook\n   * @constructor\n   * @param {object} futureAddressBookData - either an object literal or a promise\n   */\n  function AddressBook(futureAddressBookData) {\n    // Data is immediately available\n    if (typeof futureAddressBookData.then !== 'function') {\n      this.init(futureAddressBookData);\n      if (this.name && !this.id) {\n        // Create a new addressbook on the server\n        var newAddressBookData = AddressBook.$$resource.create('createFolder', this.name);\n        this.$unwrap(newAddressBookData);\n      }\n      else if (this.id) {\n        this.$acl = new AddressBook.$$Acl('Contacts/' + this.id);\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureAddressBookData);\n    }\n  }\n\n  /**\n   * @memberof AddressBook\n   * @desc The factory we'll use to register with Angular\n   * @returns the AddressBook constructor\n   */\n  AddressBook.$factory = ['$q', '$timeout', '$log', 'sgSettings', 'Resource', 'Card', 'Acl', 'Preferences', function($q, $timeout, $log, Settings, Resource, Card, Acl, Preferences) {\n    angular.extend(AddressBook, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $Card: Card,\n      $$Acl: Acl,\n      $Preferences: Preferences,\n      $query: {search: 'name_or_address', value: '', sort: 'c_cn', asc: 1},\n      activeUser: Settings.activeUser(),\n      selectedFolder: null,\n      $refreshTimeout: null\n    });\n    // Initialize sort parameters from user's settings\n    Preferences.ready().then(function() {\n      if (Preferences.settings.Contact.SortingState) {\n        AddressBook.$query.sort = Preferences.settings.Contact.SortingState[0];\n        AddressBook.$query.asc = parseInt(Preferences.settings.Contact.SortingState[1]);\n      }\n    });\n    return AddressBook; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of AddressBook in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common', 'SOGo.PreferencesUI']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .factory('AddressBook', AddressBook.$factory);\n\n  /**\n   * @memberof AddressBook\n   * @desc Search for cards among all addressbooks matching some criterias.\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query (excludeGroups and excludeLists)\n   * @param {object[]} excludedCards - a list of Card objects that must be excluded from the results\n   * @returns a collection of Cards instances\n   */\n  AddressBook.$filterAll = function(search, options, excludedCards) {\n    var params = {search: search};\n\n    if (!search) {\n      // No query specified\n      AddressBook.$cards = [];\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    if (angular.isUndefined(AddressBook.$cards)) {\n      // First session query\n      AddressBook.$cards = [];\n    }\n    else if (AddressBook.$query.value == search) {\n      // Query hasn't changed\n      return AddressBook.$q.when(AddressBook.$cards);\n    }\n    AddressBook.$query.value = search;\n\n    angular.extend(params, options);\n\n    return AddressBook.$$resource.fetch(null, 'allContactSearch', params).then(function(response) {\n      var results, card, index,\n          compareIds = function(data) {\n            return this.id == data.id;\n          };\n      if (excludedCards) {\n        // Remove excluded cards from results\n        results = _.filter(response.contacts, function(data) {\n          return _.isUndefined(_.find(excludedCards, compareIds, data));\n        });\n      }\n      else {\n        results = response.contacts;\n      }\n      // Remove cards that no longer match the search query\n      for (index = AddressBook.$cards.length - 1; index >= 0; index--) {\n        card = AddressBook.$cards[index];\n        if (_.isUndefined(_.find(results, compareIds, card))) {\n          AddressBook.$cards.splice(index, 1);\n        }\n      }\n      // Add new cards matching the search query\n      _.each(results, function(data, index) {\n        if (_.isUndefined(_.find(AddressBook.$cards, compareIds, data))) {\n          var card = new AddressBook.$Card(data, search);\n          AddressBook.$cards.splice(index, 0, card);\n        }\n      });\n      AddressBook.$log.debug(AddressBook.$cards);\n      return AddressBook.$cards;\n    });\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Add a new addressbook to the static list of addressbooks\n   * @param {AddressBook} addressbook - an Addressbook object instance\n   */\n  AddressBook.$add = function(addressbook) {\n    // Insert new addressbook at proper index\n    var list, sibling, i;\n\n    list = addressbook.isSubscription? this.$subscriptions : this.$addressbooks;\n    sibling = _.find(list, function(o) {\n      return (addressbook.id == 'personal' ||\n              (o.id != 'personal' &&\n               o.name.localeCompare(addressbook.name) === 1));\n    });\n    i = sibling ? _.indexOf(_.pluck(list, 'id'), sibling.id) : 1;\n    list.splice(i, 0, addressbook);\n  };\n\n  /**\n   * @memberof AddressBook\n   * @desc Set or get the list of addressbooks. Will instantiate a new AddressBook object for each item.\n   * @param {array} [data] - the metadata of the addressbooks\n   * @returns the list of addressbooks\n   */\n  AddressBook.$findAll = function(data) {\n    var _this = this;\n    if (data) {\n      this.$addressbooks = [];\n      this.$subscriptions = [];\n      this.$remotes = [];\n      // Instanciate AddressBook objects\n      angular.forEach(data, function(o, i) {\n        var addressbook = new AddressBook(o);\n        if (addressbook.isRemote)\n          _this.$remotes.push(addressbook);\n        else if (addressbook.isSubscription)\n          _this.$subscriptions.push(addressbook);\n        else\n          _this.$addressbooks.push(addressbook);\n      });\n    }\n    return _.union(this.$addressbooks, this.$subscriptions, this.$remotes);\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Fetch list of cards and return an AddressBook instance.\n   * @param {string} addressbookId - the addressbook identifier\n   * @returns an AddressBook object instance\n   */\n  AddressBook.$find = function(addressbookId) {\n    var futureAddressBookData = AddressBook.$Preferences.ready().then(function() {\n      return AddressBook.$$resource.fetch(addressbookId, 'view', AddressBook.$query);\n    });\n    return new AddressBook(futureAddressBookData);\n  };\n\n  /**\n   * @memberOf AddressBook\n   * @desc Subscribe to another user's addressbook and add it to the list of addressbooks.\n   * @param {string} uid - user id\n   * @param {string} path - path of folder for specified user\n   * @returns a promise of the HTTP query result\n   */\n  AddressBook.$subscribe = function(uid, path) {\n    var _this = this;\n    return AddressBook.$$resource.userResource(uid).fetch(path, 'subscribe').then(function(addressbookData) {\n      var addressbook = new AddressBook(addressbookData);\n      if (_.isUndefined(_.find(_this.$subscriptions, function(o) {\n        return o.id == addressbookData.id;\n      }))) {\n        // Not already subscribed\n        AddressBook.$add(addressbook);\n      }\n      return addressbook;\n    });\n  };\n\n  /**\n   * @function init\n   * @memberof AddressBook.prototype\n   * @desc Extend instance with new data and compute additional attributes.\n   * @param {object} data - attributes of addressbook\n   */\n  AddressBook.prototype.init = function(data, options) {\n    if (!this.$cards) {\n      this.$isLoading = true;\n      this.$cards = [];\n      this.cards = [];\n    }\n    angular.extend(this, data);\n    // Add 'isOwned' and 'isSubscription' attributes based on active user (TODO: add it server-side?)\n    this.isOwned = AddressBook.activeUser.isSuperUser || this.owner == AddressBook.activeUser.login;\n    this.isSubscription = !this.isRemote && this.owner != AddressBook.activeUser.login;\n  };\n\n  /**\n   * @function $id\n   * @memberof AddressBook.prototype\n   * @desc Resolve the addressbook id.\n   * @returns a promise of the addressbook id\n   */\n  AddressBook.prototype.$id = function() {\n    if (this.id) {\n      // Object already unwrapped\n      return AddressBook.$q.when(this.id);\n    }\n    else {\n      // Wait until object is unwrapped\n      return this.$futureAddressBookData.then(function(addressbook) {\n        return addressbook.id;\n      });\n    }\n  };\n\n  /**\n   * @function isSelectedCard\n   * @memberof AddressBook.prototype\n   * @desc Check if the specified card is selected.\n   * @param {string} CardId\n   * @returns true if the specified card is selected\n   */\n  AddressBook.prototype.isSelectedCard = function(cardId) {\n    return this.selectedCard == cardId;\n  };\n\n  /**\n   * @function $selectedCount\n   * @memberof AddressBook.prototype\n   * @desc Return the number of cards selected by the user.\n   * @returns the number of selected cards\n   */\n  AddressBook.prototype.$selectedCount = function() {\n    var count;\n\n    count = 0;\n    if (this.cards) {\n      count = (_.filter(this.cards, function(card) { return card.selected; })).length;\n    }\n    return count;\n  };\n\n  /**\n   * @function $startRefreshTimeout\n   * @memberof AddressBook.prototype\n   * @desc Starts the refresh timeout for the current selected address book\n   */\n  AddressBook.prototype.$startRefreshTimeout = function() {\n    var _this = this;\n\n    if (AddressBook.$refreshTimeout)\n      AddressBook.$timeout.cancel(AddressBook.$refreshTimeout);\n\n    AddressBook.$Preferences.ready().then(function() {\n      // Restart the refresh timer, if needed\n      var refreshViewCheck = AddressBook.$Preferences.defaults.SOGoRefreshViewCheck;\n      if (refreshViewCheck && refreshViewCheck != 'manually') {\n        var f = angular.bind(_this, AddressBook.prototype.$reload);\n        AddressBook.$refreshTimeout = AddressBook.$timeout(f, refreshViewCheck.timeInterval()*1000);\n      }\n    });\n  };\n\n  /**\n   * @function $reload\n   * @memberof AddressBook.prototype\n   * @desc Reload list of cards\n   * @returns a promise of the Cards instances\n   */\n  AddressBook.prototype.$reload = function() {\n    var _this = this;\n\n    this.$startRefreshTimeout();\n    return this.$filter();\n  };\n\n    /**\n   * @function $filter\n   * @memberof AddressBook.prototype\n   * @desc Search for cards matching some criterias\n   * @param {string} search - the search string to match\n   * @param {object} [options] - additional options to the query\n   * @returns a collection of Cards instances\n   */\n  AddressBook.prototype.$filter = function(search, options, excludedCards) {\n    var _this = this;\n\n    if (!options || !options.dry)\n      this.$isLoading = true;\n\n    return AddressBook.$Preferences.ready().then(function() {\n      if (options) {\n        angular.extend(AddressBook.$query, options);\n\n        if (options.dry) {\n          if (!search) {\n            // No query specified\n            _this.$cards = [];\n            return AddressBook.$q.when(_this.$cards);\n          }\n          else if (AddressBook.$query.value == search) {\n            // Query hasn't changed\n            return AddressBook.$q.when(_this.$cards);\n          }\n        }\n      }\n\n      if (angular.isDefined(search))\n        AddressBook.$query.value = search;\n\n      return _this.$id().then(function(addressbookId) {\n        return AddressBook.$$resource.fetch(addressbookId, 'view', AddressBook.$query);\n      }).then(function(response) {\n        var results, cards, card, index,\n            compareIds = function(data) {\n              return _this.id == data.id;\n            };\n        if (options && options.dry) {\n          // Don't keep a copy of the resulting cards.\n          // This is usefull when doing autocompletion.\n          cards = _this.$cards;\n        }\n        else {\n          cards = _this.cards;\n        }\n        if (excludedCards) {\n          // Remove excluded cards from results\n          results = _.filter(response.cards, function(card) {\n            return _.isUndefined(_.find(excludedCards, compareIds, card));\n          });\n        }\n        else {\n          results = response.cards;\n        }\n        // Remove cards that no longer match the search query\n        for (index = cards.length - 1; index >= 0; index--) {\n          card = cards[index];\n          if (_.isUndefined(_.find(results, compareIds, card))) {\n            cards.splice(index, 1);\n          }\n        }\n        // Add new cards matching the search query\n        _.each(results, function(data, index) {\n          if (_.isUndefined(_.find(cards, compareIds, data))) {\n            var card = new AddressBook.$Card(data, search);\n            cards.splice(index, 0, card);\n          }\n        });\n        // Respect the order of the results\n        _.each(results, function(data, index) {\n          var oldIndex, removedCards;\n          if (cards[index].id != data.id) {\n            oldIndex = _.findIndex(cards, compareIds, data);\n            removedCards = cards.splice(oldIndex, 1);\n            cards.splice(index, 0, removedCards[0]);\n          }\n        });\n        _this.$isLoading = false;\n        return cards;\n      });\n    });\n  };\n\n  /**\n   * @function $rename\n   * @memberof AddressBook.prototype\n   * @desc Rename the addressbook and keep the list sorted\n   * @param {string} name - the new name\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$rename = function(name) {\n    var i = _.indexOf(_.pluck(AddressBook.$addressbooks, 'id'), this.id);\n    this.name = name;\n    AddressBook.$addressbooks.splice(i, 1);\n    AddressBook.$add(this);\n    return this.$save();\n  };\n\n  /**\n   * @function $delete\n   * @memberof AddressBook.prototype\n   * @desc Delete the addressbook from the server and the static list of addressbooks.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$delete = function() {\n    var _this = this,\n        d = AddressBook.$q.defer(),\n        list,\n        promise;\n\n    if (this.isSubscription) {\n      promise = AddressBook.$$resource.fetch(this.id, 'unsubscribe');\n      list = AddressBook.$subscriptions;\n    }\n    else {\n      promise = AddressBook.$$resource.remove(this.id);\n      list = AddressBook.$addressbooks;\n    }\n\n    promise.then(function() {\n      var i = _.indexOf(_.pluck(list, 'id'), _this.id);\n      list.splice(i, 1);\n      d.resolve();\n    }, d.reject);\n    return d.promise;\n  };\n\n  /**\n   * @function $deleteCards\n   * @memberof AddressBook.prototype\n   * @desc Delete multiple cards from addressbook.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$deleteCards = function(cards) {\n\n    var uids = _.map(cards, function(card) { return card.id; });\n    var _this = this;\n    \n    return AddressBook.$$resource.post(this.id, 'batchDelete', {uids: uids}).then(function() {\n      _this.cards = _.difference(_this.cards, cards);\n    });\n  };\n\n  /**\n   * @function $copyCards\n   * @memberof AddressBook.prototype\n   * @desc Copy multiple cards from addressbook to an other one.\n   * @return a promise of the HTTP operation\n   */\n  AddressBook.prototype.$copyCards = function(cards, folder) {\n    var uids = _.map(cards, function(card) { return card.id; });\n    return AddressBook.$$resource.post(this.id, 'copy', {uids: uids, folder: folder});\n  };\n\n  /**\n   * @function $save\n   * @memberof AddressBook.prototype\n   * @desc Save the addressbook to the server. This currently can only affect the name of the addressbook.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$save = function() {\n    return AddressBook.$$resource.save(this.id, this.$omit()).then(function(data) {\n      return data;\n    });\n  };\n\n  /**\n   * @function $getCard\n   * @memberof AddressBook.prototype\n   * @desc Fetch the card attributes from the server.\n   * @returns a promise of the HTTP operation\n   */\n  AddressBook.prototype.$getCard = function(cardId) {\n    var _this = this;\n\n    return this.$id().then(function(addressbookId) {\n      var fullCard,\n          cachedCard = _.find(_this.cards, function(data) {\n            return cardId == data.id;\n          });\n\n      if (cachedCard && cachedCard.$futureCardData)\n        // Full card is available\n        return cachedCard;\n\n      fullCard = AddressBook.$Card.$find(addressbookId, cardId);\n      fullCard.$id().then(function(cardId) {\n        // Extend the Card object of the addressbook list with the full card description\n        if (cachedCard)\n          angular.extend(cachedCard, fullCard);\n      });\n      return fullCard;\n    });\n  };\n\n  /**\n   * @function $unwrap\n   * @memberof AddressBook.prototype\n   * @desc Unwrap a promise and instanciate new Card objects using received data.\n   * @param {promise} futureAddressBookData - a promise of the AddressBook's data\n   */\n  AddressBook.prototype.$unwrap = function(futureAddressBookData) {\n    var _this = this;\n\n    // Expose and resolve the promise\n    this.$futureAddressBookData = futureAddressBookData.then(function(data) {\n      return AddressBook.$timeout(function() {\n        // Extend AddressBook instance from data of addressbooks list.\n        // Will inherit attributes such as isEditable and isRemote.\n        angular.forEach(AddressBook.$findAll(), function(o, i) {\n          if (o.id == data.id) {\n            angular.extend(_this, o);\n          }\n        });\n        // Extend AddressBook instance with received data\n        _this.init(data);\n        // Instanciate Card objects\n        angular.forEach(_this.cards, function(o, i) {\n          _this.cards[i] = new AddressBook.$Card(o);\n        });\n        // Instanciate Acl object\n        _this.$acl = new AddressBook.$$Acl('Contacts/' + _this.id);\n\n        _this.$startRefreshTimeout();\n\n        _this.$isLoading = false;\n\n        return _this;\n      });\n    }, function(data) {\n      _this.isError = true;\n      if (angular.isObject(data)) {\n        AddressBook.$timeout(function() {\n          angular.extend(_this, data);\n        });\n      }\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof AddressBook.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @return an object literal copy of the Addressbook instance\n   */\n  AddressBook.prototype.$omit = function() {\n    var addressbook = {};\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' &&\n          key != 'cards' &&\n          key[0] != '$') {\n        addressbook[key] = value;\n      }\n    });\n    return addressbook;\n  };\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Card\n   * @constructor\n   * @param {object} futureCardData\n   * @param {string} [partial]\n   */\n  function Card(futureCardData, partial) {\n\n    // Data is immediately available\n    if (typeof futureCardData.then !== 'function') {\n      this.init(futureCardData, partial);\n      if (this.pid && !this.id) {\n        // Prepare for the creation of a new card;\n        // Get UID from the server.\n        var newCardData = Card.$$resource.newguid(this.pid);\n        this.$unwrap(newCardData);\n        this.isNew = true;\n      }\n    }\n    else {\n      // The promise will be unwrapped first\n      this.$unwrap(futureCardData);\n    }\n  }\n\n  Card.$TEL_TYPES = ['work', 'home', 'cell', 'fax', 'pager'];\n  Card.$EMAIL_TYPES = ['work', 'home', 'pref'];\n  Card.$URL_TYPES = ['work', 'home', 'pref'];\n  Card.$ADDRESS_TYPES = ['work', 'home'];\n\n  /**\n   * @memberof Card\n   * @desc The factory we'll use to register with Angular.\n   * @returns the Card constructor\n   */\n  Card.$factory = ['$timeout', 'sgSettings', 'Resource', 'Preferences', 'Gravatar', function($timeout, Settings, Resource, Preferences, Gravatar) {\n    angular.extend(Card, {\n      $$resource: new Resource(Settings.activeUser('folderURL') + 'Contacts', Settings.activeUser()),\n      $timeout: $timeout,\n      $gravatar: Gravatar\n    });\n    // Initialize categories from user's defaults\n    Preferences.ready().then(function() {\n      if (Preferences.defaults.SOGoContactsCategories) {\n        Card.$categories = Preferences.defaults.SOGoContactsCategories;\n      }\n      if (Preferences.defaults.SOGoAlternateAvatar)\n        Card.$alternateAvatar = Preferences.defaults.SOGoAlternateAvatar;\n    });\n\n    return Card; // return constructor\n  }];\n\n  /**\n   * @module SOGo.ContactsUI\n   * @desc Factory registration of Card in Angular module.\n   */\n  try {\n    angular.module('SOGo.ContactsUI');\n  }\n  catch(e) {\n    angular.module('SOGo.ContactsUI', ['SOGo.Common', 'SOGo.PreferencesUI']);\n  }\n  angular.module('SOGo.ContactsUI')\n    .factory('Card', Card.$factory);\n\n  /**\n   * @memberof Card\n   * @desc Fetch a card from a specific addressbook.\n   * @param {string} addressbookId - the addressbook ID\n   * @param {string} cardId - the card ID\n   * @see {@link AddressBook.$getCard}\n   */\n  Card.$find = function(addressbookId, cardId) {\n    var futureCardData = this.$$resource.fetch([addressbookId, cardId].join('/'), 'view');\n\n    if (cardId) return new Card(futureCardData); // a single card\n\n    return Card.$unwrapCollection(futureCardData); // a collection of cards\n  };\n\n  /**\n   * @function filterCategories\n   * @memberof Card.prototype\n   * @desc Search for categories matching some criterias\n   * @param {string} search - the search string to match\n   * @returns a collection of strings\n   */\n  Card.filterCategories = function(query) {\n    var re = new RegExp(query, 'i');\n    return _.filter(Card.$categories, function(category) {\n      return category.search(re) != -1;\n    });\n  };\n\n  /**\n   * @memberof Card\n   * @desc Unwrap to a collection of Card instances.\n   * @param {object} futureCardData\n   */\n  Card.$unwrapCollection = function(futureCardData) {\n    var collection = {};\n\n    collection.$futureCardData = futureCardData;\n\n    futureCardData.then(function(cards) {\n      Card.$timeout(function() {\n        angular.forEach(cards, function(data, index) {\n          collection[data.id] = new Card(data);\n        });\n      });\n    });\n\n    return collection;\n  };\n\n  /**\n   * @function init\n   * @memberof Card.prototype\n   * @desc Extend instance with required attributes and new data.\n   * @param {object} data - attributes of card\n   */\n  Card.prototype.init = function(data, partial) {\n    this.refs = [];\n    angular.extend(this, data);\n    if (!this.$$fullname)\n      this.$$fullname = this.$fullname();\n    if (!this.$$email)\n      this.$$email = this.$preferredEmail(partial);\n    if (!this.$$image)\n      this.$$image = this.image || Card.$gravatar(this.$preferredEmail(partial), 32, Card.$alternateAvatar, {no_404: true});\n    this.selected = false;\n\n    // An empty attribute to trick md-autocomplete when adding attendees from the appointment editor\n    this.empty = ' ';\n  };\n\n  /**\n   * @function $id\n   * @memberof Card.prototype\n   * @desc Return the card ID.\n   * @returns the card ID\n   */\n  Card.prototype.$id = function() {\n    return this.$futureCardData.then(function(data) {\n      return data.id;\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Card.prototype\n   * @desc Save the card to the server.\n   */\n  Card.prototype.$save = function() {\n    var _this = this,\n        action = 'saveAsContact';\n\n    if (this.c_component == 'vlist') action = 'saveAsList';\n\n    return Card.$$resource.save([this.pid, this.id || '_new_'].join('/'),\n                                this.$omit(),\n                                { action: action })\n      .then(function(data) {\n        // Make a copy of the data for an eventual reset\n        _this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  Card.prototype.$delete = function(attribute, index) {\n    if (attribute) {\n      if (index > -1 && this[attribute].length > index) {\n        this[attribute].splice(index, 1);\n      }\n      else\n        delete this[attribute];\n    }\n    else {\n      // No arguments -- delete card\n      return Card.$$resource.remove([this.pid, this.id].join('/'));\n    }\n  };\n\n  Card.prototype.$fullname = function() {\n    var fn = this.c_cn || '', names;\n    if (fn.length === 0) {\n      names = [];\n      if (this.c_givenname && this.c_givenname.length > 0)\n        names.push(this.c_givenname);\n      if (this.nickname && this.nickname.length > 0)\n        names.push('<em>' + this.nickname + '</em>');\n      if (this.c_sn && this.c_sn.length > 0)\n        names.push(this.c_sn);\n      if (names.length > 0)\n        fn = names.join(' ');\n      else if (this.c_org && this.c_org.length > 0) {\n        fn = this.c_org;\n      }\n      else if (this.emails && this.emails.length > 0) {\n        fn = _.find(this.emails, function(i) { return i.value !== ''; }).value;\n      }\n      else if (this.c_cn && this.c_cn.length > 0) {\n        fn = this.c_cn;\n      }\n    }\n\n    return fn;\n  };\n\n  Card.prototype.$description = function() {\n    var description = [];\n    if (this.title) description.push(this.title);\n    if (this.role) description.push(this.role);\n    if (this.orgUnits && this.orgUnits.length > 0)\n      _.forEach(this.orgUnits, function(unit) {\n        if (unit.value !== '')\n          description.push(unit.value);\n      });\n    if (this.c_org) description.push(this.c_org);\n    if (this.description) description.push(this.description);\n\n    return description.join(', ');\n  };\n\n  /**\n   * @function $preferredEmail\n   * @memberof Card.prototype\n   * @desc Get the preferred email address.\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the first email address of type \"pref\" or the first address if none found\n   */\n  Card.prototype.$preferredEmail = function(partial) {\n    var email, re;\n    if (partial) {\n      re = new RegExp(partial, 'i');\n      email = _.find(this.emails, function(o) {\n        return re.test(o.value);\n      });\n    }\n    if (email) {\n      email = email.value;\n    }\n    else {\n      email = _.find(this.emails, function(o) {\n        return o.type == 'pref';\n      });\n      if (email) {\n        email = email.value;\n      }\n      else if (this.emails && this.emails.length) {\n        email = this.emails[0].value;\n      }\n      else {\n        email = '';\n      }\n    }\n\n    return email;\n  };\n\n  /**\n   * @function $shortFormat\n   * @memberof Card.prototype\n   * @param {string} [partial] - a partial string that the email must match\n   * @returns the fullname along with a matching email address in parentheses\n   */\n  Card.prototype.$shortFormat = function(partial) {\n    var fullname = [this.$$fullname],\n        email = this.$preferredEmail(partial);\n    if (email && email != this.$$fullname)\n      fullname.push(' <' + email + '>');\n    return fullname.join(' ');\n  };\n\n  /**\n   * @function $birthday\n   * @memberof Card.prototype\n   * @returns the formatted birthday object\n   */\n  Card.prototype.$birthday = function() {\n    if (this.birthday) {\n      return [this.birthday.getFullYear(), this.birthday.getMonth() + 1, this.birthday.getDate()].join('/');\n    }\n    return '';\n  };\n\n  Card.prototype.$isCard = function() {\n    return this.c_component == 'vcard';\n  };\n\n  Card.prototype.$isList = function() {\n    return this.c_component == 'vlist';\n  };\n\n  Card.prototype.$addOrgUnit = function(orgUnit) {\n    if (angular.isUndefined(this.orgUnits)) {\n      this.orgUnits = [{value: orgUnit}];\n    }\n    else {\n      for (var i = 0; i < this.orgUnits.length; i++) {\n        if (this.orgUnits[i].value == orgUnit) {\n          break;\n        }\n      }\n      if (i == this.orgUnits.length)\n        this.orgUnits.push({value: orgUnit});\n    }\n    return this.orgUnits.length - 1;\n  };\n\n  Card.prototype.$addCategory = function(category) {\n    if (angular.isUndefined(this.categories)) {\n      this.categories = [{value: category}];\n    }\n    else {\n      for (var i = 0; i < this.categories.length; i++) {\n        if (this.categories[i].value == category) {\n          break;\n        }\n      }\n      if (i == this.categories.length)\n        this.categories.push({value: category});\n    }\n  };\n\n  Card.prototype.$addEmail = function(type) {\n    if (angular.isUndefined(this.emails)) {\n      this.emails = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.emails, function(i) { return i.value === ''; }))) {\n      this.emails.push({type: type, value: ''});\n    }\n    return this.emails.length - 1;\n  };\n\n  Card.prototype.$addScreenName = function(screenName) {\n    this.c_screenname = screenName;\n  };\n\n  Card.prototype.$addPhone = function(type) {\n    if (angular.isUndefined(this.phones)) {\n      this.phones = [{type: type, value: ''}];\n    }\n    else if (_.isUndefined(_.find(this.phones, function(i) { return i.value === ''; }))) {\n      this.phones.push({type: type, value: ''});\n    }\n    return this.phones.length - 1;\n  };\n\n  Card.prototype.$addUrl = function(type, url) {\n    if (angular.isUndefined(this.urls)) {\n      this.urls = [{type: type, value: url}];\n    }\n    else if (_.isUndefined(_.find(this.urls, function(i) { return i.value == url; }))) {\n      this.urls.push({type: type, value: url});\n    }\n    return this.urls.length - 1;\n  };\n\n  Card.prototype.$addAddress = function(type, postoffice, street, street2, locality, region, country, postalcode) {\n    if (angular.isUndefined(this.addresses)) {\n      this.addresses = [{type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode}];\n    }\n    else if (!_.find(this.addresses, function(i) {\n      return i.street == street &&\n        i.street2 == street2 &&\n        i.locality == locality &&\n        i.country == country &&\n        i.postalcode == postalcode;\n    })) {\n      this.addresses.push({type: type, postoffice: postoffice, street: street, street2: street2, locality: locality, region: region, country: country, postalcode: postalcode});\n    }\n    return this.addresses.length - 1;\n  };\n\n  Card.prototype.$addMember = function(email) {\n    var card = new Card({email: email, emails: [{value: email}]}),\n        i;\n    if (angular.isUndefined(this.refs)) {\n      this.refs = [card];\n    }\n    else if (email.length === 0) {\n      this.refs.push(card);\n    }\n    else {\n      for (i = 0; i < this.refs.length; i++) {\n        if (this.refs[i].email == email) {\n          break;\n        }\n      }\n      if (i == this.refs.length)\n        this.refs.push(card);\n    }\n    return this.refs.length - 1;\n  };\n\n  /**\n   * @function $reset\n   * @memberof Card.prototype\n   * @desc Reset the original state the card's data.\n   */\n  Card.prototype.$reset = function() {\n    var _this = this;\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        delete _this[key];\n      }\n    });\n    angular.extend(this, this.$shadowData);\n    // Reinstanciate Card objects for list members\n    angular.forEach(this.refs, function(o, i) {\n      if (o.email) o.emails = [{value: o.email}];\n      _this.refs[i] = new Card(o);\n    });\n    this.$shadowData = this.$omit(true);\n  };\n\n  /**\n   * @function $updateMember\n   * @memberof Card.prototype\n   * @desc Update an existing list member from a Card instance.\n   * A list member has the following attribtues:\n   * - email\n   * - reference\n   * - fn\n   * @param {number} index\n   * @param {string} email\n   * @param {Card} card\n   */\n  // Card.prototype.$updateMember = function(index, email, card) {\n  //   var ref = {\n  //     email: email,\n  //     emails: [{value: email}],\n  //     reference: card.c_name,\n  //     c_cn: card.$fullname()\n  //   };\n  //   this.refs[index] = new Card(ref);\n  // };\n\n  /**\n   * @function $unwrap\n   * @memberof Card.prototype\n   * @desc Unwrap a promise and make a copy of the resolved data.\n   * @param {object} futureCardData - a promise of the Card's data\n   */\n  Card.prototype.$unwrap = function(futureCardData) {\n    var _this = this;\n\n    // Expose the promise\n    this.$futureCardData = futureCardData.then(function(data) {\n      _this.init(data);\n      // Instanciate Card objects for list members\n      angular.forEach(_this.refs, function(o, i) {\n        if (o.email) o.emails = [{value: o.email}];\n        o.id = o.reference;\n        _this.refs[i] = new Card(o);\n      });\n      if (_this.birthday) {\n        _this.birthday = new Date(_this.birthday * 1000);\n      }\n      // Make a copy of the data for an eventual reset\n      _this.$shadowData = _this.$omit(true);\n      return _this;\n    });\n  };\n\n  /**\n   * @function $omit\n   * @memberof Card.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Card instance\n   */\n  Card.prototype.$omit = function(deep) {\n    var card = {};\n    angular.forEach(this, function(value, key) {\n      if (key == 'refs') {\n        card.refs = _.map(value, function(o) {\n          return o.$omit(deep);\n        });\n      }\n      else if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          card[key] = angular.copy(value);\n        else\n          card[key] = value;\n      }\n    });\n\n    // We convert back our birthday object\n    if (!deep) {\n      if (card.birthday)\n        card.birthday = card.birthday.getTime()/1000;\n      else\n        card.birthday = 0;\n    }\n\n    return card;\n  };\n\n  Card.prototype.toString = function() {\n    var desc = this.id + ' ' + this.$$fullname;\n\n    if (this.$$email)\n      desc += ' <' + this.$$email + '>';\n\n    return '[' + desc + ']';\n  };\n})();\n"]}