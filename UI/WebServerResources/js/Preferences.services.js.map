{"version":3,"sources":["Preferences/Preferences.service.js"],"names":["Preferences","_this","this","defaults","settings","defaultsPromise","$$resource","fetch","then","response","data","labels","_","fromPairs","map","SOGoMailLabelsColors","value","key","charAt","SOGoMailAutoSave","parseInt","SOGoMailComposeFontSizeEnabled","SOGoMailComposeFontSize","window","CKEDITOR","config","fontSize_defaultLabel","addCss","Vacation","startDate","Date","startDateEnabled","beginOfDay","addDays","endDate","endDateEnabled","getTime","autoReplyEmailAddresses","length","join","angular","isUndefined","isDefined","defaultEmailAddresses","daysBetweenResponse","Forward","forwardAddress","SOGoCalendarCategoriesColors","SOGoCalendarCategories","SOGoContactsCategories","extend","$mdDateLocaleProvider","locale","firstDayOfWeek","SOGoFirstDayOfWeek","firstWeekOfYear","SOGoFirstWeekOfYear","weekNumberFormatter","weekNumber","l","msgCalendar","msgOpenCalendar","parseDate","dateString","SOGoShortDateFormat","NaN","formatDate","date","format","$dateFormat","parseTime","timeString","SOGoTimeFormat","formatTime","settingsPromise","Calendar","PreventInvitationsWhitelist","match","exec","user","$User","uid","cn","c_email","$$image","avatar","no_404","url","$factory","$q","$timeout","$log","Settings","Gravatar","Resource","User","$gravatar","activeUser","$resourcesURL","resourcesURL","module","e","factory","prototype","ready","all","email","size","options","alternate_avatar","SOGoAlternateAvatar","SOGoGravatarEnabled","dstObject","dstAttr","$save","save","$omit","deep","preferences","whitelist","forEach","copy","toLowerCase","replace","substring","filter","split","v","$shortFormat"],"mappings":"CAEA,WACE,YAMA,SAASA,KACP,GAAIC,GAAQC,IAEZA,MAAKC,YACLD,KAAKE,YAELF,KAAKG,gBAAkBL,EAAYM,WAAWC,MAAM,gBAAgBC,KAAK,SAASC,GAChF,GAAIC,GAAOD,MAGPE,EAASC,EAAEC,UAAUD,EAAEE,IAAIJ,EAAKK,qBAAsB,SAASC,EAAOC,GACxE,MAAqB,KAAjBA,EAAIC,OAAO,IACL,IAAMD,EAAKD,IACbC,EAAKD,KAmGf,OAhGAN,GAAKK,qBAAuBJ,EAG5BD,EAAKS,iBAAmBC,SAASV,EAAKS,mBAAqB,EAG3DT,EAAKW,+BAAiCD,SAASV,EAAKY,yBAA2B,EAE3EC,OAAOC,UAAYd,EAAKW,iCAE1BE,OAAOC,SAASC,OAAOC,sBAAwBhB,EAAKY,wBACpDC,OAAOC,SAASG,OAAO,8BAAgCjB,EAAKY,wBAA0B,UAMpFZ,EAAKkB,UACHlB,EAAKkB,SAASC,UAChBnB,EAAKkB,SAASC,UAAY,GAAIC,MAAyC,IAApCV,SAASV,EAAKkB,SAASC,aAE1DnB,EAAKkB,SAASG,iBAAmB,EACjCrB,EAAKkB,SAASC,UAAY,GAAIC,MAC9BpB,EAAKkB,SAASC,UAAYnB,EAAKkB,SAASC,UAAUG,aAClDtB,EAAKkB,SAASC,UAAUI,QAAQ,IAE9BvB,EAAKkB,SAASM,QAChBxB,EAAKkB,SAASM,QAAU,GAAIJ,MAAuC,IAAlCV,SAASV,EAAKkB,SAASM,WAExDxB,EAAKkB,SAASO,eAAiB,EAC/BzB,EAAKkB,SAASM,QAAU,GAAIJ,MAAKpB,EAAKkB,SAASC,UAAUO,WACzD1B,EAAKkB,SAASM,QAAQD,QAAQ,IAE5BvB,EAAKkB,SAASS,yBAA2B3B,EAAKkB,SAASS,wBAAwBC,OACjF5B,EAAKkB,SAASS,wBAA0B3B,EAAKkB,SAASS,wBAAwBE,KAAK,WAE5E7B,GAAKkB,SAASS,yBAEvB3B,EAAKkB,YAEHY,QAAQC,YAAY/B,EAAKkB,SAASS,0BAClCG,QAAQE,UAAUnB,OAAOoB,yBAC3BjC,EAAKkB,SAASS,wBAA0Bd,OAAOoB,uBAE7CH,QAAQC,YAAY/B,EAAKkB,SAASgB,uBACpClC,EAAKkB,SAASgB,oBAAsB,GAElCJ,QAAQC,YAAY/B,EAAKkB,SAASC,aACpCnB,EAAKkB,SAASG,iBAAmB,EACjCrB,EAAKkB,SAASC,UAAY,GAAIC,OAG5BU,QAAQC,YAAY/B,EAAKkB,SAASM,WACpCxB,EAAKkB,SAASO,eAAiB,EAC/BzB,EAAKkB,SAASM,QAAU,GAAIJ,OAG1BpB,EAAKmC,SAAWnC,EAAKmC,QAAQC,iBAC/BpC,EAAKmC,QAAQC,eAAiBpC,EAAKmC,QAAQC,eAAeP,KAAK,MAE7DC,QAAQC,YAAY/B,EAAKqC,gCAC3BrC,EAAKqC,gCACLrC,EAAKsC,2BAGHR,QAAQC,YAAY/B,EAAKuC,0BAC3BvC,EAAKuC,2BAEPT,QAAQU,OAAOjD,EAAME,SAAUO,GAG/BT,EAAMkD,sBAAwBnD,EAAYmD,sBAC1CX,QAAQU,OAAOjD,EAAMkD,sBAAuBzC,EAAK0C,QACjDZ,QAAQU,OAAOjD,EAAMkD,uBACnBE,eAAgB3C,EAAK4C,mBACrBC,gBAAiB7C,EAAK8C,sBAExBvD,EAAMkD,sBAAsBE,eAAiBjC,SAASV,EAAK4C,oBAC3DrD,EAAMkD,sBAAsBM,oBAAsB,SAASC,GACzD,MAAOC,GAAE,UAAWD,IAEtBzD,EAAMkD,sBAAsBS,YAAcD,EAAE,YAC5C1D,EAAMkD,sBAAsBU,gBAAkBF,EAAE,iBAChD1D,EAAMkD,sBAAsBW,UAAY,SAASC,GAC/C,MAAOA,GAAYA,EAAWD,UAAU7D,EAAMkD,sBAAuBzC,EAAKsD,qBAAuB,GAAIlC,MAAKmC,MAE5GhE,EAAMkD,sBAAsBe,WAAa,SAASC,GAChD,MAAOA,GAAMA,EAAKC,OAAOnE,EAAMkD,sBAAuBgB,EAAKE,aAAe3D,EAAKsD,qBAAuB,IAExG/D,EAAMkD,sBAAsBmB,UAAY,SAASC,GAC/C,MAAOA,GAAYA,EAAWT,UAAU7D,EAAMkD,sBAAuBzC,EAAK8D,gBAAkB,GAAI1C,MAAKmC,MAEvGhE,EAAMkD,sBAAsBsB,WAAa,SAASN,GAChD,MAAOA,GAAMA,EAAKC,OAAOnE,EAAMkD,sBAAuBzC,EAAK8D,gBAAkB,IAGxEvE,EAAME,WAGfD,KAAKwE,gBAAkB1E,EAAYM,WAAWC,MAAM,gBAAgBC,KAAK,SAASE,GAoBhF,MAlBIA,GAAKiE,WACHjE,EAAKiE,SAASC,4BAChBlE,EAAKiE,SAASC,4BAA8BhE,EAAEE,IAAIJ,EAAKiE,SAASC,4BAA6B,SAAS5D,EAAOC,GAC3G,GAAI4D,GAAQ,kBAAkBC,KAAK9D,GAC/B+D,EAAO,GAAI/E,GAAYgF,OAAOC,IAAKhE,EAAKiE,GAAIL,EAAM,GAAIM,QAASN,EAAM,IAKzE,OAJKE,GAAKK,SACRnF,EAAMoF,OAAON,EAAKI,QAAS,IAAKG,QAAQ,IAAO9E,KAAK,SAAS+E,GAC3DR,EAAKK,QAAUG,IAEZR,IAITrE,EAAKiE,SAASC,gCAGlBpC,QAAQU,OAAOjD,EAAMG,SAAUM,GAExBT,EAAMG,WASjBJ,EAAYwF,UAAY,KAAM,WAAY,OAAQ,gBAAiB,aAAc,WAAY,WAAY,OAAQ,SAASC,EAAIC,EAAUC,EAAMxC,EAAuByC,EAAUC,EAAUC,EAAUC,GAYjM,MAXAvD,SAAQU,OAAOlD,GACbyF,GAAIA,EACJC,SAAUA,EACVC,KAAMA,EACNxC,sBAAuBA,EACvB6C,UAAWH,EACXvF,WAAY,GAAIwF,GAASF,EAASK,WAAW,aAAcL,EAASK,cACpEC,cAAeN,EAASO,eACxBnB,MAAOe,IAGF,GAAI/F,IAIb,KACEwC,QAAQ4D,OAAO,sBAEjB,MAAMC,GACJ7D,QAAQ4D,OAAO,sBAAuB,gBAIxC5D,QAAQ4D,OAAO,sBACZE,QAAQ,cAAetG,EAAYwF,UAQtCxF,EAAYuG,UAAUC,MAAQ,WAC5B,MAAOxG,GAAYyF,GAAGgB,KAAKvG,KAAKG,gBAAiBH,KAAKwE,mBASxD1E,EAAYuG,UAAUlB,OAAS,SAASqB,EAAOC,EAAMC,GACnD,GAAI3G,GAAQC,IACZ,OAAOA,MAAKsG,QAAQhG,KAAK,WACvB,GAA2D+E,GAAvDsB,EAAmB5G,EAAME,SAAS2G,mBAOtC,OALEvB,GADEtF,EAAME,SAAS4G,oBACX/G,EAAYgG,UAAUU,EAAOC,EAAME,EAAkBD,IAEpD5G,EAAYkG,cAAe,MAAO,2BAA2B3D,KAAK,KACvEqE,GAAWA,EAAQI,WAAaJ,EAAQK,UAC1CL,EAAQI,UAAUJ,EAAQK,SAAW1B,GAChCA,KASXvF,EAAYuG,UAAUW,MAAQ,WAG5B,MAAOlH,GAAYM,WAAW6G,KAAK,cAAejH,KAAKkH,OAAM,IAC1D5G,KAAK,SAASE,GAGb,MAAOA,MAWbV,EAAYuG,UAAUa,MAAQ,SAASC,GACrC,GAAIC,GAAa3G,EAAQ4G,CA0DzB,OAxDAD,MACAC,KAEA/E,QAAQgF,QAAQtH,KAAM,SAASc,EAAOC,GACzB,eAAPA,GAAkC,KAAVA,EAAI,KAC1BoG,EACFC,EAAYrG,GAAOuB,QAAQiF,KAAKzG,GAEhCsG,EAAYrG,GAAOD,KAKzBL,EAASC,EAAEC,UAAUD,EAAEE,IAAIwG,EAAYnH,SAASY,qBAAsB,SAASC,EAAOC,GACpF,MAAqB,KAAjBA,EAAIC,OAAO,IAA8B,KAAjBD,EAAIC,OAAO,GAEjCD,EAAIqB,OAAS,GAAsB,KAAjBrB,EAAIC,OAAO,IACvBF,EAAM,GAAG0G,cAAcC,QAAQ,wBAAyB,KAAM3G,IAEhEC,EAAI2G,UAAU,GAAI5G,IAEpBC,EAAKD,MAGfsG,EAAYnH,SAASY,qBAAuBJ,EAEvC2G,EAAYnH,SAASkB,iCACxBiG,EAAYnH,SAASmB,wBAA0B,SAC1CgG,GAAYnH,SAASkB,+BAExBiG,EAAYnH,SAASyB,WACnB0F,EAAYnH,SAASyB,SAASG,iBAChCuF,EAAYnH,SAASyB,SAASC,UAAYyF,EAAYnH,SAASyB,SAASC,UAAUO,UAAU,IAE5FkF,EAAYnH,SAASyB,SAASC,UAAY,EACxCyF,EAAYnH,SAASyB,SAASO,eAChCmF,EAAYnH,SAASyB,SAASM,QAAUoF,EAAYnH,SAASyB,SAASM,QAAQE,UAAU,IAExFkF,EAAYnH,SAASyB,SAASM,QAAU,EAEtCoF,EAAYnH,SAASyB,SAASS,wBAChCiF,EAAYnH,SAASyB,SAASS,wBAA0BzB,EAAEiH,OAAOP,EAAYnH,SAASyB,SAASS,wBAAwByF,MAAM,KAAM,SAASC,GAAK,MAAOA,GAAEzF,SAE1JgF,EAAYnH,SAASyB,SAASS,4BAG9BiF,EAAYnH,SAAS0C,SAAWyE,EAAYnH,SAAS0C,QAAQC,iBAC/DwE,EAAYnH,SAAS0C,QAAQC,eAAiBwE,EAAYnH,SAAS0C,QAAQC,eAAegF,MAAM,MAE9FR,EAAYlH,SAASuE,UAAY2C,EAAYlH,SAASuE,SAASC,8BACjEhE,EAAE4G,QAAQF,EAAYlH,SAASuE,SAASC,4BAA6B,SAASG,GAC5EwC,EAAUxC,EAAKE,KAAOF,EAAKiD,iBAE7BV,EAAYlH,SAASuE,SAASC,4BAA8B2C,GAGvDD","file":"Preferences.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Preferences\n   * @constructor\n   */\n  function Preferences() {\n    var _this = this;\n\n    this.defaults = {};\n    this.settings = {};\n\n    this.defaultsPromise = Preferences.$$resource.fetch(\"jsonDefaults\").then(function(response) {\n      var data = response || {};\n\n      // We swap $key -> _$key to avoid an Angular bug (https://github.com/angular/angular.js/issues/6266)\n      var labels = _.fromPairs(_.map(data.SOGoMailLabelsColors, function(value, key) {\n        if (key.charAt(0) == '$')\n          return ['_' + key, value];\n        return [key, value];\n      }));\n\n      data.SOGoMailLabelsColors = labels;\n\n      // Mail editor autosave is a number of minutes or 0 if disabled\n      data.SOGoMailAutoSave = parseInt(data.SOGoMailAutoSave) || 0;\n\n      // Specify a base font size for HTML messages when SOGoMailComposeFontSize is not zero\n      data.SOGoMailComposeFontSizeEnabled = parseInt(data.SOGoMailComposeFontSize) > 0;\n\n      if (window.CKEDITOR && data.SOGoMailComposeFontSizeEnabled) {\n        // HTML editor is enabled; set user's preferred font size\n        window.CKEDITOR.config.fontSize_defaultLabel = data.SOGoMailComposeFontSize;\n        window.CKEDITOR.addCss('.cke_editable { font-size: ' + data.SOGoMailComposeFontSize + 'px; }');\n      }\n\n      // We convert our list of autoReplyEmailAddresses/forwardAddress into a string.\n      // We also convert our date objects into real date, otherwise we'll have strings\n      // or undefined values and the md-datepicker does NOT like this.\n      if (data.Vacation) {\n        if (data.Vacation.startDate)\n          data.Vacation.startDate = new Date(parseInt(data.Vacation.startDate) * 1000);\n        else {\n          data.Vacation.startDateEnabled = 0;\n          data.Vacation.startDate = new Date();\n          data.Vacation.startDate = data.Vacation.startDate.beginOfDay();\n          data.Vacation.startDate.addDays(1);\n        }\n        if (data.Vacation.endDate)\n          data.Vacation.endDate = new Date(parseInt(data.Vacation.endDate) * 1000);\n        else {\n          data.Vacation.endDateEnabled = 0;\n          data.Vacation.endDate = new Date(data.Vacation.startDate.getTime());\n          data.Vacation.endDate.addDays(1);\n        }\n        if (data.Vacation.autoReplyEmailAddresses && data.Vacation.autoReplyEmailAddresses.length)\n          data.Vacation.autoReplyEmailAddresses = data.Vacation.autoReplyEmailAddresses.join(\",\");\n        else\n          delete data.Vacation.autoReplyEmailAddresses;\n      } else\n        data.Vacation = {};\n\n      if (angular.isUndefined(data.Vacation.autoReplyEmailAddresses) &&\n          angular.isDefined(window.defaultEmailAddresses))\n        data.Vacation.autoReplyEmailAddresses = window.defaultEmailAddresses;\n\n      if (angular.isUndefined(data.Vacation.daysBetweenResponse))\n        data.Vacation.daysBetweenResponse = 7;\n\n      if (angular.isUndefined(data.Vacation.startDate)) {\n        data.Vacation.startDateEnabled = 0;\n        data.Vacation.startDate = new Date();\n      }\n\n      if (angular.isUndefined(data.Vacation.endDate)) {\n        data.Vacation.endDateEnabled = 0;\n        data.Vacation.endDate = new Date();\n      }\n\n      if (data.Forward && data.Forward.forwardAddress)\n        data.Forward.forwardAddress = data.Forward.forwardAddress.join(\",\");\n\n      if (angular.isUndefined(data.SOGoCalendarCategoriesColors)) {\n        data.SOGoCalendarCategoriesColors = {};\n        data.SOGoCalendarCategories = [];\n      }\n\n      if (angular.isUndefined(data.SOGoContactsCategories))\n        data.SOGoContactsCategories = [];\n\n      angular.extend(_this.defaults, data);\n\n      // Configure date locale\n      _this.$mdDateLocaleProvider = Preferences.$mdDateLocaleProvider;\n      angular.extend(_this.$mdDateLocaleProvider, data.locale);\n      angular.extend(_this.$mdDateLocaleProvider, {\n        firstDayOfWeek: data.SOGoFirstDayOfWeek,\n        firstWeekOfYear: data.SOGoFirstWeekOfYear\n      });\n      _this.$mdDateLocaleProvider.firstDayOfWeek = parseInt(data.SOGoFirstDayOfWeek);\n      _this.$mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {\n        return l('Week %d', weekNumber);\n      };\n      _this.$mdDateLocaleProvider.msgCalendar = l('Calender');\n      _this.$mdDateLocaleProvider.msgOpenCalendar = l('Open Calendar');\n      _this.$mdDateLocaleProvider.parseDate = function(dateString) {\n        return dateString? dateString.parseDate(_this.$mdDateLocaleProvider, data.SOGoShortDateFormat) : new Date(NaN);\n      };\n      _this.$mdDateLocaleProvider.formatDate = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, date.$dateFormat || data.SOGoShortDateFormat) : '';\n      };\n      _this.$mdDateLocaleProvider.parseTime = function(timeString) {\n        return timeString? timeString.parseDate(_this.$mdDateLocaleProvider, data.SOGoTimeFormat) : new Date(NaN);\n      };\n      _this.$mdDateLocaleProvider.formatTime = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, data.SOGoTimeFormat) : '';\n      };\n\n      return _this.defaults;\n    });\n\n    this.settingsPromise = Preferences.$$resource.fetch(\"jsonSettings\").then(function(data) {\n      // We convert our PreventInvitationsWhitelist hash into a array of user\n      if (data.Calendar) {\n        if (data.Calendar.PreventInvitationsWhitelist) {\n          data.Calendar.PreventInvitationsWhitelist = _.map(data.Calendar.PreventInvitationsWhitelist, function(value, key) {\n            var match = /^(.+)\\s<(\\S+)>$/.exec(value),\n                user = new Preferences.$User({uid: key, cn: match[1], c_email: match[2]});\n            if (!user.$$image)\n              _this.avatar(user.c_email, 32, {no_404: true}).then(function(url) {\n                user.$$image = url;\n              });\n            return user;\n          });\n        }\n        else\n          data.Calendar.PreventInvitationsWhitelist = [];\n      }\n\n      angular.extend(_this.settings, data);\n\n      return _this.settings;\n    });\n  }\n\n  /**\n   * @memberof Preferences\n   * @desc The factory we'll use to register with Angular\n   * @returns the Preferences constructor\n   */\n  Preferences.$factory = ['$q', '$timeout', '$log', '$mdDateLocale', 'sgSettings', 'Gravatar', 'Resource', 'User', function($q, $timeout, $log, $mdDateLocaleProvider, Settings, Gravatar, Resource, User) {\n    angular.extend(Preferences, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $mdDateLocaleProvider: $mdDateLocaleProvider,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL'), Settings.activeUser()),\n      $resourcesURL: Settings.resourcesURL(),\n      $User: User\n    });\n\n    return new Preferences(); // return unique instance\n  }];\n\n  /* Initialize module if necessary */\n  try {\n    angular.module('SOGo.PreferencesUI');\n  }\n  catch(e) {\n    angular.module('SOGo.PreferencesUI', ['SOGo.Common']);\n  }\n\n  /* Factory registration in Angular module */\n  angular.module('SOGo.PreferencesUI')\n    .factory('Preferences', Preferences.$factory);\n\n  /**\n   * @function ready\n   * @memberof Preferences.prototype\n   * @desc Combine promises used to load user's defaults and settings.\n   * @return a combined promise\n   */\n  Preferences.prototype.ready = function() {\n    return Preferences.$q.all([this.defaultsPromise, this.settingsPromise]);\n  };\n\n  /**\n   * @function avatar\n   * @memberof Preferences.prototype\n   * @desc Get the avatar URL associated to an email address\n   * @return a combined promise\n   */\n  Preferences.prototype.avatar = function(email, size, options) {\n    var _this = this;\n    return this.ready().then(function() {\n      var alternate_avatar = _this.defaults.SOGoAlternateAvatar, url;\n      if (_this.defaults.SOGoGravatarEnabled)\n        url = Preferences.$gravatar(email, size, alternate_avatar, options);\n      else\n        url = [Preferences.$resourcesURL, 'img', 'ic_person_grey_24px.svg'].join('/');\n      if (options && options.dstObject && options.dstAttr)\n        options.dstObject[options.dstAttr] = url;\n      return url;\n    });\n  };\n\n  /**\n   * @function $save\n   * @memberof Preferences.prototype\n   * @desc Save the preferences to the server.\n   */\n  Preferences.prototype.$save = function() {\n    var _this = this;\n\n    return Preferences.$$resource.save(\"Preferences\", this.$omit(true))\n      .then(function(data) {\n        // Make a copy of the data for an eventual reset\n        //_this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  /**\n   * @function $omit\n   * @memberof Preferences.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {Boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Preferences instance\n   */\n  Preferences.prototype.$omit = function(deep) {\n    var preferences, labels, whitelist;\n\n    preferences = {};\n    whitelist = {};\n\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          preferences[key] = angular.copy(value);\n        else\n          preferences[key] = value;\n      }\n    });\n\n    // We swap _$key -> $key to avoid an Angular bug (https://github.com/angular/angular.js/issues/6266)\n    labels = _.fromPairs(_.map(preferences.defaults.SOGoMailLabelsColors, function(value, key) {\n      if (key.charAt(0) == '_' && key.charAt(1) == '$') {\n        // New key, let's take the value and flatten it\n        if (key.length > 2 && key.charAt(2) == '$') {\n          return [value[0].toLowerCase().replace(/[ \\(\\)\\/\\{%\\*<>\\\\\\\"]/g, \"_\"), value];\n        }\n        return [key.substring(1), value];\n      }\n      return [key, value];\n    }));\n\n    preferences.defaults.SOGoMailLabelsColors = labels;\n\n    if (!preferences.defaults.SOGoMailComposeFontSizeEnabled)\n      preferences.defaults.SOGoMailComposeFontSize = 0;\n    delete preferences.defaults.SOGoMailComposeFontSizeEnabled;\n\n    if (preferences.defaults.Vacation) {\n      if (preferences.defaults.Vacation.startDateEnabled)\n        preferences.defaults.Vacation.startDate = preferences.defaults.Vacation.startDate.getTime()/1000;\n      else\n        preferences.defaults.Vacation.startDate = 0;\n      if (preferences.defaults.Vacation.endDateEnabled)\n        preferences.defaults.Vacation.endDate = preferences.defaults.Vacation.endDate.getTime()/1000;\n      else\n        preferences.defaults.Vacation.endDate = 0;\n\n      if (preferences.defaults.Vacation.autoReplyEmailAddresses)\n        preferences.defaults.Vacation.autoReplyEmailAddresses = _.filter(preferences.defaults.Vacation.autoReplyEmailAddresses.split(\",\"), function(v) { return v.length; });\n      else\n        preferences.defaults.Vacation.autoReplyEmailAddresses = [];\n    }\n\n    if (preferences.defaults.Forward && preferences.defaults.Forward.forwardAddress)\n      preferences.defaults.Forward.forwardAddress = preferences.defaults.Forward.forwardAddress.split(\",\");\n\n    if (preferences.settings.Calendar && preferences.settings.Calendar.PreventInvitationsWhitelist) {\n      _.forEach(preferences.settings.Calendar.PreventInvitationsWhitelist, function(user) {\n        whitelist[user.uid] = user.$shortFormat();\n      });\n      preferences.settings.Calendar.PreventInvitationsWhitelist = whitelist;\n    }\n\n    return preferences;\n  };\n\n})();\n"]}