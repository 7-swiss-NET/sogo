{"version":3,"sources":["Preferences/Preferences.service.js"],"names":["Preferences","defaultsElement","settingsElement","data","_this","this","defaults","settings","$document","getElementById","angular","fromJson","textContent","innerHTML","e","$log","error","message","SOGoMailLabelsColorsKeys","SOGoMailLabelsColorsValues","_","forEach","SOGoMailLabelsColors","value","key","push","SOGoSieveFilters","filter","actions","action","method","argument","charAt","SOGoRememberLastModule","SOGoLoginModule","SOGoMailAutoSave","parseInt","SOGoMailComposeWindowEnabled","isDefined","SOGoMailComposeWindow","SOGoMailComposeFontSizeEnabled","SOGoMailComposeFontSize","window","CKEDITOR","config","fontSize_defaultLabel","addCss","AuxiliaryMailAccounts","mailAccount","isNaN","port","Vacation","startDate","Date","startDateEnabled","beginOfDay","addDays","endDate","endDateEnabled","getTime","autoReplyEmailAddresses","length","join","isUndefined","defaultEmailAddresses","daysBetweenResponse","Forward","forwardAddress","SOGoCalendarCategoriesColors","SOGoCalendarCategories","SOGoContactsCategories","compact","extend","$mdDateLocaleProvider","locale","firstDayOfWeek","SOGoFirstDayOfWeek","firstWeekOfYear","SOGoFirstWeekOfYear","weekNumberFormatter","weekNumber","l","msgCalendar","msgOpenCalendar","parseDate","dateString","SOGoShortDateFormat","NaN","formatDate","date","format","$dateFormat","parseTime","timeString","SOGoTimeFormat","formatTime","Calendar","PreventInvitationsWhitelist","map","match","exec","user","$User","uid","cn","c_email","$$image","avatar","no_404","$factory","$q","$timeout","Settings","Gravatar","Resource","User","$gravatar","$$resource","activeUser","$resourcesURL","resourcesURL","module","factory","prototype","ready","warn","when","email","size","options","url","alternate_avatar","SOGoAlternateAvatar","SOGoGravatarEnabled","dstObject","dstAttr","$save","save","$omit","then","deep","preferences","whitelist","copy","i","substring","split","v","$shortFormat"],"mappings":"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","file":"Preferences.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Preferences\n   * @constructor\n   */\n  function Preferences() {\n    var _this = this, defaultsElement, settingsElement, data;\n\n    this.defaults = {};\n    this.settings = {};\n\n    defaultsElement = Preferences.$document[0].getElementById('UserDefaults');\n    if (defaultsElement) {\n      try {\n        data = angular.fromJson(defaultsElement.textContent || defaultsElement.innerHTML);\n      } catch (e) {\n        Preferences.$log.error(\"Can't parse user's defaults: \" + e.message);\n        data = {};\n      }\n\n      // Split mail labels keys and values\n      data.SOGoMailLabelsColorsKeys = [];\n      data.SOGoMailLabelsColorsValues = [];\n      _.forEach(data.SOGoMailLabelsColors, function (value, key) {\n        data.SOGoMailLabelsColorsKeys.push(key);\n        data.SOGoMailLabelsColorsValues.push(value);\n      });\n\n      _.forEach(data.SOGoSieveFilters, function(filter) {\n        _.forEach(filter.actions, function(action) {\n          if (action.method == 'addflag' &&\n              action.argument.charAt(0) == '$')\n            action.argument = '_' + action.argument;\n        });\n      });\n\n      if (data.SOGoRememberLastModule)\n        data.SOGoLoginModule = \"Last\";\n\n      // Mail editor autosave is a number of minutes or 0 if disabled\n      data.SOGoMailAutoSave = parseInt(data.SOGoMailAutoSave) || 0;\n\n      data.SOGoMailComposeWindowEnabled = angular.isDefined(data.SOGoMailComposeWindow);\n\n      // Specify a base font size for HTML messages when SOGoMailComposeFontSize is not zero\n      data.SOGoMailComposeFontSizeEnabled = parseInt(data.SOGoMailComposeFontSize) > 0;\n\n      if (window.CKEDITOR && data.SOGoMailComposeFontSizeEnabled) {\n        // HTML editor is enabled; set user's preferred font size\n        window.CKEDITOR.config.fontSize_defaultLabel = data.SOGoMailComposeFontSize;\n        window.CKEDITOR.addCss('.cke_editable { font-size: ' + data.SOGoMailComposeFontSize + 'px; }');\n      }\n\n      _.forEach(data.AuxiliaryMailAccounts, function (mailAccount) {\n        if (isNaN(parseInt(mailAccount.port)))\n          mailAccount.port = null;\n      });\n\n      // We convert our list of autoReplyEmailAddresses/forwardAddress into a string.\n      // We also convert our date objects into real date, otherwise we'll have strings\n      // or undefined values and the md-datepicker does NOT like this.\n      if (data.Vacation) {\n        if (data.Vacation.startDate)\n          data.Vacation.startDate = new Date(parseInt(data.Vacation.startDate) * 1000);\n        else {\n          data.Vacation.startDateEnabled = 0;\n          data.Vacation.startDate = new Date();\n          data.Vacation.startDate = data.Vacation.startDate.beginOfDay();\n          data.Vacation.startDate.addDays(1);\n        }\n        if (data.Vacation.endDate)\n          data.Vacation.endDate = new Date(parseInt(data.Vacation.endDate) * 1000);\n        else {\n          data.Vacation.endDateEnabled = 0;\n          data.Vacation.endDate = new Date(data.Vacation.startDate.getTime());\n          data.Vacation.endDate.addDays(1);\n        }\n        if (data.Vacation.autoReplyEmailAddresses && data.Vacation.autoReplyEmailAddresses.length)\n          data.Vacation.autoReplyEmailAddresses = data.Vacation.autoReplyEmailAddresses.join(\",\");\n        else\n          delete data.Vacation.autoReplyEmailAddresses;\n      } else\n        data.Vacation = {};\n\n      if (angular.isUndefined(data.Vacation.autoReplyEmailAddresses) &&\n          angular.isDefined(window.defaultEmailAddresses))\n        data.Vacation.autoReplyEmailAddresses = window.defaultEmailAddresses;\n\n      if (angular.isUndefined(data.Vacation.daysBetweenResponse))\n        data.Vacation.daysBetweenResponse = 7;\n\n      if (angular.isUndefined(data.Vacation.startDate)) {\n        data.Vacation.startDateEnabled = 0;\n        data.Vacation.startDate = new Date();\n      }\n\n      if (angular.isUndefined(data.Vacation.endDate)) {\n        data.Vacation.endDateEnabled = 0;\n        data.Vacation.endDate = new Date();\n      }\n\n      if (data.Forward && data.Forward.forwardAddress)\n        data.Forward.forwardAddress = data.Forward.forwardAddress.join(\",\");\n\n      if (angular.isUndefined(data.SOGoCalendarCategoriesColors)) {\n        data.SOGoCalendarCategoriesColors = {};\n        data.SOGoCalendarCategories = [];\n      }\n\n      if (angular.isUndefined(data.SOGoContactsCategories))\n        data.SOGoContactsCategories = [];\n      else\n        data.SOGoContactsCategories = _.compact(data.SOGoContactsCategories);\n\n      angular.extend(_this.defaults, data);\n\n      // Configure date locale\n      _this.$mdDateLocaleProvider = Preferences.$mdDateLocaleProvider;\n      angular.extend(_this.$mdDateLocaleProvider, data.locale);\n      angular.extend(_this.$mdDateLocaleProvider, {\n        firstDayOfWeek: data.SOGoFirstDayOfWeek,\n        firstWeekOfYear: data.SOGoFirstWeekOfYear\n      });\n      _this.$mdDateLocaleProvider.firstDayOfWeek = parseInt(data.SOGoFirstDayOfWeek);\n      _this.$mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {\n        return l('Week %d', weekNumber);\n      };\n      _this.$mdDateLocaleProvider.msgCalendar = l('Calender');\n      _this.$mdDateLocaleProvider.msgOpenCalendar = l('Open Calendar');\n      _this.$mdDateLocaleProvider.parseDate = function(dateString) {\n        return dateString? dateString.parseDate(_this.$mdDateLocaleProvider, _this.defaults.SOGoShortDateFormat) : new Date(NaN);\n      };\n      _this.$mdDateLocaleProvider.formatDate = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, date.$dateFormat || _this.defaults.SOGoShortDateFormat) : '';\n      };\n      _this.$mdDateLocaleProvider.parseTime = function(timeString) {\n        return timeString? timeString.parseDate(_this.$mdDateLocaleProvider, _this.defaults.SOGoTimeFormat) : new Date(NaN);\n      };\n      _this.$mdDateLocaleProvider.formatTime = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, _this.defaults.SOGoTimeFormat) : '';\n      };\n    }\n\n    settingsElement = Preferences.$document[0].getElementById('UserSettings');\n    if (settingsElement) {\n      try {\n        data = angular.fromJson(settingsElement.textContent || settingsElement.innerHTML);\n      } catch (e) {\n        Preferences.$log.error(\"Can't parse user's settings: \" + e.message);\n        data = {};\n      }\n\n      // We convert our PreventInvitationsWhitelist hash into a array of user\n      if (data.Calendar) {\n        if (data.Calendar.PreventInvitationsWhitelist) {\n          data.Calendar.PreventInvitationsWhitelist = _.map(data.Calendar.PreventInvitationsWhitelist, function(value, key) {\n            var match = /^(.+)\\s<(\\S+)>$/.exec(value),\n                user = new Preferences.$User({uid: key, cn: match[1], c_email: match[2]});\n            if (!user.$$image)\n              user.$$image = _this.avatar(user.c_email, 32, {no_404: true});\n            return user;\n          });\n        }\n        else\n          data.Calendar.PreventInvitationsWhitelist = [];\n      }\n\n      angular.extend(_this.settings, data);\n    }\n  }\n\n  /**\n   * @memberof Preferences\n   * @desc The factory we'll use to register with Angular\n   * @returns the Preferences constructor\n   */\n  Preferences.$factory = ['$document', '$q', '$timeout', '$log', '$mdDateLocale', 'sgSettings', 'Gravatar', 'Resource', 'User', function($document, $q, $timeout, $log, $mdDateLocaleProvider, Settings, Gravatar, Resource, User) {\n    angular.extend(Preferences, {\n      $document: $document,\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $mdDateLocaleProvider: $mdDateLocaleProvider,\n      $gravatar: Gravatar,\n      $$resource: new Resource(Settings.activeUser('folderURL'), Settings.activeUser()),\n      $resourcesURL: Settings.resourcesURL(),\n      $User: User\n    });\n\n    return new Preferences(); // return unique instance\n  }];\n\n  /* Initialize module if necessary */\n  try {\n    angular.module('SOGo.PreferencesUI');\n  }\n  catch(e) {\n    angular.module('SOGo.PreferencesUI', ['SOGo.Common']);\n  }\n\n  /* Factory registration in Angular module */\n  angular.module('SOGo.PreferencesUI')\n    .factory('Preferences', Preferences.$factory);\n\n  /**\n   * @function ready\n   * @memberof Preferences.prototype\n   * @desc Combine promises used to load user's defaults and settings.\n   * @return a combined promise\n   */\n  Preferences.prototype.ready = function() {\n    Preferences.$log.warn('Preferences.ready is deprecated -- access settings/defaults directly.');\n    return Preferences.$q.when(true);\n  };\n\n  /**\n   * @function avatar\n   * @memberof Preferences.prototype\n   * @desc Get the avatar URL associated to an email address\n   * @return a combined promise\n   */\n  Preferences.prototype.avatar = function(email, size, options) {\n    var _this = this;\n    var alternate_avatar = _this.defaults.SOGoAlternateAvatar, url;\n    if (_this.defaults.SOGoGravatarEnabled)\n      url = Preferences.$gravatar(email, size, alternate_avatar, options);\n    else\n      url = [Preferences.$resourcesURL, 'img', 'ic_person_grey_24px.svg'].join('/');\n    if (options && options.dstObject && options.dstAttr)\n      options.dstObject[options.dstAttr] = url;\n    return url;\n  };\n\n  /**\n   * @function $save\n   * @memberof Preferences.prototype\n   * @desc Save the preferences to the server.\n   */\n  Preferences.prototype.$save = function() {\n    var _this = this;\n\n    return Preferences.$$resource.save(\"Preferences\", this.$omit(true))\n      .then(function(data) {\n        // Make a copy of the data for an eventual reset\n        //_this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  /**\n   * @function $omit\n   * @memberof Preferences.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {Boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Preferences instance\n   */\n  Preferences.prototype.$omit = function(deep) {\n    var preferences, labels, whitelist;\n\n    preferences = {};\n    whitelist = {};\n\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          preferences[key] = angular.copy(value);\n        else\n          preferences[key] = value;\n      }\n    });\n\n    // Merge back mail labels keys and values\n    preferences.defaults.SOGoMailLabelsColors = {};\n    _.forEach(preferences.defaults.SOGoMailLabelsColorsKeys, function(key, i) {\n      preferences.defaults.SOGoMailLabelsColors[key] = preferences.defaults.SOGoMailLabelsColorsValues[i];\n    });\n    delete preferences.defaults.SOGoMailLabelsColorsKeys;\n    delete preferences.defaults.SOGoMailLabelsColorsValues;\n\n    _.forEach(preferences.defaults.SOGoSieveFilters, function(filter) {\n      _.forEach(filter.actions, function(action) {\n        if (action.method == 'addflag' &&\n            action.argument.charAt(0) == '_' &&\n            action.argument.charAt(1) == '$')\n          action.argument = action.argument.substring(1);\n      });\n    });\n\n    if (!preferences.defaults.SOGoMailComposeWindowEnabled)\n      delete preferences.defaults.SOGoMailComposeWindow;\n    delete preferences.defaults.SOGoMailComposeWindowEnabled;\n\n    if (!preferences.defaults.SOGoMailComposeFontSizeEnabled)\n      preferences.defaults.SOGoMailComposeFontSize = 0;\n    delete preferences.defaults.SOGoMailComposeFontSizeEnabled;\n\n    if (preferences.defaults.Vacation) {\n      if (preferences.defaults.Vacation.startDateEnabled)\n        preferences.defaults.Vacation.startDate = preferences.defaults.Vacation.startDate.getTime()/1000;\n      else {\n        delete preferences.defaults.Vacation.startDateEnabled;\n        preferences.defaults.Vacation.startDate = 0;\n      }\n      if (preferences.defaults.Vacation.endDateEnabled)\n        preferences.defaults.Vacation.endDate = preferences.defaults.Vacation.endDate.getTime()/1000;\n      else {\n        delete preferences.defaults.Vacation.endDateEnabled;\n        preferences.defaults.Vacation.endDate = 0;\n      }\n\n      if (preferences.defaults.Vacation.autoReplyEmailAddresses)\n        preferences.defaults.Vacation.autoReplyEmailAddresses = _.filter(preferences.defaults.Vacation.autoReplyEmailAddresses.split(\",\"), function(v) { return v.length; });\n      else\n        preferences.defaults.Vacation.autoReplyEmailAddresses = [];\n    }\n\n    if (preferences.defaults.Forward && preferences.defaults.Forward.forwardAddress)\n      preferences.defaults.Forward.forwardAddress = preferences.defaults.Forward.forwardAddress.split(\",\");\n\n    if (preferences.settings.Calendar && preferences.settings.Calendar.PreventInvitationsWhitelist) {\n      _.forEach(preferences.settings.Calendar.PreventInvitationsWhitelist, function(user) {\n        whitelist[user.uid] = user.$shortFormat();\n      });\n      preferences.settings.Calendar.PreventInvitationsWhitelist = whitelist;\n    }\n\n    return preferences;\n  };\n\n})();\n"]}