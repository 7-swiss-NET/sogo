{"version":3,"sources":["Preferences/Preferences.service.js"],"names":["Preferences","_this","this","defaults","settings","defaultsPromise","$$resource","fetch","then","data","labels","_","object","map","SOGoMailLabelsColors","value","key","charAt","SOGoMailAutoSave","parseInt","Vacation","endDate","Date","endDateEnabled","autoReplyEmailAddresses","length","join","angular","isUndefined","isDefined","window","defaultEmailAddresses","daysBetweenResponse","Forward","forwardAddress","SOGoCalendarCategoriesColors","SOGoCalendarCategories","SOGoContactsCategories","extend","$mdDateLocaleProvider","locale","firstDayOfWeek","SOGoFirstDayOfWeek","weekNumberFormatter","weekNumber","l","msgCalendar","msgOpenCalendar","parseDate","dateString","SOGoShortDateFormat","NaN","formatDate","date","format","formatTime","SOGoTimeFormat","settingsPromise","Calendar","PreventInvitationsWhitelist","match","exec","$User","uid","cn","c_email","$factory","$q","$timeout","$log","Settings","Resource","User","activeUser","module","e","factory","prototype","ready","all","$save","save","$omit","deep","preferences","whitelist","forEach","copy","toLowerCase","replace","substring","getTime","filter","split","v","each","user","$shortFormat"],"mappings":"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","file":"Preferences.services.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name Preferences\n   * @constructor\n   */\n  function Preferences() {\n    var _this = this;\n\n    this.defaults = {};\n    this.settings = {};\n\n    this.defaultsPromise = Preferences.$$resource.fetch(\"jsonDefaults\").then(function(data) {\n      // We swap $key -> _$key to avoid an Angular bug (https://github.com/angular/angular.js/issues/6266)\n      var labels = _.object(_.map(data.SOGoMailLabelsColors, function(value, key) {\n        if (key.charAt(0) == '$')\n          return ['_' + key, value];\n        return [key, value];\n      }));\n\n      data.SOGoMailLabelsColors = labels;\n\n      // Mail editor autosave is a number of minutes or 0 if disabled\n      data.SOGoMailAutoSave = parseInt(data.SOGoMailAutoSave) || 0;\n\n      // We convert our list of autoReplyEmailAddresses/forwardAddress into a string.\n      // We also convert our date objects into real date, otherwise we'll have strings\n      // or undefined values and the md-datepicker does NOT like this.\n      if (data.Vacation) {\n        if (data.Vacation.endDate)\n          data.Vacation.endDate = new Date(parseInt(data.Vacation.endDate) * 1000);\n        else {\n          data.Vacation.endDateEnabled = 0;\n          data.Vacation.endDate = new Date();\n        }\n        if (data.Vacation.autoReplyEmailAddresses && data.Vacation.autoReplyEmailAddresses.length)\n          data.Vacation.autoReplyEmailAddresses = data.Vacation.autoReplyEmailAddresses.join(\",\");\n        else\n          delete data.Vacation.autoReplyEmailAddresses;\n      } else\n        data.Vacation = {};\n\n      if (angular.isUndefined(data.Vacation.autoReplyEmailAddresses) &&\n          angular.isDefined(window.defaultEmailAddresses))\n        data.Vacation.autoReplyEmailAddresses = window.defaultEmailAddresses;\n\n      if (angular.isUndefined(data.Vacation.daysBetweenResponse))\n        data.Vacation.daysBetweenResponse = 7;\n\n      if (angular.isUndefined(data.Vacation.endDate)) {\n        data.Vacation.endDateEnabled = 0;\n        data.Vacation.endDate = new Date();\n      }\n\n      if (data.Forward && data.Forward.forwardAddress)\n        data.Forward.forwardAddress = data.Forward.forwardAddress.join(\",\");\n\n      if (angular.isUndefined(data.SOGoCalendarCategoriesColors)) {\n        data.SOGoCalendarCategoriesColors = {};\n        data.SOGoCalendarCategories = [];\n      }\n\n      if (angular.isUndefined(data.SOGoContactsCategories))\n        data.SOGoContactsCategories = [];\n\n      angular.extend(_this.defaults, data);\n\n      // Configure date locale\n      _this.$mdDateLocaleProvider = Preferences.$mdDateLocaleProvider;\n      angular.extend(_this.$mdDateLocaleProvider, data.locale);\n      _this.$mdDateLocaleProvider.firstDayOfWeek = parseInt(data.SOGoFirstDayOfWeek);\n      _this.$mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {\n        return l('Week %d', weekNumber);\n      };\n      _this.$mdDateLocaleProvider.msgCalendar = l('Calender');\n      _this.$mdDateLocaleProvider.msgOpenCalendar = l('Open Calendar');\n      _this.$mdDateLocaleProvider.parseDate = function(dateString) {\n        return dateString? dateString.parseDate(_this.$mdDateLocaleProvider, data.SOGoShortDateFormat) : new Date(NaN);\n      };\n      _this.$mdDateLocaleProvider.formatDate = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, data.SOGoShortDateFormat) : '';\n      };\n      _this.$mdDateLocaleProvider.formatTime = function(date) {\n        return date? date.format(_this.$mdDateLocaleProvider, data.SOGoTimeFormat) : '';\n      };\n\n      return _this.defaults;\n    });\n\n    this.settingsPromise = Preferences.$$resource.fetch(\"jsonSettings\").then(function(data) {\n      // We convert our PreventInvitationsWhitelist hash into a array of user\n      if (data.Calendar) {\n        if (data.Calendar.PreventInvitationsWhitelist)\n          data.Calendar.PreventInvitationsWhitelist = _.map(data.Calendar.PreventInvitationsWhitelist, function(value, key) {\n            var match = /^(.+)\\s<(\\S+)>$/.exec(value);\n            return new Preferences.$User({uid: key, cn: match[1], c_email: match[2]});\n          });\n        else\n          data.Calendar.PreventInvitationsWhitelist = [];\n      }\n\n      angular.extend(_this.settings, data);\n\n      return _this.settings;\n    });\n  }\n\n  /**\n   * @memberof Preferences\n   * @desc The factory we'll use to register with Angular\n   * @returns the Preferences constructor\n   */\n  Preferences.$factory = ['$q', '$timeout', '$log', '$mdDateLocale', 'sgSettings', 'Resource', 'User', function($q, $timeout, $log, $mdDateLocaleProvider, Settings, Resource, User) {\n    angular.extend(Preferences, {\n      $q: $q,\n      $timeout: $timeout,\n      $log: $log,\n      $mdDateLocaleProvider: $mdDateLocaleProvider,\n      $$resource: new Resource(Settings.activeUser('folderURL'), Settings.activeUser()),\n      activeUser: Settings.activeUser(),\n      $User: User\n    });\n\n    return new Preferences(); // return unique instance\n  }];\n\n  /* Initialize module if necessary */\n  try {\n    angular.module('SOGo.PreferencesUI');\n  }\n  catch(e) {\n    angular.module('SOGo.PreferencesUI', ['SOGo.Common']);\n  }\n\n  /* Factory registration in Angular module */\n  angular.module('SOGo.PreferencesUI')\n    .factory('Preferences', Preferences.$factory);\n\n  /**\n   * @function ready\n   * @memberof Preferences.prototype\n   * @desc Combine promises used to load user's defaults and settings.\n   * @return a combined promise\n   */\n  Preferences.prototype.ready = function() {\n    return Preferences.$q.all([this.defaultsPromise, this.settingsPromise]);\n  };\n\n  /**\n   * @function $save\n   * @memberof Preferences.prototype\n   * @desc Save the preferences to the server.\n   */\n  Preferences.prototype.$save = function() {\n    var _this = this;\n\n    return Preferences.$$resource.save(\"Preferences\", this.$omit(true))\n      .then(function(data) {\n        // Make a copy of the data for an eventual reset\n        //_this.$shadowData = _this.$omit(true);\n        return data;\n      });\n  };\n\n  /**\n   * @function $omit\n   * @memberof Preferences.prototype\n   * @desc Return a sanitized object used to send to the server.\n   * @param {Boolean} [deep] - make a deep copy if true\n   * @return an object literal copy of the Preferences instance\n   */\n  Preferences.prototype.$omit = function(deep) {\n    var preferences, labels, whitelist;\n\n    preferences = {};\n    whitelist = {};\n\n    angular.forEach(this, function(value, key) {\n      if (key != 'constructor' && key[0] != '$') {\n        if (deep)\n          preferences[key] = angular.copy(value);\n        else\n          preferences[key] = value;\n      }\n    });\n\n    // We swap _$key -> $key to avoid an Angular bug (https://github.com/angular/angular.js/issues/6266)\n    labels = _.object(_.map(preferences.defaults.SOGoMailLabelsColors, function(value, key) {\n      if (key.charAt(0) == '_' && key.charAt(1) == '$') {\n        // New key, let's take the value and flatten it\n        if (key.length > 2 && key.charAt(2) == '$') {\n          return [value[0].toLowerCase().replace(/[ \\(\\)\\/\\{%\\*<>\\\\\\\"]/g, \"_\"), value];\n        }\n        return [key.substring(1), value];\n      }\n      return [key, value];\n    }));\n\n    preferences.defaults.SOGoMailLabelsColors = labels;\n\n    if (preferences.defaults.Vacation) {\n      if (preferences.defaults.Vacation.endDateEnabled)\n        preferences.defaults.Vacation.endDate = preferences.defaults.Vacation.endDate.getTime()/1000;\n      else\n        preferences.defaults.Vacation.endDate = 0;\n\n      if (preferences.defaults.Vacation.autoReplyEmailAddresses)\n        preferences.defaults.Vacation.autoReplyEmailAddresses = _.filter(preferences.defaults.Vacation.autoReplyEmailAddresses.split(\",\"), function(v) { return v.length; });\n      else\n        preferences.defaults.Vacation.autoReplyEmailAddresses = [];\n    }\n\n    if (preferences.defaults.Forward && preferences.defaults.Forward.forwardAddress)\n      preferences.defaults.Forward.forwardAddress = preferences.defaults.Forward.forwardAddress.split(\",\");\n\n    if (preferences.settings.Calendar && preferences.settings.Calendar.PreventInvitationsWhitelist) {\n      _.each(preferences.settings.Calendar.PreventInvitationsWhitelist, function(user) {\n        whitelist[user.uid] = user.$shortFormat();\n      });\n      preferences.settings.Calendar.PreventInvitationsWhitelist = whitelist;\n    }\n\n    return preferences;\n  };\n\n})();\n"]}