{"version":3,"file":"Preferences.js","sources":["Preferences/Preferences.app.js","Preferences/AccountDialogController.js","Preferences/FiltersDialogController.js","Preferences/PreferencesController.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","abstract","views","preferences","templateUrl","controller","controllerAs","resolve","statePreferences","url","module","otherwise","Preferences","runBlock","$rootScope","$on","event","current","previous","rejection","console","error","angular","config","run","$inject","AccountDialogController","$mdDialog","defaults","account","accountId","mailCustomFromEnabled","customFromIsReadonly","cancel","save","hide","vm","this","FiltersDialogController","$scope","$window","filter","mailboxes","labels","form","addMailFilterRule","rules","push","field","operator","removeMailFilterRule","index","splice","addMailFilterAction","actions","method","removeMailFilterAction","sieveCapabilities","fieldLabels","subject","l","from","to","cc","to_or_cc","size","header","indexOf","body","methodLabels","discard","keep","redirect","vacation","stop","reject","fileinto","addflag","numberOperatorLabels","under","over","textOperatorLabels","is","is_not","contains","contains_not","matches","matches_not","regex","regex_not","flagLabels","seen","deleted","answered","flagged","junk","not_junk","PreferencesController","$state","$mdToast","Dialog","User","Account","Authentication","go","addCalendarCategory","SOGoCalendarCategoriesColors","SOGoCalendarCategories","removeCalendarCategory","key","addContactCategory","SOGoContactsCategories","removeContactCategory","addMailAccount","ev","AuxiliaryMailAccounts","_","last","name","identities","fullName","email","receipts","receiptAction","receiptNonRecipientAction","receiptOutsideDomainAction","receiptAnyAction","show","targetEvent","locals","length","window","editMailAccount","then","removeMailAccount","addMailLabel","SOGoMailLabelsColors","new_label","removeMailLabel","addMailFilter","match","SOGoSieveFilters","editMailFilter","copy","removeMailFilter","addDefaultEmailAddresses","v","isDefined","Vacation","autoReplyEmailAddresses","split","union","defaultEmailAddresses","join","sendForm","forwardConstraints","Forward","enabled","forwardAddress","addresses","defaultAddresses","domains","forEach","adr","domain","toLowerCase","i","alert","$save","data","simple","content","position","hideDelay","canChangePassword","passwords","newPassword","newPasswordConfirmation","changePassword","title","ok","undefined","msg","timeZonesListFilter","timeZonesList","value","toUpperCase","userFilter","$filter","timeZonesSearchText","id","$getMailboxes","allMailboxes","$flattenMailboxes","all"],"mappings":"CAGA,WACE,YAUA,SAASA,WAAUC,eAAgBC,oBACjCD,eACGE,MAAM,eACLC,YAAU,EACVC,OACEC,aACEC,YAAa,mBACbC,WAAY,wBACZC,aAAc,QAGlBC,SACEC,iBAAkBA,oBAGrBR,MAAM,uBACLS,IAAK,WACLP,OACEQ,QACEN,YAAa,8BAIlBJ,MAAM,yBACLS,IAAK,aACLP,OACEQ,QACEN,YAAa,gCAIlBJ,MAAM,4BACLS,IAAK,gBACLP,OACEQ,QACEN,YAAa,mCAIlBJ,MAAM,sBACLS,IAAK,UACLP,OACEQ,QACEN,YAAa,6BAMrBL,mBAAmBY,UAAU,YAO/B,QAASH,kBAAiBI,aACxB,MAAOA,aAOT,QAASC,UAASC,YAChBA,WAAWC,IAAI,oBAAqB,SAASC,MAAOC,QAASC,SAAUC,WACrEC,QAAQC,MAAML,MAAOC,QAASC,SAAUC,aA1E5CG,QAAQZ,OAAO,sBAAuB,aAAc,YAAa,KAAM,cAAe,gBAAiB,kBAAmB,wBACvHa,OAAO1B,WACP2B,IAAIX,UAKPhB,UAAU4B,SAAW,iBAAkB,sBAwDvCjB,iBAAiBiB,SAAW,eAQ5BZ,SAASY,SAAW,iBC1EtB,WACE,YAMA,SAASC,yBAAwBC,UAAWC,SAAUC,QAASC,UAAWC,uBAUxE,QAASC,wBACP,MAAIF,WAAY,GACP,GAEDC,sBAGV,QAASE,UACPN,UAAUM,SAGZ,QAASC,QACPP,UAAUQ,OArBZ,GAAIC,IAAKC,IAETD,IAAGR,SAAWA,SACdQ,GAAGP,QAAUA,QACbO,GAAGN,UAAYA,UACfM,GAAGJ,qBAAuBA,qBAC1BI,GAAGH,OAASA,OACZG,GAAGF,KAAOA,KATZR,wBAAwBD,SAAW,YAAa,WAAY,UAAW,YAAa,yBA2BpFH,QACGZ,OAAO,sBACPL,WAAW,0BAA2BqB,4BCnC3C,WACE,YAMA,SAASY,yBAAwBC,OAAQC,QAASb,UAAWc,OAAQC,UAAWC,QAuE9E,QAASV,UACPN,UAAUM,SAGZ,QAASC,MAAKU,MACZjB,UAAUQ,OAGZ,QAASU,mBAAkB7B,OACpBoB,GAAGK,OAAOK,QACbV,GAAGK,OAAOK,UAEZV,GAAGK,OAAOK,MAAMC,MAAOC,MAAO,UAAWC,SAAU,aAGrD,QAASC,sBAAqBC,OAC5Bf,GAAGK,OAAOK,MAAMM,OAAOD,MAAO,GAGhC,QAASE,qBAAoBrC,OACtBoB,GAAGK,OAAOa,UACblB,GAAGK,OAAOa,YAEZlB,GAAGK,OAAOa,QAAQP,MAAOQ,OAAQ,YAGnC,QAASC,wBAAuBL,OAC9Bf,GAAGK,OAAOa,QAAQF,OAAOD,MAAO,GAjGlC,GAAIf,IAAKC,KAAMoB,kBAAoBjB,QAAQiB,iBAE3CrB,IAAGK,OAASA,OACZL,GAAGM,UAAYA,UACfN,GAAGO,OAASA,OACZP,GAAGH,OAASA,OACZG,GAAGF,KAAOA,KACVE,GAAGS,kBAAoBA,kBACvBT,GAAGc,qBAAuBA,qBAC1Bd,GAAGiB,oBAAsBA,oBACzBjB,GAAGoB,uBAAyBA,uBAE5BpB,GAAGsB,aACDC,QAAWC,EAAE,WACbC,KAAQD,EAAE,QACVE,GAAMF,EAAE,MACRG,GAAMH,EAAE,MACRI,SAAYJ,EAAE,YACdK,KAAQL,EAAE,aACVM,OAAUN,EAAE,WAGVH,kBAAkBU,QAAQ,QAAU,KACtC/B,GAAGsB,YAAYU,KAAOR,EAAE,SAE1BxB,GAAGiC,cACDC,QAAWV,EAAE,uBACbW,KAAQX,EAAE,oBACVY,SAAYZ,EAAE,2BACda,SAAYb,EAAE,2BACdc,KAAQd,EAAE,iCAGRH,kBAAkBU,QAAQ,UAAY,KACxC/B,GAAGiC,aAAaM,OAASf,EAAE,2BAEzBH,kBAAkBU,QAAQ,YAAc,KAC1C/B,GAAGiC,aAAaO,SAAWhB,EAAE,0BAE3BH,kBAAkBU,QAAQ,aAAe,IAAMV,kBAAkBU,QAAQ,cAAgB,MAC3F/B,GAAGiC,aAAaQ,QAAUjB,EAAE,2BAE9BxB,GAAG0C,sBACDC,MAASnB,EAAE,YACXoB,KAAQpB,EAAE,YAGZxB,GAAG6C,oBACDC,GAAMtB,EAAE,MACRuB,OAAUvB,EAAE,UACZwB,SAAYxB,EAAE,YACdyB,aAAgBzB,EAAE,oBAClB0B,QAAW1B,EAAE,WACb2B,YAAe3B,EAAE,mBAGfH,kBAAkBU,QAAQ,SAAW,KACvC/B,GAAG6C,mBAAmBO,MAAQ5B,EAAE,iBAChCxB,GAAG6C,mBAAmBQ,UAAY7B,EAAE,yBAGtCxB,GAAGsD,YACDC,KAAQ/B,EAAE,QACVgC,QAAWhC,EAAE,WACbiC,SAAYjC,EAAE,YACdkC,QAAWlC,EAAE,WACbmC,KAAQnC,EAAE,QACVoC,SAAYpC,EAAE,aArElBtB,wBAAwBb,SAAW,SAAU,UAAW,YAAa,SAAU,YAAa,UAuG5FH,QACGZ,OAAO,sBACPL,WAAW,0BAA2BiC,4BC/G3C,WACE,YAMA,SAAS2D,uBAAsBC,OAAQvE,UAAWwE,SAAUC,OAAQC,KAAMC,QAAS9F,iBAAkB+F,gBAwCnG,QAASC,IAAG9F,QACVwF,OAAOM,GAAG,eAAiB9F,QAG7B,QAAS+F,uBACPrE,GAAGjC,YAAYyB,SAAS8E,6BAA6B,gBAAkB,OACvEtE,GAAGjC,YAAYyB,SAAS+E,uBAAuB5D,KAAK,gBAGtD,QAAS6D,wBAAuBzD,OAC9B,GAAI0D,KAAMzE,GAAGjC,YAAYyB,SAAS+E,uBAAuBxD,MACzDf,IAAGjC,YAAYyB,SAAS+E,uBAAuBvD,OAAOD,MAAO,SACtDf,IAAGjC,YAAYyB,SAAS8E,6BAA6BG,KAG9D,QAASC,sBACP1E,GAAGjC,YAAYyB,SAASmF,uBAAuBhE,KAAK,IAGtD,QAASiE,uBAAsB7D,OAC7Bf,GAAGjC,YAAYyB,SAASmF,uBAAuB3D,OAAOD,MAAO,GAG/D,QAAS8D,gBAAeC,IACtB,GAAIrF,QAEJO,IAAGjC,YAAYyB,SAASuF,sBAAsBpE,SAE9ClB,QAAUuF,EAAEC,KAAKjF,GAAGjC,YAAYyB,SAASuF,uBACzCtF,QAAQyF,KAAO1D,EAAE,eACjB/B,QAAQ0F,aAEJC,SAAU,GACVC,MAAO,KAGX5F,QAAQ6F,UACNC,cAAe,SACfC,0BAA2B,SAC3BC,2BAA4B,SAC5BC,iBAAkB,UAGpBnG,UAAUoG,MACR1H,WAAY,0BACZC,aAAc,2BACdF,YAAa,0BACb4H,YAAad,GACbe,QACErG,SAAUQ,GAAGjC,YAAYyB,SACzBC,QAASA,QACTC,UAAYM,GAAGjC,YAAYyB,SAASuF,sBAAsBe,OAAO,EACjEnG,sBAAuBoG,OAAOpG,yBAKpC,QAASqG,iBAAgBpH,MAAOmC,OAC9B,GAAItB,SAAUO,GAAGjC,YAAYyB,SAASuF,sBAAsBhE,MAC5DxB,WAAUoG,MACR1H,WAAY,0BACZC,aAAc,2BACdF,YAAa,uBAAyB+C,MACtC6E,YAAahH,MACbiH,QACErG,SAAUQ,GAAGjC,YAAYyB,SACzBC,QAASA,QACTC,UAAWqB,MACXpB,sBAAuBoG,OAAOpG,yBAE/BsG,KAAK,WACNjG,GAAGjC,YAAYyB,SAASuF,sBAAsBhE,OAAStB,UAI3D,QAASyG,mBAAkBnF,OACzBf,GAAGjC,YAAYyB,SAASuF,sBAAsB/D,OAAOD,MAAO,GAG9D,QAASoF,gBACPnG,GAAGjC,YAAYyB,SAAS4G,qBAAqBC,WAAc,YAAa,QAG1E,QAASC,iBAAgB7B,WAChBzE,IAAGjC,YAAYyB,SAAS4G,qBAAqB3B,KAGtD,QAAS8B,eAAczB,IACrB,GAAIzE,SAAWmG,MAAO,MAEtBjH,WAAUoG,MACR3H,YAAa,wBACbC,WAAY,0BACZC,aAAc,eACd0H,YAAad,GACbe,QACExF,OAAQA,OACRC,UAAWA,UACXC,OAAQP,GAAGjC,YAAYyB,SAAS4G,wBAEjCH,KAAK,WACDjG,GAAGjC,YAAYyB,SAASiH,mBAC3BzG,GAAGjC,YAAYyB,SAASiH,qBAC1BzG,GAAGjC,YAAYyB,SAASiH,iBAAiB9F,KAAKN,UAIlD,QAASqG,gBAAe5B,GAAI/D,OAC1B,GAAIV,QAASnB,QAAQyH,KAAK3G,GAAGjC,YAAYyB,SAASiH,iBAAiB1F,OAEnExB,WAAUoG,MACR3H,YAAa,qBAAuB+C,MACpC9C,WAAY,0BACZC,aAAc,eACd0H,YAAa,KACbC,QACExF,OAAQA,OACRC,UAAWA,UACXC,OAAQP,GAAGjC,YAAYyB,SAAS4G,wBAEjCH,KAAK,WACNjG,GAAGjC,YAAYyB,SAASiH,iBAAiB1F,OAASV,SAItD,QAASuG,kBAAiB7F,OACxBf,GAAGjC,YAAYyB,SAASiH,iBAAiBzF,OAAOD,MAAO,GAGzD,QAAS8F,4BACP,GAAIC,KAEA5H,SAAQ6H,UAAU/G,GAAGjC,YAAYyB,SAASwH,SAASC,2BACrDH,EAAI9G,GAAGjC,YAAYyB,SAASwH,SAASC,wBAAwBC,MAAM,MAGrElH,GAAGjC,YAAYyB,SAASwH,SAASC,wBAA2BjC,EAAEmC,MAAMpB,OAAOqB,sBAAsBF,MAAM,KAAMJ,GAAIO,KAAK,KAGxH,QAASvH,QACP,GAAIwH,WAAW,CAGf,IAAIvB,OAAOwB,mBAAqB,GAC5BrI,QAAQ6H,UAAU/G,GAAGjC,YAAYyB,SAASgI,UAC1CxH,GAAGjC,YAAYyB,SAASgI,QAAQC,SAChCvI,QAAQ6H,UAAU/G,GAAGjC,YAAYyB,SAASgI,QAAQE,gBAAiB,CAErE,GAAIC,WAAY3H,GAAGjC,YAAYyB,SAASgI,QAAQE,eAAeR,MAAM,KAGjEU,iBAAmB7B,OAAOqB,sBAAsBF,MAAM,OACtDW,UAEJ7C,GAAE8C,QAAQF,iBAAkB,SAASG,KACnC,GAAIC,QAASD,IAAIb,MAAM,KAAK,EACxBc,SACFH,QAAQlH,KAAKqH,OAAOC,gBAKxB,KAAK,GAAIC,GAAI,EAAGA,EAAIP,UAAU7B,QAAUwB,SAAUY,IAAK,CACrD,GAAIF,QAASL,UAAUO,GAAGhB,MAAM,KAAK,GAAGe,aACpCJ,SAAQ9F,QAAQiG,QAAU,GAAkC,GAA7BjC,OAAOwB,oBACxCvD,OAAOmE,MAAM3G,EAAE,SAAUA,EAAE,+EAC3B8F,UAAW,GAEJO,QAAQ9F,QAAQiG,SAAW,GAAkC,GAA7BjC,OAAOwB,qBAC9CvD,OAAOmE,MAAM3G,EAAE,SAAUA,EAAE,+EAC3B8F,UAAW,IAKbA,UACFtH,GAAGjC,YAAYqK,QAAQnC,KAAK,SAASoC,MAC/BtE,SAAS4B,KACP5B,SAASuE,SACNC,QAAQ/G,EAAE,sBACVgH,SAAS,aACTC,UAAU,QAKzB,QAASC,qBACP,MAAI1I,IAAG2I,UAAUC,aAAe5I,GAAG2I,UAAUC,YAAY9C,OAAS,GAC9D9F,GAAG2I,UAAUE,yBAA2B7I,GAAG2I,UAAUE,wBAAwB/C,QAC7E9F,GAAG2I,UAAUC,aAAe5I,GAAG2I,UAAUE,yBACpC,GAEF,EAGT,QAASC,kBACP3E,eAAe2E,eAAe9I,GAAG2I,UAAUC,aAAa3C,KAAK,WAC3D,GAAIkC,OAAQ5I,UAAU4I,OACpBY,MAAOvH,EAAE,YACT+G,QAAS/G,EAAE,0CACXwH,GAAI,MAENzJ,WAAUoG,KAAMwC,OAAhB5I,WACW,WACP4I,MAAQc,UAEX,SAASC,KACV,GAAIf,OAAQ5I,UAAU4I,OACpBY,MAAOvH,EAAE,YACT+G,QAASW,IACTF,GAAI,MAENzJ,WAAUoG,KAAMwC,OAAhB5I,WACW,WACP4I,MAAQc,WAKhB,QAASE,qBAAoB9I,QAC3B,MAAO2E,GAAE3E,OAAOL,GAAGoJ,cAAe,SAASC,OACzC,MAAOA,OAAMC,cAAcvH,QAAQ1B,OAAOiJ,gBAAkB,IApQhE,GAAe7J,SAAXO,GAAKC,KAAeK,YAExBN,IAAGjC,YAAcK,iBACjB4B,GAAG2I,WAAcC,YAAa,KAAMC,wBAAyB,MAE7D7I,GAAGoE,GAAKA,GACRpE,GAAGqE,oBAAsBA,oBACzBrE,GAAGwE,uBAAyBA,uBAC5BxE,GAAG0E,mBAAqBA,mBACxB1E,GAAG4E,sBAAwBA,sBAC3B5E,GAAG6E,eAAiBA,eACpB7E,GAAGgG,gBAAkBA,gBACrBhG,GAAGkG,kBAAoBA,kBACvBlG,GAAGmG,aAAeA,aAClBnG,GAAGsG,gBAAkBA,gBACrBtG,GAAGuG,cAAgBA,cACnBvG,GAAG0G,eAAiBA,eACpB1G,GAAG4G,iBAAmBA,iBACtB5G,GAAG6G,yBAA2BA,yBAC9B7G,GAAGuJ,WAAatF,KAAKuF,QACrBxJ,GAAGF,KAAOA,KACVE,GAAG0I,kBAAoBA,kBACvB1I,GAAG8I,eAAiBA,eACpB9I,GAAGoJ,cAAgBrD,OAAOqD,cAC1BpJ,GAAGmJ,oBAAsBA,oBACzBnJ,GAAGyJ,oBAAsB,GAIzBhK,QAAU,GAAIyE,UAAUwF,GAAI,IAC5BjK,QAAQkK,gBAAgB1D,KAAK,WAI3B,IAHA,GAAI2D,cAAenK,QAAQoK,mBAAmBC,KAAK,IAC/C/I,MAAQ,GACR+E,OAAS8D,aAAa9D,SACjB/E,MAAQ+E,QACfxF,UAAUK,KAAKiJ,aAAa7I,UArClC8C,sBAAsBxE,SAAW,SAAU,YAAa,WAAY,SAAU,OAAQ,UAAW,mBAAoB,kBA2QrHH,QACGZ,OAAO,sBACPL,WAAW,wBAAyB4F","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoPreferences */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.PreferencesUI', ['ngSanitize', 'ui.router', 'ck', 'SOGo.Common', 'SOGo.MailerUI', 'SOGo.ContactsUI', 'SOGo.Authentication'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('preferences', {\n        abstract: true,\n        views: {\n          preferences: {\n            templateUrl: 'preferences.html',\n            controller: 'PreferencesController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          statePreferences: statePreferences\n        }\n      })\n      .state('preferences.general', {\n        url: '/general',\n        views: {\n          module: {\n            templateUrl: 'generalPreferences.html'\n          }\n        }\n      })\n      .state('preferences.calendars', {\n        url: '/calendars',\n        views: {\n          module: {\n            templateUrl: 'calendarsPreferences.html'\n          }\n        }\n      })\n      .state('preferences.addressbooks', {\n        url: '/addressbooks',\n        views: {\n          module: {\n            templateUrl: 'addressbooksPreferences.html'\n          }\n        }\n      })\n      .state('preferences.mailer', {\n        url: '/mailer',\n        views: {\n          module: {\n            templateUrl: 'mailerPreferences.html'\n          }\n        }\n      });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/general');\n  }\n\n  /**\n   * @ngInject\n   */\n  statePreferences.$inject = ['Preferences'];\n  function statePreferences(Preferences) {\n    return Preferences;\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope'];\n  function runBlock($rootScope) {\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      console.error(event, current, previous, rejection);\n    });\n  }\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoPreferences */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AccountDialogController.$inject = ['$mdDialog', 'defaults', 'account', 'accountId', 'mailCustomFromEnabled'];\n  function AccountDialogController($mdDialog, defaults, account, accountId, mailCustomFromEnabled) {\n    var vm = this;\n\n    vm.defaults = defaults;\n    vm.account = account;\n    vm.accountId = accountId;\n    vm.customFromIsReadonly = customFromIsReadonly;\n    vm.cancel = cancel;\n    vm.save = save;\n\n    function customFromIsReadonly() {\n      if (accountId > 0)\n        return false;\n\n      return !mailCustomFromEnabled;\n    }\n\n    function cancel() {\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      $mdDialog.hide();\n    }\n  }\n\n  angular\n    .module('SOGo.PreferencesUI')\n    .controller('AccountDialogController', AccountDialogController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoPreferences */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  FiltersDialogController.$inject = ['$scope', '$window', '$mdDialog', 'filter', 'mailboxes', 'labels'];\n  function FiltersDialogController($scope, $window, $mdDialog, filter, mailboxes, labels) {\n    var vm = this, sieveCapabilities = $window.sieveCapabilities;\n\n    vm.filter = filter;\n    vm.mailboxes = mailboxes;\n    vm.labels = labels;\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.addMailFilterRule = addMailFilterRule;\n    vm.removeMailFilterRule = removeMailFilterRule;\n    vm.addMailFilterAction = addMailFilterAction;\n    vm.removeMailFilterAction = removeMailFilterAction;\n\n    vm.fieldLabels = {\n      \"subject\": l(\"Subject\"),\n      \"from\": l(\"From\"),\n      \"to\": l(\"To\"),\n      \"cc\": l(\"Cc\"),\n      \"to_or_cc\": l(\"To or Cc\"),\n      \"size\": l(\"Size (Kb)\"),\n      \"header\": l(\"Header\")\n    };\n\n    if (sieveCapabilities.indexOf(\"body\") > -1)\n      vm.fieldLabels.body = l(\"Body\");\n\n    vm.methodLabels = {\n      \"discard\": l(\"Discard the message\"),\n      \"keep\": l(\"Keep the message\"),\n      \"redirect\": l(\"Forward the message to:\"),\n      \"vacation\": l(\"Send a vacation message\"),\n      \"stop\": l(\"Stop processing filter rules\")\n    };\n\n    if (sieveCapabilities.indexOf(\"reject\") > -1)\n      vm.methodLabels.reject = l(\"Send a reject message:\");\n\n    if (sieveCapabilities.indexOf(\"fileinto\") > -1)\n      vm.methodLabels.fileinto = l(\"File the message in:\");\n\n    if (sieveCapabilities.indexOf(\"imapflags\") > -1 || sieveCapabilities.indexOf(\"imap4flags\") > -1)\n      vm.methodLabels.addflag = l(\"Flag the message with:\");\n\n    vm.numberOperatorLabels = {\n      \"under\": l(\"is under\"),\n      \"over\": l(\"is over\")\n    };\n\n    vm.textOperatorLabels = {\n      \"is\": l(\"is\"),\n      \"is_not\": l(\"is not\"),\n      \"contains\": l(\"contains\"),\n      \"contains_not\": l(\"does not contain\"),\n      \"matches\": l(\"matches\"),\n      \"matches_not\": l(\"does not match\")\n    };\n\n    if (sieveCapabilities.indexOf(\"regex\") > -1) {\n      vm.textOperatorLabels.regex = l(\"matches regex\");\n      vm.textOperatorLabels.regex_not = l(\"does not match regex\");\n    }\n\n    vm.flagLabels = {\n      \"seen\": l(\"Seen\"),\n      \"deleted\": l(\"Deleted\"),\n      \"answered\": l(\"Answered\"),\n      \"flagged\": l(\"Flagged\"),\n      \"junk\": l(\"Junk\"),\n      \"not_junk\": l(\"Not Junk\")\n    };\n    \n    function cancel() {\n      $mdDialog.cancel();\n    }\n    \n    function save(form) {\n      $mdDialog.hide();\n    }\n    \n    function addMailFilterRule(event) {\n      if (!vm.filter.rules)\n        vm.filter.rules = [];\n\n      vm.filter.rules.push({ field: 'subject', operator: 'contains' });\n    }\n    \n    function removeMailFilterRule(index) {\n      vm.filter.rules.splice(index, 1);\n    }\n    \n    function addMailFilterAction(event) {\n      if (!vm.filter.actions)\n        vm.filter.actions = [];\n\n      vm.filter.actions.push({ method: 'discard' });\n    }\n    \n    function removeMailFilterAction(index) {\n      vm.filter.actions.splice(index, 1);\n    }\n  }\n\n  angular\n    .module('SOGo.PreferencesUI')\n    .controller('FiltersDialogController', FiltersDialogController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoPreferences */\n\n(function() {\n  'use strict';\n  \n  /**\n   * @ngInject\n   */\n  PreferencesController.$inject = ['$state', '$mdDialog', '$mdToast', 'Dialog', 'User', 'Account', 'statePreferences', 'Authentication'];\n  function PreferencesController($state, $mdDialog, $mdToast, Dialog, User, Account, statePreferences, Authentication) {\n    var vm = this, account, mailboxes = [];\n\n    vm.preferences = statePreferences;\n    vm.passwords = { newPassword: null, newPasswordConfirmation: null };\n\n    vm.go = go;\n    vm.addCalendarCategory = addCalendarCategory;\n    vm.removeCalendarCategory = removeCalendarCategory;\n    vm.addContactCategory = addContactCategory;\n    vm.removeContactCategory = removeContactCategory;\n    vm.addMailAccount = addMailAccount;\n    vm.editMailAccount = editMailAccount;\n    vm.removeMailAccount = removeMailAccount;\n    vm.addMailLabel = addMailLabel;\n    vm.removeMailLabel = removeMailLabel;\n    vm.addMailFilter = addMailFilter;\n    vm.editMailFilter = editMailFilter;\n    vm.removeMailFilter = removeMailFilter;\n    vm.addDefaultEmailAddresses = addDefaultEmailAddresses;\n    vm.userFilter = User.$filter;\n    vm.save = save;\n    vm.canChangePassword = canChangePassword;\n    vm.changePassword = changePassword;\n    vm.timeZonesList = window.timeZonesList;\n    vm.timeZonesListFilter = timeZonesListFilter;\n    vm.timeZonesSearchText = '';\n\n    // Fetch a flatten version of the mailboxes list of the main account (0)\n    // This list will be forwarded to the Sieve filter controller\n    account = new Account({ id: 0 });\n    account.$getMailboxes().then(function() {\n      var allMailboxes = account.$flattenMailboxes({all: true}),\n          index = -1,\n          length = allMailboxes.length;\n      while (++index < length) {\n        mailboxes.push(allMailboxes[index]);\n      }\n    });\n\n    function go(module) {\n      $state.go('preferences.' + module);\n    }\n\n    function addCalendarCategory() {\n      vm.preferences.defaults.SOGoCalendarCategoriesColors[\"New category\"] = \"#aaa\";\n      vm.preferences.defaults.SOGoCalendarCategories.push(\"New category\");\n    }\n\n    function removeCalendarCategory(index) {\n      var key = vm.preferences.defaults.SOGoCalendarCategories[index];\n      vm.preferences.defaults.SOGoCalendarCategories.splice(index, 1);\n      delete vm.preferences.defaults.SOGoCalendarCategoriesColors[key];\n    }\n\n    function addContactCategory() {\n      vm.preferences.defaults.SOGoContactsCategories.push(\"\");\n    }\n\n    function removeContactCategory(index) {\n      vm.preferences.defaults.SOGoContactsCategories.splice(index, 1);\n    }\n\n    function addMailAccount(ev) {\n      var account;\n\n      vm.preferences.defaults.AuxiliaryMailAccounts.push({});\n\n      account = _.last(vm.preferences.defaults.AuxiliaryMailAccounts);\n      account.name = l(\"New account\");\n      account.identities = [\n        {\n          fullName: \"\",\n          email: \"\"\n        }\n      ];\n      account.receipts = {\n        receiptAction: \"ignore\",\n        receiptNonRecipientAction: \"ignore\",\n        receiptOutsideDomainAction: \"ignore\",\n        receiptAnyAction: \"ignore\"\n      };\n\n      $mdDialog.show({\n        controller: 'AccountDialogController',\n        controllerAs: '$AccountDialogController',\n        templateUrl: 'editAccount?account=new',\n        targetEvent: ev,\n        locals: {\n          defaults: vm.preferences.defaults,\n          account: account,\n          accountId: (vm.preferences.defaults.AuxiliaryMailAccounts.length-1),\n          mailCustomFromEnabled: window.mailCustomFromEnabled\n        }\n      });\n    }\n\n    function editMailAccount(event, index) {\n      var account = vm.preferences.defaults.AuxiliaryMailAccounts[index];\n      $mdDialog.show({\n        controller: 'AccountDialogController',\n        controllerAs: '$AccountDialogController',\n        templateUrl: 'editAccount?account=' + index,\n        targetEvent: event,\n        locals: {\n          defaults: vm.preferences.defaults,\n          account: account,\n          accountId: index,\n          mailCustomFromEnabled: window.mailCustomFromEnabled\n        }\n      }).then(function() {\n        vm.preferences.defaults.AuxiliaryMailAccounts[index] = account;\n      });\n    }\n\n    function removeMailAccount(index) {\n      vm.preferences.defaults.AuxiliaryMailAccounts.splice(index, 1);\n    }\n    \n    function addMailLabel() {\n      vm.preferences.defaults.SOGoMailLabelsColors.new_label =  [\"New label\", \"#aaa\"];\n    }\n\n    function removeMailLabel(key) {\n      delete vm.preferences.defaults.SOGoMailLabelsColors[key];\n    }\n\n    function addMailFilter(ev) {\n      var filter = { match: 'all' };\n\n      $mdDialog.show({\n        templateUrl: 'editFilter?filter=new',\n        controller: 'FiltersDialogController',\n        controllerAs: 'filterEditor',\n        targetEvent: ev,\n        locals: {\n          filter: filter,\n          mailboxes: mailboxes,\n          labels: vm.preferences.defaults.SOGoMailLabelsColors\n        }\n      }).then(function() {\n        if (!vm.preferences.defaults.SOGoSieveFilters)\n          vm.preferences.defaults.SOGoSieveFilters = [];\n        vm.preferences.defaults.SOGoSieveFilters.push(filter);\n      });\n    }\n    \n    function editMailFilter(ev, index) {\n      var filter = angular.copy(vm.preferences.defaults.SOGoSieveFilters[index]);\n      \n      $mdDialog.show({\n        templateUrl: 'editFilter?filter=' + index,\n        controller: 'FiltersDialogController',\n        controllerAs: 'filterEditor',\n        targetEvent: null,\n        locals: {\n          filter: filter,\n          mailboxes: mailboxes,\n          labels: vm.preferences.defaults.SOGoMailLabelsColors\n        }\n      }).then(function() {\n        vm.preferences.defaults.SOGoSieveFilters[index] = filter;\n      });\n    }\n\n    function removeMailFilter(index) {\n      vm.preferences.defaults.SOGoSieveFilters.splice(index, 1);\n    }\n\n    function addDefaultEmailAddresses() {\n      var v = [];\n\n      if (angular.isDefined(vm.preferences.defaults.Vacation.autoReplyEmailAddresses)) {\n        v = vm.preferences.defaults.Vacation.autoReplyEmailAddresses.split(',');\n      }\n\n      vm.preferences.defaults.Vacation.autoReplyEmailAddresses = (_.union(window.defaultEmailAddresses.split(','), v)).join(',');\n    }\n    \n    function save() {\n      var sendForm = true;\n\n      // We do some sanity checks\n      if (window.forwardConstraints > 0 &&\n          angular.isDefined(vm.preferences.defaults.Forward) &&\n          vm.preferences.defaults.Forward.enabled &&\n          angular.isDefined(vm.preferences.defaults.Forward.forwardAddress)) {\n\n        var addresses = vm.preferences.defaults.Forward.forwardAddress.split(\",\");\n\n        // We first extract the list of 'known domains' to SOGo\n        var defaultAddresses = window.defaultEmailAddresses.split(/, */);\n        var domains = [];\n\n        _.forEach(defaultAddresses, function(adr) {\n          var domain = adr.split(\"@\")[1];\n          if (domain) {\n            domains.push(domain.toLowerCase());\n          }\n        });\n\n        // We check if we're allowed or not to forward based on the domain defaults\n        for (var i = 0; i < addresses.length && sendForm; i++) {\n          var domain = addresses[i].split(\"@\")[1].toLowerCase();\n          if (domains.indexOf(domain) < 0 && window.forwardConstraints == 1) {\n            Dialog.alert(l('Error'), l(\"You are not allowed to forward your messages to an external email address.\"));\n            sendForm = false;\n          }\n          else if (domains.indexOf(domain) >= 0 && window.forwardConstraints == 2) {\n            Dialog.alert(l('Error'), l(\"You are not allowed to forward your messages to an internal email address.\"));\n            sendForm = false;\n          }\n        }\n      }\n\n      if (sendForm)\n        vm.preferences.$save().then(function(data) {\n              $mdToast.show(\n                $mdToast.simple()\n                  .content(l('Preferences saved'))\n                  .position('top right')\n                  .hideDelay(3000)\n              );\n        });\n    }\n\n    function canChangePassword() {\n      if (vm.passwords.newPassword && vm.passwords.newPassword.length > 0 &&\n          vm.passwords.newPasswordConfirmation && vm.passwords.newPasswordConfirmation.length &&\n          vm.passwords.newPassword == vm.passwords.newPasswordConfirmation)\n        return true;\n\n      return false;\n    }\n    \n    function changePassword() {\n      Authentication.changePassword(vm.passwords.newPassword).then(function() {\n        var alert = $mdDialog.alert({\n          title: l('Password'),\n          content: l('The password was changed successfully.'),\n          ok: 'OK'\n        });\n        $mdDialog.show( alert )\n          .finally(function() {\n            alert = undefined;\n          });\n      }, function(msg) {\n        var alert = $mdDialog.alert({\n          title: l('Password'),\n          content: msg,\n          ok: 'OK'\n        });\n        $mdDialog.show( alert )\n          .finally(function() {\n            alert = undefined;\n          });\n      });\n    }\n\n    function timeZonesListFilter(filter) {\n      return _.filter(vm.timeZonesList, function(value) {\n        return value.toUpperCase().indexOf(filter.toUpperCase()) >= 0;\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.PreferencesUI')\n    .controller('PreferencesController', PreferencesController);\n\n})();\n"]}