{"version":3,"sources":["Preferences/Preferences.app.js","Preferences/AccountDialogController.js","Preferences/FiltersDialogController.js","Preferences/PreferencesController.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","abstract","views","preferences","templateUrl","controller","controllerAs","url","module","otherwise","runBlock","$rootScope","$on","event","current","previous","rejection","console","error","angular","config","run","$inject","AccountDialogController","$timeout","$mdDialog","FileUploader","Dialog","Settings","Account","defaults","account","accountId","mailCustomFromEnabled","_loadCertificate","vm","security","hasCertificate","accountObject","$certificate","then","crt","certificate","filterByExtension","item","isP12File","type","indexOf","test","name","form","certificateFilename","$setValidity","customFromIsReadonly","importCertificate","uploader","queue","formData","password","certificatePassword","uploadItem","onBeforeUploadCertificate","clearQueue","removeCertificate","$removeCertificate","cancel","save","hide","this","id","defaultPort","hostnameRE","encryption","activeUser","join","autoUpload","queueLimit","filters","fn","onAfterAddingFile","file","onSuccessItem","response","status","headers","_","assign","onErrorItem","alert","l","FiltersDialogController","$scope","$window","filter","mailboxes","labels","hasRulesAndActions","requirements","actions","match","push","rules","every","a","length","addMailFilterRule","field","operator","removeMailFilterRule","index","splice","addMailFilterAction","method","removeMailFilterAction","sieveCapabilities","forwardEnabled","vacationEnabled","fieldLabels","subject","from","to","cc","to_or_cc","size","header","body","methodLabels","discard","keep","stop","redirect","reject","fileinto","addflag","numberOperatorLabels","under","over","textOperatorLabels","is","is_not","contains","contains_not","matches","matches_not","regex","regex_not","flagLabels","seen","deleted","answered","flagged","junk","not_junk","PreferencesController","$q","$state","$mdMedia","$mdSidenav","$mdToast","sgSettings","focus","User","Preferences","Authentication","today","Date","beginOfDay","$onInit","passwords","newPassword","newPasswordConfirmation","timeZonesList","timeZonesSearchText","sieveVariablesCapability","mailLabelKeyRE","RegExp","mail","$getMailboxes","allMailboxes","$flattenMailboxes","all","SOGoAlternateAvatar","$alternateAvatar","updateVacationDates","go","$valid","close","onLanguageChange","confirm","ok","quick","location","reload","addCalendarCategory","SOGoCalendarCategoriesColors","SOGoCalendarCategories","$setDirty","removeCalendarCategory","key","addContactCategory","i","SOGoContactsCategories","removeContactCategory","addMailAccount","ev","AuxiliaryMailAccounts","last","extend","isNew","identities","fullName","email","receipts","receiptAction","receiptNonRecipientAction","receiptOutsideDomainAction","receiptAnyAction","show","targetEvent","locals","catch","pop","editMailAccount","removeMailAccount","resetMailLabelValidity","addMailLabel","guid","SOGoMailLabelsColorsKeys","SOGoMailLabelsColorsValues","removeMailLabel","addMailFilter","active","SOGoMailLabelsColors","SOGoSieveFilters","editMailFilter","copy","removeMailFilter","addDefaultEmailAddresses","v","isDefined","Vacation","autoReplyEmailAddresses","split","union","defaultEmailAddresses","userFilter","search","excludedUsers","minimumSearchLength","$filter","users","forEach","user","$$image","image","avatar","c_email","no_404","confirmChanges","$event","target","$dirty","preventDefault","stopPropagation","tagName","parentNode","href","options","sendForm","addresses","defaultAddresses","domains","domain","forwardConstraints","Forward","enabled","forwardAddress","adr","toLowerCase","uniq","value","keys","$save","data","simple","content","position","hideDelay","$setPristine","canChangePassword","changePassword","title","finally","undefined","msg","timeZonesListFilter","toUpperCase","d","toggleVacationStartDate","toggleVacationEndDate","startDateEnabled","endDateEnabled","startDate","getTime","endDate","addDays","validateVacationStartDate","date","r","validateVacationEndDate"],"mappings":"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","file":"Preferences.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoPreferences */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.PreferencesUI', ['ui.router', 'ck', 'angularFileUpload', 'SOGo.Common', 'SOGo.MailerUI', 'SOGo.ContactsUI', 'SOGo.Authentication', 'as.sortable'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('preferences', {\n        abstract: true,\n        views: {\n          preferences: {\n            templateUrl: 'preferences.html',\n            controller: 'PreferencesController',\n            controllerAs: 'app'\n          }\n        }\n      })\n      .state('preferences.general', {\n        url: '/general',\n        views: {\n          module: {\n            templateUrl: 'generalPreferences.html'\n          }\n        }\n      })\n      .state('preferences.calendars', {\n        url: '/calendars',\n        views: {\n          module: {\n            templateUrl: 'calendarsPreferences.html'\n          }\n        }\n      })\n      .state('preferences.addressbooks', {\n        url: '/addressbooks',\n        views: {\n          module: {\n            templateUrl: 'addressbooksPreferences.html'\n          }\n        }\n      })\n      .state('preferences.mailer', {\n        url: '/mailer',\n        views: {\n          module: {\n            templateUrl: 'mailerPreferences.html'\n          }\n        }\n      });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/general');\n  }\n\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope'];\n  function runBlock($rootScope) {\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      console.error(event, current, previous, rejection);\n    });\n  }\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoPreferences */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AccountDialogController.$inject = ['$timeout', '$mdDialog', 'FileUploader', 'Dialog', 'sgSettings', 'Account', 'defaults', 'account', 'accountId', 'mailCustomFromEnabled'];\n  function AccountDialogController($timeout, $mdDialog, FileUploader, Dialog, Settings, Account, defaults, account, accountId, mailCustomFromEnabled) {\n    var vm = this,\n        accountObject = new Account({ id: accountId, security: account.security });\n\n    vm.defaultPort = 143;\n    vm.defaults = defaults;\n    vm.account = account;\n    vm.accountId = accountId;\n    vm.customFromIsReadonly = customFromIsReadonly;\n    vm.onBeforeUploadCertificate = onBeforeUploadCertificate;\n    vm.removeCertificate = removeCertificate;\n    vm.importCertificate = importCertificate;\n    vm.cancel = cancel;\n    vm.save = save;\n    vm.hostnameRE = accountId > 0 ? /^(?!(127\\.0\\.0\\.1|localhost(?:\\.localdomain)?)$)/ : /./;\n\n    if (!vm.account.encryption)\n      vm.account.encryption = \"none\";\n    else if (vm.account.encryption == \"ssl\")\n      vm.defaultPort = 993;\n\n    _loadCertificate();\n\n    vm.uploader = new FileUploader({\n      url: [Settings.activeUser('folderURL') + 'Mail', accountId, 'importCertificate'].join('/'),\n      autoUpload: false,\n      queueLimit: 1,\n      filters: [{ name: filterByExtension, fn: filterByExtension }],\n      onAfterAddingFile: function(item) {\n        vm.certificateFilename = item.file.name;\n      },\n      onSuccessItem: function(item, response, status, headers) {\n        this.clearQueue();\n        $timeout(function() {\n          _.assign(vm.account, {security: {hasCertificate: true}});\n        });\n        _loadCertificate();\n      },\n      onErrorItem: function(item, response, status, headers) {\n        Dialog.alert(l('Error'), l('An error occurred while importing the certificate. Verify your password.'));\n      }\n    });\n\n    function _loadCertificate() {\n      if (vm.account.security && vm.account.security.hasCertificate)\n        accountObject.$certificate().then(function(crt) {\n          vm.certificate = crt;\n        }, function() {\n          delete vm.account.security.hasCertificate;\n        });\n    }\n\n    function filterByExtension(item) {\n      var isP12File = item.type.indexOf('pkcs12') > 0 || /\\.(p12|pfx)$/.test(item.name);\n      vm.form.certificateFilename.$setValidity('fileformat', isP12File);\n      return isP12File;\n    }\n\n    function customFromIsReadonly() {\n      if (accountId > 0)\n        return false;\n      return !mailCustomFromEnabled;\n    }\n\n    function importCertificate() {\n      vm.uploader.queue[0].formData = [{ password: vm.certificatePassword }];\n      vm.uploader.uploadItem(0);\n    }\n\n    function onBeforeUploadCertificate(form) {\n      vm.form = form;\n      vm.uploader.clearQueue();\n    }\n\n    function removeCertificate() {\n      accountObject.$removeCertificate().then(function() {\n        delete vm.account.security.hasCertificate;\n      });\n    }\n\n    function cancel() {\n      $mdDialog.cancel();\n    }\n\n    function save() {\n      $mdDialog.hide();\n    }\n  }\n\n  angular\n    .module('SOGo.PreferencesUI')\n    .controller('AccountDialogController', AccountDialogController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoPreferences */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  FiltersDialogController.$inject = ['$scope', '$window', '$mdDialog', 'filter', 'mailboxes', 'labels'];\n  function FiltersDialogController($scope, $window, $mdDialog, filter, mailboxes, labels) {\n    var vm = this,\n        sieveCapabilities = $window.sieveCapabilities,\n        forwardEnabled = $window.forwardEnabled,\n        vacationEnabled = $window.vacationEnabled;\n\n    vm.filter = filter;\n    vm.mailboxes = mailboxes;\n    vm.labels = labels;\n    vm.cancel = cancel;\n    vm.hasRulesAndActions = hasRulesAndActions;\n    vm.save = save;\n    vm.addMailFilterRule = addMailFilterRule;\n    vm.removeMailFilterRule = removeMailFilterRule;\n    vm.addMailFilterAction = addMailFilterAction;\n    vm.removeMailFilterAction = removeMailFilterAction;\n\n    vm.fieldLabels = {\n      \"subject\": l(\"Subject\"),\n      \"from\": l(\"From\"),\n      \"to\": l(\"To\"),\n      \"cc\": l(\"Cc\"),\n      \"to_or_cc\": l(\"To or Cc\"),\n      \"size\": l(\"Size (Kb)\"),\n      \"header\": l(\"Header\")\n    };\n\n    if (sieveCapabilities.indexOf(\"body\") > -1)\n      vm.fieldLabels.body = l(\"Body\");\n\n    vm.methodLabels = {\n      \"discard\": l(\"Discard the message\"),\n      \"keep\": l(\"Keep the message\"),\n      \"stop\": l(\"Stop processing filter rules\")\n    };\n\n    if (forwardEnabled)\n      vm.methodLabels.redirect = l(\"Forward the message to\");\n\n    //if (vacationEnabled)\n    //  vm.methodLabels.vacation = l(\"Send a vacation message\");\n\n    if (sieveCapabilities.indexOf(\"reject\") > -1)\n      vm.methodLabels.reject = l(\"Send a reject message\");\n\n    if (sieveCapabilities.indexOf(\"fileinto\") > -1)\n      vm.methodLabels.fileinto = l(\"File the message in\");\n\n    if (sieveCapabilities.indexOf(\"imapflags\") > -1 || sieveCapabilities.indexOf(\"imap4flags\") > -1)\n      vm.methodLabels.addflag = l(\"Flag the message with\");\n\n    vm.numberOperatorLabels = {\n      \"under\": l(\"is under\"),\n      \"over\": l(\"is over\")\n    };\n\n    vm.textOperatorLabels = {\n      \"is\": l(\"is\"),\n      \"is_not\": l(\"is not\"),\n      \"contains\": l(\"contains\"),\n      \"contains_not\": l(\"does not contain\"),\n      \"matches\": l(\"matches\"),\n      \"matches_not\": l(\"does not match\")\n    };\n\n    if (sieveCapabilities.indexOf(\"regex\") > -1) {\n      vm.textOperatorLabels.regex = l(\"matches regex\");\n      vm.textOperatorLabels.regex_not = l(\"does not match regex\");\n    }\n\n    vm.flagLabels = {\n      \"seen\": l(\"Seen\"),\n      \"deleted\": l(\"Deleted\"),\n      \"answered\": l(\"Answered\"),\n      \"flagged\": l(\"Flagged\"),\n      \"junk\": l(\"Junk\"),\n      \"not_junk\": l(\"Not Junk\")\n    };\n    \n    function cancel() {\n      $mdDialog.cancel();\n    }\n\n    function hasRulesAndActions() {\n      var requirements = [ vm.filter.actions ];\n      if (vm.filter.match != 'allmessages')\n        // When matching all messages, no rules are required\n        requirements.push(vm.filter.rules);\n      return _.every(requirements, function(a) {\n        return a && a.length > 0;\n      });\n    }\n    \n    function save(form) {\n      $mdDialog.hide();\n    }\n\n    function addMailFilterRule(event) {\n      if (!vm.filter.rules)\n        vm.filter.rules = [];\n\n      vm.filter.rules.push({ field: 'subject', operator: 'contains' });\n    }\n    \n    function removeMailFilterRule(index) {\n      vm.filter.rules.splice(index, 1);\n    }\n    \n    function addMailFilterAction(event) {\n      if (!vm.filter.actions)\n        vm.filter.actions = [];\n\n      vm.filter.actions.push({ method: 'discard' });\n    }\n    \n    function removeMailFilterAction(index) {\n      vm.filter.actions.splice(index, 1);\n    }\n  }\n\n  angular\n    .module('SOGo.PreferencesUI')\n    .controller('FiltersDialogController', FiltersDialogController);\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoPreferences */\n\n(function() {\n  'use strict';\n  \n  /**\n   * @ngInject\n   */\n  PreferencesController.$inject = ['$q', '$window', '$state', '$mdMedia', '$mdSidenav', '$mdDialog', '$mdToast', 'sgSettings', 'sgFocus', 'Dialog', 'User', 'Account', 'Preferences', 'Authentication'];\n  function PreferencesController($q, $window, $state, $mdMedia, $mdSidenav, $mdDialog, $mdToast, sgSettings, focus, Dialog, User, Account, Preferences, Authentication) {\n    var vm = this, account, mailboxes = [], today = new Date().beginOfDay();\n\n    this.$onInit = function() {\n      this.preferences = Preferences;\n      this.passwords = { newPassword: null, newPasswordConfirmation: null };\n      this.timeZonesList = $window.timeZonesList;\n      this.timeZonesSearchText = '';\n      this.sieveVariablesCapability = ($window.sieveCapabilities.indexOf('variables') >= 0);\n      this.mailLabelKeyRE = new RegExp(\"^[^(){} %*\\\"\\\\\\\\]*$\");\n\n\n      if (sgSettings.activeUser('path').mail) {\n        // Fetch a flatten version of the mailboxes list of the main account (0)\n        // This list will be forwarded to the Sieve filter controller\n        account = new Account({ id: 0 });\n        account.$getMailboxes().then(function() {\n          var allMailboxes = account.$flattenMailboxes({all: true}),\n              index = -1,\n              length = allMailboxes.length;\n          while (++index < length) {\n            mailboxes.push(allMailboxes[index]);\n          }\n        });\n      }\n\n      // Set alternate avatar in User service\n      if (Preferences.defaults.SOGoAlternateAvatar)\n        User.$alternateAvatar = Preferences.defaults.SOGoAlternateAvatar;\n\n      this.updateVacationDates();\n    };\n\n    this.go = function(module, form) {\n      if (form.$valid) {\n        // Close sidenav on small devices\n        if (!$mdMedia('gt-sm'))\n          $mdSidenav('left').close();\n        $state.go('preferences.' + module);\n      }\n    };\n\n    this.onLanguageChange = function(form) {\n      if (form.$valid)\n        Dialog.confirm(l('Warning'),\n                       l('Save preferences and reload page now?'),\n                       {ok: l('Yes'), cancel: l('No')})\n        .then(function() {\n          vm.save(form, { quick: true }).then(function() {\n            $window.location.reload(true);\n          });\n        });\n    };\n\n    this.addCalendarCategory = function(form) {\n      this.preferences.defaults.SOGoCalendarCategoriesColors[\"New category\"] = \"#aaa\";\n      this.preferences.defaults.SOGoCalendarCategories.push(\"New category\");\n      focus('calendarCategory_' + (this.preferences.defaults.SOGoCalendarCategories.length - 1));\n      form.$setDirty();\n    };\n\n    this.removeCalendarCategory = function(index, form) {\n      var key = this.preferences.defaults.SOGoCalendarCategories[index];\n      this.preferences.defaults.SOGoCalendarCategories.splice(index, 1);\n      delete this.preferences.defaults.SOGoCalendarCategoriesColors[key];\n      form.$setDirty();\n    };\n\n    this.addContactCategory = function(form) {\n      var i = _.indexOf(this.preferences.defaults.SOGoContactsCategories, \"\");\n      if (i < 0) {\n        this.preferences.defaults.SOGoContactsCategories.push(\"\");\n        i = this.preferences.defaults.SOGoContactsCategories.length - 1;\n      }\n      focus('contactCategory_' + i);\n      form.$setDirty();\n    };\n\n    this.removeContactCategory = function(index, form) {\n      this.preferences.defaults.SOGoContactsCategories.splice(index, 1);\n      form.$setDirty();\n    };\n\n    this.addMailAccount = function(ev, form) {\n      var account;\n\n      this.preferences.defaults.AuxiliaryMailAccounts.push({});\n\n      account = _.last(this.preferences.defaults.AuxiliaryMailAccounts);\n      angular.extend(account,\n                     {\n                       isNew: true,\n                       name: \"\",\n                       identities: [\n                         {\n                           fullName: \"\",\n                           email: \"\"\n                         }\n                       ],\n                       receipts: {\n                         receiptAction: \"ignore\",\n                         receiptNonRecipientAction: \"ignore\",\n                         receiptOutsideDomainAction: \"ignore\",\n                         receiptAnyAction: \"ignore\"\n                       }\n                     });\n\n      $mdDialog.show({\n        controller: 'AccountDialogController',\n        controllerAs: '$AccountDialogController',\n        templateUrl: 'editAccount?account=new',\n        targetEvent: ev,\n        locals: {\n          defaults: this.preferences.defaults,\n          account: account,\n          accountId: (this.preferences.defaults.AuxiliaryMailAccounts.length-1),\n          mailCustomFromEnabled: $window.mailCustomFromEnabled\n        }\n      }).then(function() {\n        form.$setDirty();\n      }).catch(function() {\n        vm.preferences.defaults.AuxiliaryMailAccounts.pop();\n      });\n    };\n\n    this.editMailAccount = function(event, index, form) {\n      var account = this.preferences.defaults.AuxiliaryMailAccounts[index];\n      $mdDialog.show({\n        controller: 'AccountDialogController',\n        controllerAs: '$AccountDialogController',\n        templateUrl: 'editAccount?account=' + index,\n        targetEvent: event,\n        locals: {\n          defaults: this.preferences.defaults,\n          account: account,\n          accountId: index,\n          mailCustomFromEnabled: $window.mailCustomFromEnabled\n        }\n      }).then(function() {\n        vm.preferences.defaults.AuxiliaryMailAccounts[index] = account;\n        form.$setDirty();\n      }, function() {\n        // Cancel\n      });\n    };\n\n    this.removeMailAccount = function(index, form) {\n      this.preferences.defaults.AuxiliaryMailAccounts.splice(index, 1);\n      form.$setDirty();\n    };\n\n    this.resetMailLabelValidity = function(index, form) {\n      form['mailIMAPLabel_' + index].$setValidity('duplicate', true);\n    };\n\n    this.addMailLabel = function(form) {\n      // See $omit() in the Preferences services for real key generation\n      var key = '_$$' + guid();\n      this.preferences.defaults.SOGoMailLabelsColorsKeys.push(\"label\");\n      this.preferences.defaults.SOGoMailLabelsColorsValues.push([\"New label\", \"#aaa\"]);\n      focus('mailLabel_' + (_.size(this.preferences.defaults.SOGoMailLabelsColorsKeys) - 1));\n      form.$setDirty();\n    };\n\n    this.removeMailLabel = function(index, form) {\n      this.preferences.defaults.SOGoMailLabelsColorsKeys.splice(index, 1);\n      this.preferences.defaults.SOGoMailLabelsColorsValues.splice(index, 1);\n      form.$setDirty();\n    };\n\n    this.addMailFilter = function(ev, form) {\n      var filter = { match: 'all', active: 1 };\n\n      $mdDialog.show({\n        templateUrl: 'editFilter?filter=new',\n        controller: 'FiltersDialogController',\n        controllerAs: 'filterEditor',\n        targetEvent: ev,\n        locals: {\n          filter: filter,\n          mailboxes: mailboxes,\n          labels: this.preferences.defaults.SOGoMailLabelsColors\n        }\n      }).then(function() {\n        if (!vm.preferences.defaults.SOGoSieveFilters)\n          vm.preferences.defaults.SOGoSieveFilters = [];\n        vm.preferences.defaults.SOGoSieveFilters.push(filter);\n        form.$setDirty();\n      });\n    };\n    \n    this.editMailFilter = function(ev, index, form) {\n      var filter = angular.copy(this.preferences.defaults.SOGoSieveFilters[index]);\n      \n      $mdDialog.show({\n        templateUrl: 'editFilter?filter=' + index,\n        controller: 'FiltersDialogController',\n        controllerAs: 'filterEditor',\n        targetEvent: null,\n        locals: {\n          filter: filter,\n          mailboxes: mailboxes,\n          labels: this.preferences.defaults.SOGoMailLabelsColors\n        }\n      }).then(function() {\n        vm.preferences.defaults.SOGoSieveFilters[index] = filter;\n        form.$setDirty();\n      });\n    };\n\n    this.removeMailFilter = function(index, form) {\n      this.preferences.defaults.SOGoSieveFilters.splice(index, 1);\n      form.$setDirty();\n    };\n\n    this.addDefaultEmailAddresses = function(form) {\n      var v = [];\n\n      if (angular.isDefined(this.preferences.defaults.Vacation.autoReplyEmailAddresses)) {\n        v = this.preferences.defaults.Vacation.autoReplyEmailAddresses.split(',');\n      }\n\n      this.preferences.defaults.Vacation.autoReplyEmailAddresses = (_.union($window.defaultEmailAddresses.split(','), v)).join(',');\n      form.$setDirty();\n    };\n\n    this.userFilter = function(search, excludedUsers) {\n      if (search.length < sgSettings.minimumSearchLength())\n        return [];\n\n      return User.$filter(search, excludedUsers).then(function(users) {\n        // Set users avatars\n        _.forEach(users, function(user) {\n          if (!user.$$image) {\n            if (user.image)\n              user.$$image = user.image;\n            else\n              vm.preferences.avatar(user.c_email, 32, {no_404: true}).then(function(url) {\n                user.$$image = url;\n              });\n            }\n        });\n        return users;\n      });\n    };\n\n    this.confirmChanges = function($event, form) {\n      var target;\n\n      if (form.$dirty && form.$valid) {\n        // Stop default action\n        $event.preventDefault();\n        $event.stopPropagation();\n\n        // Find target link\n        target = $event.target;\n        while (target.tagName != 'A')\n          target = target.parentNode;\n\n        Dialog.confirm(l('Unsaved Changes'),\n                       l('Do you want to save your changes made to the configuration?'),\n                       { ok: l('Save'), cancel: l('Don\\'t Save') })\n        .then(function() {\n          // Save & follow link\n          vm.save(form, { quick: true }).then(function() {\n            $window.location = target.href;\n          });\n        }, function() {\n          // Don't save & follow link\n          $window.location = target.href;\n        });\n      }\n    };\n\n    this.save = function(form, options) {\n      var i, sendForm, addresses, defaultAddresses, domains, domain;\n\n      sendForm = true;\n      domains = [];\n\n      // We do some sanity checks\n      if ($window.forwardConstraints > 0 &&\n          angular.isDefined(this.preferences.defaults.Forward) &&\n          this.preferences.defaults.Forward.enabled &&\n          angular.isDefined(this.preferences.defaults.Forward.forwardAddress)) {\n\n        addresses = this.preferences.defaults.Forward.forwardAddress.split(\",\");\n\n        // We first extract the list of 'known domains' to SOGo\n        defaultAddresses = $window.defaultEmailAddresses.split(/, */);\n\n        _.forEach(defaultAddresses, function(adr) {\n          var domain = adr.split(\"@\")[1];\n          if (domain) {\n            domains.push(domain.toLowerCase());\n          }\n        });\n\n        // We check if we're allowed or not to forward based on the domain defaults\n        for (i = 0; i < addresses.length && sendForm; i++) {\n          domain = addresses[i].split(\"@\")[1].toLowerCase();\n          if (domains.indexOf(domain) < 0 && $window.forwardConstraints == 1) {\n            Dialog.alert(l('Error'), l(\"You are not allowed to forward your messages to an external email address.\"));\n            sendForm = false;\n          }\n          else if (domains.indexOf(domain) >= 0 && $window.forwardConstraints == 2) {\n            Dialog.alert(l('Error'), l(\"You are not allowed to forward your messages to an internal email address.\"));\n            sendForm = false;\n          }\n        }\n      }\n\n      if (this.preferences.defaults.SOGoMailLabelsColorsKeys.length !=\n          this.preferences.defaults.SOGoMailLabelsColorsValues.length ||\n          this.preferences.defaults.SOGoMailLabelsColorsKeys.length !=\n          _.uniq(this.preferences.defaults.SOGoMailLabelsColorsKeys).length) {\n        Dialog.alert(l('Error'), l(\"IMAP labels must have unique names.\"));\n        _.forEach(this.preferences.defaults.SOGoMailLabelsColorsKeys, function (value, i, keys) {\n          if (form['mailIMAPLabel_' + i].$dirty &&\n              (keys.indexOf(value) != i ||\n               keys.indexOf(value, i+1) > -1)) {\n            form['mailIMAPLabel_' + i].$setValidity('duplicate', false);\n            sendForm = false;\n          }\n        });\n      }\n\n      if (sendForm)\n        return this.preferences.$save().then(function(data) {\n          if (!options || !options.quick) {\n            $mdToast.show(\n              $mdToast.simple()\n                .content(l('Preferences saved'))\n                .position('bottom right')\n                .hideDelay(2000));\n            form.$setPristine();\n          }\n        });\n\n      return $q.reject();\n    };\n\n    this.canChangePassword = function() {\n      if (this.passwords.newPassword && this.passwords.newPassword.length > 0 &&\n          this.passwords.newPasswordConfirmation && this.passwords.newPasswordConfirmation.length &&\n          this.passwords.newPassword == this.passwords.newPasswordConfirmation)\n        return true;\n\n      return false;\n    };\n    \n    this.changePassword = function() {\n      Authentication.changePassword(this.passwords.newPassword).then(function() {\n        var alert = $mdDialog.alert({\n          title: l('Password'),\n          content: l('The password was changed successfully.'),\n          ok: l('OK')\n        });\n        $mdDialog.show( alert )\n          .finally(function() {\n            alert = undefined;\n          });\n      }, function(msg) {\n        var alert = $mdDialog.alert({\n          title: l('Password'),\n          content: msg,\n          ok: l('OK')\n        });\n        $mdDialog.show( alert )\n          .finally(function() {\n            alert = undefined;\n          });\n      });\n    };\n\n    this.timeZonesListFilter = function(filter) {\n      return _.filter(this.timeZonesList, function(value) {\n        return value.toUpperCase().indexOf(filter.toUpperCase()) >= 0;\n      });\n    };\n\n    this.updateVacationDates = function() {\n      var d = this.preferences.defaults;\n\n      if (d &&\n          d.Vacation &&\n          d.Vacation.enabled) {\n        this.toggleVacationStartDate();\n        this.toggleVacationEndDate();\n      }\n    };\n\n    this.toggleVacationStartDate = function() {\n      var v;\n\n      v = this.preferences.defaults.Vacation;\n\n      if (v.startDateEnabled) {\n        // Enabling the start date\n        if (v.endDateEnabled && v.startDate.getTime() > v.endDate.getTime()) {\n          v.startDate = new Date(v.endDate.getTime());\n          v.startDate.addDays(-1);\n        }\n      }\n    };\n\n    this.toggleVacationEndDate = function() {\n      var v;\n\n      v = this.preferences.defaults.Vacation;\n\n      if (v.endDateEnabled) {\n        // Enabling the end date\n        if (v.startDateEnabled && v.endDate.getTime() < v.startDate.getTime()) {\n          v.endDate = new Date(v.startDate.getTime());\n          v.endDate.addDays(1);\n        }\n      }\n    };\n\n    this.validateVacationStartDate = function(date) {\n      var d = vm.preferences.defaults, r = true;\n      if (d &&\n          d.Vacation &&\n          d.Vacation.enabled) {\n        if (d.Vacation.startDateEnabled) {\n          r = (!d.Vacation.endDateEnabled ||\n               date.getTime() < d.Vacation.endDate.getTime()) &&\n            date.getTime() >= today.getTime();\n        }\n      }\n\n      return r;\n    };\n\n    this.validateVacationEndDate = function(date) {\n      var d = vm.preferences.defaults, r = true;\n      if (d &&\n          d.Vacation &&\n          d.Vacation.enabled) {\n        if (d.Vacation.endDateEnabled) {\n          r = (!d.Vacation.startDateEnabled ||\n               date.getTime() > d.Vacation.startDate.getTime()) &&\n            date.getTime() >= today.getTime();\n        }\n      }\n\n      return r;\n    };\n  }\n\n  angular\n    .module('SOGo.PreferencesUI')\n    .controller('PreferencesController', PreferencesController);\n\n})();\n"]}