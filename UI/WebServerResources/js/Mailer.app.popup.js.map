{"version":3,"sources":["Mailer/Mailer.popup.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","abstract","views","message","template","resolve","stateAccounts","stateAccount","stateMailbox","message@","controller","stateMessage","stateNewMessage","templateUrl","controllerAs","stateContent","otherwise","$q","Account","promise","$findAll","then","accounts","promises","angular","forEach","account","i","mailboxes","$getMailboxes","push","objects","all","$stateParams","_","find","id","accountId","decodeUriFilter","_find","mailboxId","mailbox","o","path","children","length","$mailboxes","$newMessage","encodeUriFilter","$state","Message","data","uid","messageId","toString","$account","$reload","$editableContent","runBlock","$rootScope","$on","event","current","previous","rejection","console","error","MessageEditorControllerPopup","$window","$mdDialog","show","hasBackdrop","disableParentScroll","clickOutsideToClose","escapeToClose","locals","stateRecipients","opener","close","module","config","run","$inject"],"mappings":"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","file":"Mailer.app.popup.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGo.MailerUI module */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.MailerUI', ['ngSanitize', 'ui.router', 'ck', 'angularFileUpload', 'SOGo.Common', 'SOGo.ContactsUI', 'ngAnimate', 'SOGo.PreferencesUI'])\n    .config(configure)\n    .run(runBlock)\n    .controller('MessageEditorControllerPopup', MessageEditorControllerPopup);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('mail', {\n        url: '/Mail',\n        abstract: true,\n        views: {\n          message: {\n            template: '<ui-view/>'\n          }\n        },\n        resolve: {\n          stateAccounts: stateAccounts\n        }\n      })\n      .state('mail.account', {\n        url: '/:accountId',\n        abstract: true,\n        template: '<ui-view id=\"account\"/>',\n        resolve: {\n          stateAccount: stateAccount\n        }\n      })\n      .state('mail.account.mailbox', {\n        url: '/:mailboxId',\n        abstract: true,\n        template: '<ui-view id=\"mailbox\"/>',\n        resolve: {\n          stateMailbox: stateMailbox\n        }\n      })\n      .state('mail.account.mailbox.newMessage', {\n        url: '/new',\n        views: {\n          'message@': {\n            template: '<ui-view/>',\n            controller: 'MessageEditorControllerPopup'\n          }\n        },\n        resolve: {\n          stateMessage: stateNewMessage\n        }\n      })\n      .state('mail.account.mailbox.message', {\n        url: '/:messageId',\n        views: {\n          'message@': {\n            templateUrl: 'UIxMailViewTemplate', // UI/Templates/MailerUI/UIxMailViewTemplate.wox\n            controller: 'MessageController',\n            controllerAs: 'viewer'\n          }\n        },\n        resolve: {\n          stateMessage: stateMessage\n        }\n      })\n      .state('mail.account.mailbox.message.edit', {\n        url: '/edit',\n        views: {\n          'message@': {\n            templateUrl: 'UIxMailEditor', // UI/Templates/MailerUI/UIxMailEditor.wox\n            controller: 'MessageEditorController',\n            controllerAs: 'editor'\n          }\n        },\n        resolve: {\n          stateContent: stateContent\n        }\n      })\n      .state('mail.account.mailbox.message.action', {\n        url: '/{actionName:(?:reply|replyall|forward)}',\n        views: {\n          message: {\n            templateUrl: 'UIxMailEditor', // UI/Templates/MailerUI/UIxMailEditor.wox\n            controller: 'MessageEditorController',\n            controllerAs: 'editor'\n          }\n        }\n      });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/Mail/0/folderINBOX/new');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAccounts.$inject = ['$q', 'Account'];\n  function stateAccounts($q, Account) {\n    var promise = Account.$findAll();\n    // Fetch list of mailboxes for each account\n    return promise.then(function(accounts) {\n      var promises = [];\n      angular.forEach(accounts, function(account, i) {\n        var mailboxes = account.$getMailboxes();\n        promises.push(mailboxes.then(function(objects) {\n          return account;\n        }));\n      });\n      return $q.all(promises);\n    });\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAccount.$inject = ['$stateParams', 'stateAccounts'];\n  function stateAccount($stateParams, stateAccounts) {\n    return _.find(stateAccounts, function(account) {\n      return account.id == $stateParams.accountId;\n    });\n  }\n\n  /**\n   * @ngInject\n   */\n  stateMailbox.$inject = ['$stateParams', 'stateAccount', 'decodeUriFilter'];\n  function stateMailbox($stateParams, stateAccount, decodeUriFilter) {\n    var mailboxId = decodeUriFilter($stateParams.mailboxId),\n        _find;\n    // Recursive find function\n    _find = function(mailboxes) {\n      var mailbox = _.find(mailboxes, function(o) {\n        return o.path == mailboxId;\n      });\n      if (!mailbox) {\n        angular.forEach(mailboxes, function(o) {\n          if (!mailbox && o.children && o.children.length > 0) {\n            mailbox = _find(o.children);\n          }\n        });\n      }\n      return mailbox;\n    };\n    return _find(stateAccount.$mailboxes);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateNewMessage.$inject = ['stateAccount'];\n  function stateNewMessage(stateAccount) {\n    return stateAccount.$newMessage();\n  }\n\n  /**\n   * @ngInject\n   */\n  stateMessage.$inject = ['encodeUriFilter', '$stateParams', '$state', 'stateMailbox', 'Message'];\n  function stateMessage(encodeUriFilter, $stateParams, $state, stateMailbox, Message) {\n    var data = { uid: $stateParams.messageId.toString() },\n        message = new Message(stateMailbox.$account.id, stateMailbox, data);\n\n    return message.$reload();\n  }\n\n  /**\n   * @ngInject\n   */\n  stateContent.$inject = ['stateMessage'];\n  function stateContent(stateMessage) {\n    return stateMessage.$editableContent();\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope'];\n  function runBlock($rootScope) {\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      console.error(event, current, previous, rejection);\n    });\n  }\n\n  /**\n   * @ngInject\n   */\n  MessageEditorControllerPopup.$inject = ['$window', '$mdDialog', 'stateAccounts', 'stateMessage'];\n  function MessageEditorControllerPopup($window, $mdDialog, stateAccounts, stateMessage) {\n    $mdDialog\n      .show({\n        hasBackdrop: false,\n        disableParentScroll: false,\n        clickOutsideToClose: false,\n        escapeToClose: false,\n        templateUrl: 'UIxMailEditor',\n        controller: 'MessageEditorController',\n        controllerAs: 'editor',\n        locals: {\n          stateAccounts: stateAccounts,\n          stateMessage: stateMessage,\n          stateRecipients: []\n        }\n      })\n      .finally(function() {\n        if ($window.opener)\n          $window.close();\n      });\n  }\n  \n})();\n"]}