{"version":3,"file":"Contacts.js","sources":["Contacts/Contacts.app.js","Contacts/AddressBookController.js","Contacts/AddressBooksController.js","Contacts/CardController.js","Contacts/sgAddress.directive.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","abstract","views","addressbooks","templateUrl","controller","controllerAs","resolve","stateAddressbooks","addressbook","stateAddressbook","card","stateCard","stateNewCard","template","card@app.addressbook","otherwise","AddressBook","$findAll","window","contactFolders","$stateParams","$find","addressbookId","$futureAddressBookData","Card","tag","contactType","pid","c_component","selectedCard","cardId","$getCard","runBlock","$rootScope","$on","event","current","previous","rejection","console","error","angular","module","config","run","$inject","AddressBookController","$scope","$q","$state","$timeout","$mdDialog","focus","Account","Dialog","Settings","selectCard","go","id","toggleCardSelection","$event","selected","preventDefault","stopPropagation","newComponent","ev","ComponentDialogController","scope","create","type","hide","show","parent","element","document","body","targetEvent","clickOutsideToClose","escapeToClose","l","join","locals","vm","selectedFolder","notSelectedComponent","currentCard","unselectCards","_","each","cards","confirmDeleteSelectedCards","confirm","then","selectedCards","filter","$deleteCards","data","status","saveSelectedCards","selectedUIDs","pluck","location","href","ApplicationBaseURL","copySelectedCards","folder","$copyCards","alert","selectAll","sort","field","$filter","sortedBy","$query","cancelSearch","mode","search","newMessage","recipients","accounts","account","o","$getMailboxes","mailboxes","$newMessage","message","stateAccounts","stateMessage","stateRecipients","newMessageWithRecipient","recipient","fn","full","newMessageWithSelectedCards","promises","c_mail","length","push","c_cn","isDefined","refs","ref","email","$futureCardData","all","this","service","AddressBooksController","$mdToast","FileUploader","User","select","editMode","value","newAddressbook","prompt","name","isEditable","isRemote","owner","UserLogin","$add","edit","originalAddressbook","extend","$omit","revertEditing","save","$rename","confirmDelete","isSubscription","$delete","importCards","CardsImportDialogController","uploader","onProgressItem","item","progress","debug","onSuccessItem","response","headers","JSON","stringify","undefined","simple","content","imported","position","hideDelay","$reload","onCancelItem","onErrorItem","close","upload","uploadAll","exportCards","showLinks","LinksDialogController","share","$acl","$users","usersWithACL","users","subscribeToFolder","addressbookData","$subscribe","activeUser","CardController","addOrgUnit","i","$addOrgUnit","addBirthday","birthday","Date","addEmail","$addEmail","addPhone","$addPhone","addUrl","$addUrl","addAddress","$addAddress","addMember","$addMember","userFilter","excludedCards","dry","excludeLists","$cards","form","$valid","$save","indexOf","copy","err","log","reset","$reset","cancel","isNew","$fullname","ok","reject","exportCard","currentFolder","viewRawSource","$$resource","post","CardRawSourceDialogController","allEmailTypes","$EMAIL_TYPES","allTelTypes","$TEL_TYPES","allUrlTypes","$URL_TYPES","allAddressTypes","$ADDRESS_TYPES","categories","userFilterResults","sgAddress","restrict","addressLines","lines","locality_region","street","street2","locality","region","country","postalcode","directive"],"mappings":"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","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoContacts */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.ContactsUI', ['ngSanitize', 'ui.router', 'angularFileUpload', 'ck', 'SOGo.Common', 'SOGo.PreferencesUI', 'SOGo.MailerUI'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('app', {\n        url: '/addressbooks',\n        abstract: true,\n        views: {\n          addressbooks: {\n            templateUrl: 'UIxContactFoldersView', // UI/Templates/Contacts/UIxContactFoldersView.wox\n            controller: 'AddressBooksController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          stateAddressbooks: stateAddressbooks\n        }\n      })\n      .state('app.addressbook', {\n        url: '/:addressbookId',\n        views: {\n          addressbook: {\n            templateUrl: 'addressbook',\n            controller: 'AddressBookController',\n            controllerAs: 'addressbook'\n          }\n        },\n        resolve: {\n          stateAddressbook: stateAddressbook\n        }\n      })\n      .state('app.addressbook.new', {\n        url: '/{contactType:(?:card|list)}/new',\n        views: {\n          card: {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        },\n        resolve: {\n          stateCard: stateNewCard\n        }\n      })\n      .state('app.addressbook.card', {\n        url: '/:cardId',\n        abstract: true,\n        views: {\n          card: {\n            template: '<ui-view/>'\n          }\n        },\n        resolve: {\n          stateCard: stateCard\n        }\n      })\n      .state('app.addressbook.card.view', {\n        url: '/view',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactViewTemplate', // UI/Templates/Contacts/UIxContactViewTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      })\n      .state('app.addressbook.card.editor', {\n        url: '/edit',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/addressbooks/personal');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbooks.$inject = ['AddressBook'];\n  function stateAddressbooks(AddressBook) {\n    return AddressBook.$findAll(window.contactFolders);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbook.$inject = ['$stateParams', 'AddressBook'];\n  function stateAddressbook($stateParams, AddressBook) {\n    return AddressBook.$find($stateParams.addressbookId).$futureAddressBookData;\n  }\n\n  /**\n   * @ngInject\n   */\n  stateNewCard.$inject = ['$stateParams', 'stateAddressbook', 'Card'];\n  function stateNewCard($stateParams, stateAddressbook, Card) {\n    var tag = 'v' + $stateParams.contactType,\n        card = new Card({ pid: $stateParams.addressbookId, c_component: tag });\n    stateAddressbook.selectedCard = true;\n    return card;\n  }\n\n  /**\n   * @ngInject\n   */\n  stateCard.$inject = ['$stateParams', 'stateAddressbook'];\n  function stateCard($stateParams, stateAddressbook) {\n    stateAddressbook.selectedCard = $stateParams.cardId;\n    return stateAddressbook.$getCard($stateParams.cardId);\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope'];\n  function runBlock($rootScope) {\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      console.error(event, current, previous, rejection);\n    });\n  }\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBookController.$inject = ['$scope', '$q', '$state', '$timeout', '$mdDialog', 'sgFocus', 'Account', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'stateAddressbooks', 'stateAddressbook'];\n  function AddressBookController($scope, $q, $state, $timeout, $mdDialog, focus, Account, Card, AddressBook, Dialog, Settings, stateAddressbooks, stateAddressbook) {\n    var vm = this;\n\n    AddressBook.selectedFolder = stateAddressbook;\n\n    vm.service = AddressBook;\n    vm.selectedFolder = stateAddressbook;\n    vm.selectCard = selectCard;\n    vm.toggleCardSelection = toggleCardSelection;\n    vm.newComponent = newComponent;\n    vm.notSelectedComponent = notSelectedComponent;\n    vm.unselectCards = unselectCards;\n    vm.confirmDeleteSelectedCards = confirmDeleteSelectedCards;\n    vm.saveSelectedCards = saveSelectedCards;\n    vm.copySelectedCards = copySelectedCards;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.newMessageWithSelectedCards = newMessageWithSelectedCards;\n    vm.newMessageWithRecipient = newMessageWithRecipient;\n    vm.mode = { search: false };\n    \n    function selectCard(card) {\n      $state.go('app.addressbook.card.view', {addressbookId: stateAddressbook.id, cardId: card.id});\n    }\n    \n    function toggleCardSelection($event, card) {\n      card.selected = !card.selected;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function newComponent(ev) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        targetEvent: ev,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        template: [\n          '<md-dialog aria-label=\"' + l('Create component') + '\">',\n          '  <md-dialog-content>',\n          '    <div layout=\"column\">',\n          '      <md-button ng-click=\"create(\\'card\\')\">',\n          '        ' + l('Contact'),\n          '      </md-button>',\n          '      <md-button ng-click=\"create(\\'list\\')\">',\n          '        ' + l('List'),\n          '      </md-button>',\n          '    </div>',\n          '  </md-dialog-content>',\n          '</md-dialog>'\n        ].join(''),\n        locals: {\n          addressbookId: vm.selectedFolder.id\n        },\n        controller: ComponentDialogController\n      });\n      \n      /**\n       * @ngInject\n       */\n      ComponentDialogController.$inject = ['scope', '$mdDialog', '$state', 'addressbookId'];\n      function ComponentDialogController(scope, $mdDialog, $state, addressbookId) {\n        scope.create = function(type) {\n          $mdDialog.hide();\n          $state.go('app.addressbook.new', { addressbookId: addressbookId, contactType: type });\n        };\n      }\n    }\n\n    function notSelectedComponent(currentCard, type) {\n      return (currentCard && currentCard.c_component == type && !currentCard.selected);\n    }\n\n    function unselectCards() {\n      _.each(vm.selectedFolder.cards, function(card) { card.selected = false; });\n    }\n    \n    function confirmDeleteSelectedCards() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected contacts?'))\n        .then(function() {\n          // User confirmed the deletion\n          var selectedCards = _.filter(vm.selectedFolder.cards, function(card) { return card.selected; });\n          vm.selectedFolder.$deleteCards(selectedCards);\n          delete vm.selectedFolder.selectedCard;\n        },  function(data, status) {\n          // Delete failed\n        });\n    }\n\n    function saveSelectedCards() {\n      var selectedCards = _.filter(vm.selectedFolder.cards, function(card) { return card.selected; });\n      var selectedUIDs = _.pluck(selectedCards, 'id');\n      window.location.href = ApplicationBaseURL + '/' + vm.selectedFolder.id + '/export?uid=' + selectedUIDs.join('&uid=');\n    }\n\n    function copySelectedCards(folder) {\n      var selectedCards = _.filter(vm.selectedFolder.cards, function(card) { return card.selected; });\n      vm.selectedFolder.$copyCards(selectedCards, folder).then(function() {\n        // TODO: refresh target addressbook?\n      }, function(error) {\n        Dialog.alert(l('Error'), error);\n      });\n    }\n\n    function selectAll() {\n      _.each(vm.selectedFolder.cards, function(card) {\n        card.selected = true;\n      });\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter('', { sort: field });\n    }\n\n    function sortedBy(field) {\n      return AddressBook.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter('');\n    }\n\n    function newMessage($event, recipients) {\n      Account.$findAll().then(function(accounts) {\n        var account = _.filter(accounts, function(o) {\n          if (o.id === 0)\n            return o;\n        })[0];\n\n        // We must initialize the Account with its mailbox\n        // list before proceeding with message's creation\n        account.$getMailboxes().then(function(mailboxes) {\n          account.$newMessage().then(function(message) {\n            $mdDialog.show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: '../Mail/UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccounts: accounts,\n                stateMessage: message,\n                stateRecipients: recipients\n              }\n            });\n          });\n        });\n      });\n    }\n\n    function newMessageWithRecipient($event, recipient, fn) {\n      var recipients = [{full: fn + ' <' + recipient + '>'}];\n      vm.newMessage($event, recipients);\n    }\n\n    function newMessageWithSelectedCards($event) {\n      var selectedCards = _.filter(vm.selectedFolder.cards, function(card) { return card.selected; });\n      var promises = [], recipients = [];\n\n      _.each(selectedCards, function(card) {\n        if (card.c_component == 'vcard' && card.c_mail.length) {\n          recipients.push({full: card.c_cn + ' <' + card.c_mail + '>'});\n        }\n        else if (card.c_component == 'vlist') {\n          // If the list's members were already fetch, use them\n          if (angular.isDefined(card.refs) && card.refs.length) {\n            _.each(card.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push({full: ref.c_cn + ' <' + ref.email + '>'});\n            });\n          }\n          else {\n            promises.push(vm.selectedFolder.$getCard(card.id).then(function(card) {\n              return card.$futureCardData.then(function(data) {\n                _.each(data.refs, function(ref) {\n                  if (ref.email.length)\n                    recipients.push({full: ref.c_cn + ' <' + ref.email + '>'});\n                });\n              });\n            }));\n          }\n        }\n      });\n\n      $q.all(promises).then(function() {\n        if (recipients.length)\n          vm.newMessage($event, recipients);\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')  \n    .controller('AddressBookController', AddressBookController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBooksController.$inject = ['$state', '$scope', '$rootScope', '$stateParams', '$timeout', '$mdDialog', '$mdToast', 'FileUploader', 'sgFocus', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'User', 'stateAddressbooks'];\n  function AddressBooksController($state, $scope, $rootScope, $stateParams, $timeout, $mdDialog, $mdToast, FileUploader, focus, Card, AddressBook, Dialog, Settings, User, stateAddressbooks) {\n    var vm = this;\n\n    vm.activeUser = Settings.activeUser;\n    vm.service = AddressBook;\n    vm.select = select;\n    vm.newAddressbook = newAddressbook;\n    vm.edit = edit;\n    vm.revertEditing = revertEditing;\n    vm.save = save;\n    vm.confirmDelete = confirmDelete;\n    vm.importCards = importCards;\n    vm.exportCards = exportCards;\n    vm.showLinks = showLinks;\n    vm.share = share;\n    vm.subscribeToFolder = subscribeToFolder;\n\n    function select(folder) {\n      vm.editMode = false;\n      AddressBook.$query.value = '';\n      $state.go('app.addressbook', {addressbookId: folder.id});\n    }\n\n    function newAddressbook() {\n      Dialog.prompt(l('New addressbook'),\n                    l('Name of new addressbook'))\n        .then(function(name) {\n          var addressbook = new AddressBook(\n            {\n              name: name,\n              isEditable: true,\n              isRemote: false,\n              owner: UserLogin\n            }\n          );\n          AddressBook.$add(addressbook);\n        });\n    }\n\n    function edit(folder) {\n      if (!folder.isRemote) {\n        vm.editMode = folder.id;\n        vm.originalAddressbook = angular.extend({}, folder.$omit());\n        focus('addressBookName_' + folder.id);\n      }\n    }\n\n    function revertEditing(folder) {\n      folder.name = vm.originalAddressbook.name;\n      vm.editMode = false;\n    }\n\n    function save(folder) {\n      var name = folder.name;\n      if (name && name.length > 0 && name != vm.originalAddressbook.name) {\n        folder.$rename(name)\n          .then(function(data) {\n            vm.editMode = false;\n          }, function(data, status) {\n            Dialog.alert(l('Warning'), data);\n          });\n      }\n    }\n\n    function confirmDelete() {\n      if (vm.service.selectedFolder.isSubscription) {\n        // Unsubscribe without confirmation\n        vm.service.selectedFolder.$delete()\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n          }, function(data, status) {\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                         l(data.error));\n          });\n      }\n      else {\n        Dialog.confirm(l('Warning'), l('Are you sure you want to delete the addressbook <em>%{0}</em>?',\n                                       vm.service.selectedFolder.name))\n          .then(function() {\n            return vm.service.selectedFolder.$delete();\n          })\n          .then(function() {\n            vm.service.selectedFolder = null;\n            return true;\n          })\n          .catch(function(data, status) {\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                         l(data.error));\n          });\n      }\n    }\n\n    function importCards($event, folder) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        targetEvent: $event,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        template: [\n          '<md-dialog flex=\"40\" flex-sm=\"100\" aria-label=\"' + l('Import Cards') + '\">',\n          '  <md-toolbar class=\"sg-padded\">',\n          '    <div class=\"md-toolbar-tools\">',\n          '      <md-icon class=\"material-icons sg-icon-toolbar-bg\">import_export</md-icon>',\n          '      <div class=\"md-flex\">',\n          '        <div class=\"sg-md-title\">' + l('Import Cards') + '</div>',\n          '      </div>',\n          '      <md-button class=\"md-icon-button\" ng-click=\"close()\">',\n          '        <md-icon aria-label=\"Close dialog\">close</md-icon>',\n          '      </md-button>',\n          '    </div>',\n          '  </md-toolbar>',\n          '  <md-dialog-content>',\n          '    <div layout=\"column\">',\n          '      <div layout=\"row\" layout-align=\"start center\">',\n          '        <span>' + l('Select a vCard or LDIF file.') + '</span>',\n          '        <label class=\"md-button\" for=\"file-input\">',\n          '          <span>' + l('Choose File') + '</span>',\n          '        </label>',\n          '        <input id=\"file-input\" type=\"file\" nv-file-select=\"nv-file-select\" uploader=\"uploader\" ng-show=\"false\"/>',\n          '      </div>',\n          '      <span ng-show=\"uploader.queue.length == 0\">' + l('No file chosen') + '</span>',\n          '      <span ng-show=\"uploader.queue.length > 0\">{{ uploader.queue[0].file.name }}</span>',\n          '    </div>',\n          '  </md-dialog-content>',\n          '  <div class=\"md-actions\">',\n          '    <md-button ng-disabled=\"uploader.queue.length == 0\" ng-click=\"upload()\">' + l('Upload') + '</md-button>',\n          '  </div>',\n          '</md-dialog>'\n        ].join(''),\n        controller: CardsImportDialogController,\n        locals: {\n          folder: folder\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      CardsImportDialogController.$inject = ['scope', '$mdDialog', 'folder'];\n      function CardsImportDialogController(scope, $mdDialog, folder) {\n\n        scope.uploader = new FileUploader({\n          url: ApplicationBaseURL + '/' + folder.id + '/import',\n          onProgressItem: function(item, progress) {\n            console.debug(item); console.debug(progress);\n          },\n          onSuccessItem: function(item, response, status, headers) {\n            console.debug(item); console.debug('success = ' + JSON.stringify(response, undefined, 2));\n            $mdDialog.hide();\n            $mdToast.show(\n              $mdToast.simple()\n                .content(l('A total of %{0} cards were imported in the addressbook.', response.imported))\n                .position('top right')\n                .hideDelay(3000));\n            AddressBook.selectedFolder.$reload();\n          },\n          onCancelItem: function(item, response, status, headers) {\n            console.debug(item); console.debug('cancel = ' + JSON.stringify(response, undefined, 2));\n          },\n          onErrorItem: function(item, response, status, headers) {\n            console.debug(item); console.debug('error = ' + JSON.stringify(response, undefined, 2));\n          }\n        });\n\n        scope.close = function() {\n          $mdDialog.hide();\n        };\n        scope.upload = function() {\n          scope.uploader.uploadAll();\n        };\n      }\n    }\n\n    function exportCards() {\n      window.location.href = ApplicationBaseURL + '/' + vm.service.selectedFolder.id + '/exportFolder';\n    }\n\n    function showLinks(addressbook) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        templateUrl: addressbook.id + '/links',\n        controller: LinksDialogController,\n        controllerAs: 'links',\n        locals: {\n          addressbook: addressbook\n        }\n      });\n      \n      /**\n       * @ngInject\n       */\n      LinksDialogController.$inject = ['$mdDialog', 'addressbook'];\n      function LinksDialogController($mdDialog, addressbook) {\n        var vm = this;\n        this.addressbook = addressbook;\n        this.close = close;\n\n        function close() {\n          $mdDialog.hide();\n        }\n      }\n    }\n\n    function share(addressbook) {\n      // Fetch list of ACL users\n      addressbook.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: addressbook.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: addressbook.$acl.users,\n            User: User,\n            folder: addressbook\n          }\n        });\n      });\n    }\n\n    /**\n     * subscribeToFolder - Callback of sgSubscribe directive\n     */\n    function subscribeToFolder(addressbookData) {\n      console.debug('subscribeToFolder ' + addressbookData.owner + addressbookData.name);\n      AddressBook.$subscribe(addressbookData.owner, addressbookData.name).catch(function(data) {\n        Dialog.alert(l('Warning'), l('An error occured please try again.'));\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('AddressBooksController', AddressBooksController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * Controller to view and edit a card\n   * @ngInject\n   */\n  CardController.$inject = ['$scope', '$timeout', '$mdDialog', 'AddressBook', 'Card', 'Dialog', 'sgFocus', '$state', '$stateParams', 'stateCard'];\n  function CardController($scope, $timeout, $mdDialog, AddressBook, Card, Dialog, focus, $state, $stateParams, stateCard) {\n    var vm = this;\n\n    vm.card = stateCard;\n\n    vm.currentFolder = AddressBook.selectedFolder;\n    vm.allEmailTypes = Card.$EMAIL_TYPES;\n    vm.allTelTypes = Card.$TEL_TYPES;\n    vm.allUrlTypes = Card.$URL_TYPES;\n    vm.allAddressTypes = Card.$ADDRESS_TYPES;\n    vm.categories = {};\n    vm.userFilterResults = [];\n    vm.addOrgUnit = addOrgUnit;\n    vm.addBirthday = addBirthday;\n    vm.addEmail = addEmail;\n    vm.addPhone = addPhone;\n    vm.addUrl = addUrl;\n    vm.addAddress = addAddress;\n    vm.addMember = addMember;\n    vm.userFilter = userFilter;\n    vm.save = save;\n    vm.close = close;\n    vm.reset = reset;\n    vm.cancel = cancel;\n    vm.confirmDelete = confirmDelete;\n    vm.exportCard = exportCard;\n    vm.viewRawSource = viewRawSource;\n\n    function addOrgUnit() {\n      var i = vm.card.$addOrgUnit('');\n      focus('orgUnit_' + i);\n    }\n    function addBirthday() {\n      vm.card.birthday = new Date();\n    }\n    function addEmail() {\n      var i = vm.card.$addEmail('');\n      focus('email_' + i);\n    }\n    function addPhone() {\n      var i = vm.card.$addPhone('');\n      focus('phone_' + i);\n    }\n    function addUrl() {\n      var i = vm.card.$addUrl('', '');\n      focus('url_' + i);\n    }\n    function addAddress() {\n      var i = vm.card.$addAddress('', '', '', '', '', '', '', '');\n      focus('address_' + i);\n    }\n    function addMember() {\n      var i = vm.card.$addMember('');\n      focus('ref_' + i);\n    }\n    function userFilter($query, excludedCards) {\n      AddressBook.selectedFolder.$filter($query, {dry: true, excludeLists: true}, excludedCards);\n      return AddressBook.selectedFolder.$cards;\n    }\n    function save(form) {\n      if (form.$valid) {\n        vm.card.$save()\n          .then(function(data) {\n            var i = _.indexOf(_.pluck(AddressBook.selectedFolder.cards, 'id'), vm.card.id);\n            if (i < 0) {\n              // New card; reload contacts list and show addressbook in which the card has been created\n              AddressBook.selectedFolder.$reload();\n            }\n            else {\n              // Update contacts list with new version of the Card object\n              AddressBook.selectedFolder.cards[i] = angular.copy(vm.card);\n            }\n            $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n          })\n          .catch(function(err) {\n            console.log(err);\n          });\n      }\n    }\n    function close() {\n      $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id }).then(function() {\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n      });\n    }\n    function reset() {\n      vm.card.$reset();\n    }\n    function cancel() {\n      vm.card.$reset();\n      if (vm.card.isNew) {\n        // Cancelling the creation of a card\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n        $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id });\n      }\n      else {\n        // Cancelling the edition of an existing card\n        $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n      }\n    }\n    function confirmDelete(card) {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the card of %{0}?', card.$fullname()),\n                     {ok: l('Yes'), cancel: l('No')})\n        .then(function() {\n          // User confirmed the deletion\n          card.$delete()\n            .then(function() {\n              // Remove card from list of addressbook\n              AddressBook.selectedFolder.cards = _.reject(AddressBook.selectedFolder.cards, function(o) {\n                return o.id == card.id;\n              });\n              // Remove card object from scope\n              vm.card = null;\n              $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id });\n            }, function(data, status) {\n              Dialog.alert(l('Warning'), l('An error occured while deleting the card \"%{0}\".',\n                                           card.$fullname()));\n            });\n        });\n    }\n\n    function exportCard() {\n      window.location.href = ApplicationBaseURL + '/' + vm.currentFolder.id + '/export?uid=' + vm.card.id;\n    }\n\n    function viewRawSource($event) {\n      Card.$$resource.post(vm.currentFolder.id + '/' + vm.card.id, \"raw\").then(function(data) {\n        $mdDialog.show({\n          parent: angular.element(document.body),\n          targetEvent: $event,\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          template: [\n            '<md-dialog flex=\"80\" flex-sm=\"100\" aria-label=\"' + l('View Card Source') + '\">',\n            '  <md-dialog-content>',\n            '    <pre>',\n            data,\n            '    </pre>',\n            '  </md-dialog-content>',\n            '  <div class=\"md-actions\">',\n            '    <md-button ng-click=\"close()\">' + l('Close') + '</md-button>',\n            '  </div>',\n            '</md-dialog>'\n          ].join(''),\n          controller: CardRawSourceDialogController\n        });\n\n        /**\n         * @ngInject\n         */\n        CardRawSourceDialogController.$inject = ['scope', '$mdDialog'];\n        function CardRawSourceDialogController(scope, $mdDialog) {\n          scope.close = function() {\n            $mdDialog.hide();\n          };\n        }\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('CardController', CardController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name sgAddress\n   * @memberof ContactsUI\n   * @desc Directive to format a postal address.\n   * @ngInject\n   */\n  function sgAddress() {\n    return {\n      restrict: 'A',\n      scope: { data: '=sgAddress' },\n      controller: ['$scope', function($scope) {\n        $scope.addressLines = function(data) {\n          var lines = [],\n              locality_region = [];\n          if (data.street) lines.push(data.street);\n          if (data.street2) lines.push(data.street2);\n          if (data.locality) locality_region.push(data.locality);\n          if (data.region) locality_region.push(data.region);\n          if (locality_region.length > 0) lines.push(locality_region.join(', '));\n          if (data.country) lines.push(data.country);\n          if (data.postalcode) lines.push(data.postalcode);\n          return lines.join('<br>');\n        };\n      }],\n      template: '<address ng-bind-html=\"addressLines(data)\"></address>'\n    };\n  }\n  \n  angular\n    .module('SOGo.Common')\n    .directive('sgAddress', sgAddress);\n})();\n"]}