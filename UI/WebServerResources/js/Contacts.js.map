{"version":3,"sources":["Contacts/Contacts.app.js","Contacts/AddressBookController.js","Contacts/AddressBooksController.js","Contacts/CardController.js","Contacts/sgAddress.directive.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","abstract","views","addressbooks","templateUrl","controller","controllerAs","resolve","stateAddressbooks","addressbook","stateAddressbook","params","refs","array","card","stateCard","stateNewCard","template","onEnter","onEnterCard","onExit","onExitCard","card@app.addressbook","otherwise","AddressBook","$findAll","window","contactFolders","$q","$state","$stateParams","_","find","id","addressbookId","selectedCard","$reload","reject","Card","tag","contactType","pid","c_component","$futureAddressBookData","then","$cards","cardObject","cardId","go","stateMailbox","runBlock","$rootScope","$log","$on","event","toState","toParams","fromState","fromParams","error","current","previous","rejection","angular","module","config","run","$inject","AddressBookController","$scope","$window","$timeout","$mdDialog","$mdToast","Account","focus","Dialog","Settings","sgHotkeys","_registerHotkeys","keys","push","createHotkey","key","l","description","callback","bind","vm","searchMode","newComponent","toggleCardSelection","_nextCard","_previousCard","_addNextCardToSelection","_addPreviousCardToSelection","forEach","hotkey","confirmDeleteSelectedCards","registerHotkey","$event","index","selectedFolder","$selectedCardIndex","isDefined","$topIndex","length","getLength","selectCard","preventDefault","hasSelectedCard","_selectedCardsOperation","operation","dstId","srcFolder","allCards","cards","ids","clearCardView","promise","success","$selectedCards","filter","$isCard","show","simple","content","position","hideDelay","$copyCards","$moveCards","map","indexOf","this","hotkeys","$onInit","service","mode","search","multiple","deregisterHotkey","centerIsClose","navController_centerIsClose","selectedIndex","nextSelectedIndex","i","folder","$selectedCard","selected","shiftKey","$selectedCount","idsMap","Math","min","max","stopPropagation","type","unselectCards","selectedCards","size","confirm","ok","$deleteCards","copySelectedCards","moveSelectedCards","selectAll","sort","field","$filter","sortedBy","$query","cancelSearch","newMessage","recipients","recipientsField","accounts","account","o","$getMailboxes","mailboxes","$newMessage","message","editable","parent","element","document","body","targetEvent","clickOutsideToClose","escapeToClose","locals","stateAccount","stateMessage","newMessageWithRecipient","recipient","fn","newMessageWithSelectedCards","promises","$isList","expandable","ref","email","$shortFormat","c_mail","all","uniq","newListWithSelectedCards","$$email","uniqBy","reference","AddressBooksController","$mdMedia","$mdSidenav","FileUploader","sgConstant","User","confirmDelete","select","editMode","value","close","newAddressbook","prompt","name","isEditable","isRemote","owner","UserLogin","$add","edit","originalAddressbook","$omit","revertEditing","save","$rename","data","status","alert","isSubscription","$delete","catch","response","statusText","importCards","CardsImportDialogController","scope","filterByExtension","item","isTextFile","test","join","uploader","ApplicationBaseURL","autoUpload","queueLimit","filters","onSuccessItem","headers","msg","hide","imported","onErrorItem","showLinks","LinksDialogController","urls","when","$reloadAll","showProperties","PropertiesDialogController","srcAddressBook","saveProperties","$save","init","cancel","share","$acl","$users","usersWithACL","users","subscribeToFolder","addressbookData","console","debug","$subscribe","isDroppableFolder","dstFolder","isOwned","acls","objectCreator","dragSelectedCards","activeUser","CardController","sgSettings","currentFolder","_loadCertificate","hasCertificate","$certificate","crt","certificate","transformCategory","input","isString","removeAttribute","form","attribute","$setDirty","addOrg","$addOrg","addBirthday","birthday","Date","addScreenName","$addScreenName","addEmail","$addEmail","addPhone","$addPhone","addUrl","$addUrl","canAddCustomField","customFields","addCustomField","availableKeys","pullAll","deleteCustomField","addAddress","$addAddress","userFilter","excludedCards","minimumSearchLength","dry","excludeLists","$valid","copy","reset","$reset","$setPristine","isNew","$fullname","toggleRawSource","showRawSource","rawSource","$$resource","post","allEmailTypes","$EMAIL_TYPES","allTelTypes","$TEL_TYPES","allUrlTypes","$URL_TYPES","allAddressTypes","$ADDRESS_TYPES","categories","userFilterResults","sgAddress","restrict","addressLines","lines","locality_region","street","street2","locality","region","country","postalcode","directive"],"mappings":"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","file":"Contacts.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoContacts */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.ContactsUI', ['ngCookies', 'ui.router', 'angularFileUpload', 'ck', 'SOGo.Common', 'SOGo.PreferencesUI', 'SOGo.MailerUI'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('app', {\n        url: '/addressbooks',\n        abstract: true,\n        views: {\n          addressbooks: {\n            templateUrl: 'UIxContactFoldersView', // UI/Templates/Contacts/UIxContactFoldersView.wox\n            controller: 'AddressBooksController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          stateAddressbooks: stateAddressbooks\n        }\n      })\n      .state('app.addressbook', {\n        url: '/:addressbookId',\n        views: {\n          addressbook: {\n            templateUrl: 'addressbook',\n            controller: 'AddressBookController',\n            controllerAs: 'addressbook'\n          }\n        },\n        resolve: {\n          stateAddressbook: stateAddressbook\n        }\n      })\n      .state('app.addressbook.new', {\n        url: '/{contactType:(?:card|list)}/new',\n        params: {\n          refs: { array: true }\n        },\n        views: {\n          card: {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        },\n        resolve: {\n          stateCard: stateNewCard\n        }\n      })\n      .state('app.addressbook.card', {\n        url: '/:cardId',\n        abstract: true,\n        views: {\n          card: {\n            template: '<ui-view/>'\n          }\n        },\n        resolve: {\n          stateCard: stateCard\n        },\n        onEnter: onEnterCard,\n        onExit: onExitCard\n      })\n      .state('app.addressbook.card.view', {\n        url: '/view',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactViewTemplate', // UI/Templates/Contacts/UIxContactViewTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      })\n      .state('app.addressbook.card.editor', {\n        url: '/edit',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/addressbooks/personal');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbooks.$inject = ['AddressBook'];\n  function stateAddressbooks(AddressBook) {\n    return AddressBook.$findAll(window.contactFolders);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbook.$inject = ['$q', '$state', '$stateParams', 'AddressBook'];\n  function stateAddressbook($q, $state, $stateParams, AddressBook) {\n    var addressbook = _.find(AddressBook.$findAll(), function(addressbook) {\n      return addressbook.id == $stateParams.addressbookId;\n    });\n    if (addressbook) {\n      delete addressbook.selectedCard;\n      addressbook.$reload();\n      return addressbook;\n    }\n    return $q.reject('Addressbook ' + $stateParams.addressbookId + ' not found');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateNewCard.$inject = ['$stateParams', 'stateAddressbook', 'Card'];\n  function stateNewCard($stateParams, stateAddressbook, Card) {\n    var tag = 'v' + $stateParams.contactType,\n        card = new Card({ pid: $stateParams.addressbookId, c_component: tag, refs: $stateParams.refs });\n    stateAddressbook.selectedCard = true;\n    return card;\n  }\n\n  /**\n   * @ngInject\n   */\n  stateCard.$inject = ['$state', '$stateParams', 'stateAddressbook'];\n  function stateCard($state, $stateParams, stateAddressbook) {\n    return stateAddressbook.$futureAddressBookData.then(function() {\n      var card = _.find(stateAddressbook.$cards, function(cardObject) {\n        return (cardObject.id == $stateParams.cardId);\n      });\n\n      if (card) {\n        return card.$reload();\n      }\n      else {\n        // Card not found\n        $state.go('app.addressbook');\n      }\n    });\n  }\n\n  /**\n   * @ngInject\n   */\n  onEnterCard.$inject = ['$stateParams', 'stateAddressbook'];\n  function onEnterCard($stateParams, stateAddressbook) {\n    stateAddressbook.selectedCard = $stateParams.cardId;\n  }\n\n  /**\n   * @ngInject\n   */\n  onExitCard.$inject = ['stateAddressbook'];\n  function onExitCard(stateMailbox) {\n    delete stateAddressbook.selectedCard;\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope', '$log', '$state'];\n  function runBlock($rootScope, $log, $state) {\n    $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n      $log.error(error);\n      $state.go('app.addressbook', { addressbookId: 'personal' });\n    });\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      $log.error(event, current, previous, rejection);\n    });\n  }\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBookController.$inject = ['$scope', '$q', '$window', '$state', '$timeout', '$mdDialog', '$mdToast', 'Account', 'Card', 'AddressBook', 'sgFocus', 'Dialog', 'sgSettings', 'sgHotkeys', 'stateAddressbooks', 'stateAddressbook'];\n  function AddressBookController($scope, $q, $window, $state, $timeout, $mdDialog, $mdToast, Account, Card, AddressBook, focus, Dialog, Settings, sgHotkeys, stateAddressbooks, stateAddressbook) {\n    var vm = this, hotkeys = [];\n\n    this.$onInit = function() {\n      AddressBook.selectedFolder = stateAddressbook;\n\n      this.service = AddressBook;\n      this.selectedFolder = stateAddressbook;\n      this.mode = { search: false, multiple: 0 };\n\n\n      _registerHotkeys(hotkeys);\n\n      $scope.$on('$destroy', function() {\n        // Deregister hotkeys\n        _.forEach(hotkeys, function(key) {\n          sgHotkeys.deregisterHotkey(key);\n        });\n      });\n    };\n\n\n    function _registerHotkeys(keys) {\n      keys.push(sgHotkeys.createHotkey({\n        key: l('hotkey_search'),\n        description: l('Search'),\n        callback: angular.bind(vm, vm.searchMode)\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('key_create_card'),\n        description: l('Create a new address book card'),\n        callback: angular.bind(vm, vm.newComponent, 'card')\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: l('key_create_list'),\n        description: l('Create a new list'),\n        callback: angular.bind(vm, vm.newComponent, 'list')\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'space',\n        description: l('Toggle item'),\n        callback: angular.bind(vm, vm.toggleCardSelection)\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+space',\n        description: l('Toggle range of items'),\n        callback: angular.bind(vm, vm.toggleCardSelection)\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'up',\n        description: l('View next item'),\n        callback: _nextCard\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'down',\n        description: l('View previous item'),\n        callback: _previousCard\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+up',\n        description: l('Add next item to selection'),\n        callback: _addNextCardToSelection\n      }));\n      keys.push(sgHotkeys.createHotkey({\n        key: 'shift+down',\n        description: l('Add previous item to selection'),\n        callback: _addPreviousCardToSelection\n      }));\n      _.forEach(['backspace', 'delete'], function(hotkey) {\n        keys.push(sgHotkeys.createHotkey({\n          key: hotkey,\n          description: l('Delete selected card or address book'),\n          callback: angular.bind(vm, vm.confirmDeleteSelectedCards)\n        }));\n      });\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    this.centerIsClose = function(navController_centerIsClose) {\n      // Allow the cards list to be hidden only if a card is selected\n      return this.selectedFolder.hasSelectedCard() && !!navController_centerIsClose;\n    };\n\n    this.selectCard = function(card) {\n      $state.go('app.addressbook.card.view', {cardId: card.id});\n    };\n\n    this.toggleCardSelection = function($event, card) {\n      var folder = this.selectedFolder,\n          selectedIndex, nextSelectedIndex, i;\n\n      if (!card)\n        card = folder.$selectedCard();\n      card.selected = !card.selected;\n      this.mode.multiple += card.selected? 1 : -1;\n\n      // Select closest range of cards when shift key is pressed\n      if ($event.shiftKey && folder.$selectedCount() > 1) {\n        selectedIndex = folder.idsMap[card.id];\n        // Search for next selected card above\n        nextSelectedIndex = selectedIndex - 2;\n        while (nextSelectedIndex >= 0 &&\n               !folder.$cards[nextSelectedIndex].selected)\n          nextSelectedIndex--;\n        if (nextSelectedIndex < 0) {\n          // Search for next selected card bellow\n          nextSelectedIndex = selectedIndex + 2;\n          while (nextSelectedIndex < folder.getLength() &&\n                 !folder.$cards[nextSelectedIndex].selected)\n            nextSelectedIndex++;\n        }\n        if (nextSelectedIndex >= 0 && nextSelectedIndex < folder.getLength()) {\n          for (i = Math.min(selectedIndex, nextSelectedIndex);\n               i <= Math.max(selectedIndex, nextSelectedIndex);\n               i++)\n            folder.$cards[i].selected = true;\n        }\n      }\n\n      $event.preventDefault();\n      $event.stopPropagation();\n    };\n\n    this.newComponent = function(type) {\n      $state.go('app.addressbook.new', { contactType: type });\n    };\n\n    this.unselectCards = function() {\n      _.forEach(this.selectedFolder.$cards, function(card) {\n        card.selected = false;\n      });\n      this.mode.multiple = 0;\n    };\n\n    /**\n     * User has pressed up arrow key\n     */\n    function _nextCard($event) {\n      var index = vm.selectedFolder.$selectedCardIndex();\n\n      if (angular.isDefined(index)) {\n        index--;\n        if (vm.selectedFolder.$topIndex > 0)\n          vm.selectedFolder.$topIndex--;\n      }\n      else {\n        // No card is selected, show oldest card\n        index = vm.selectedFolder.$cards.length() - 1;\n        vm.selectedFolder.$topIndex = vm.selectedFolder.getLength();\n      }\n\n      if (index > -1)\n        vm.selectCard(vm.selectedFolder.$cards[index]);\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    /**\n     * User has pressed the down arrow key\n     */\n    function _previousCard($event) {\n      var index = vm.selectedFolder.$selectedCardIndex();\n\n      if (angular.isDefined(index)) {\n        index++;\n        if (vm.selectedFolder.$topIndex < vm.selectedFolder.$cards.length)\n          vm.selectedFolder.$topIndex++;\n      }\n      else\n        // No card is selected, show newest\n        index = 0;\n\n      if (index < vm.selectedFolder.$cards.length)\n        vm.selectCard(vm.selectedFolder.$cards[index]);\n      else\n        index = -1;\n\n      $event.preventDefault();\n\n      return index;\n    }\n\n    function _addNextCardToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedCard()) {\n        index = _nextCard($event);\n        if (index >= 0)\n          toggleCardSelection($event, vm.selectedFolder.$cards[index]);\n      }\n    }\n\n    function _addPreviousCardToSelection($event) {\n      var index;\n\n      if (vm.selectedFolder.hasSelectedCard()) {\n        index = _previousCard($event);\n        if (index >= 0)\n          toggleCardSelection($event, vm.selectedFolder.$cards[index]);\n      }\n    }\n\n    this.confirmDeleteSelectedCards = function($event) {\n      var selectedCards = this.selectedFolder.$selectedCards();\n\n      if (_.size(selectedCards) > 0)\n        Dialog.confirm(l('Warning'),\n                       l('Are you sure you want to delete the selected contacts?'),\n                       { ok: l('Delete') })\n        .then(function() {\n          // User confirmed the deletion\n          vm.selectedFolder.$deleteCards(selectedCards).then(function() {\n            vm.mode.multiple = 0;\n            if (!vm.selectedFolder.selectedCard)\n              $state.go('app.addressbook');\n          });\n        });\n\n      $event.preventDefault();\n    };\n\n    /**\n     * @see AddressBooksController.dragSelectedCards\n     */\n    function _selectedCardsOperation(operation, dstId) {\n      var srcFolder, allCards, cards, ids, clearCardView, promise, success;\n\n      srcFolder = vm.selectedFolder;\n      clearCardView = false;\n      allCards = srcFolder.$selectedCards();\n      cards = _.filter(allCards, function(card) {\n        return card.$isCard();\n      });\n\n      if (cards.length != allCards.length)\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l(\"Lists can't be moved or copied.\"))\n            .position('top right')\n            .hideDelay(2000));\n\n      if (cards.length) {\n        if (operation == 'copy') {\n          promise = srcFolder.$copyCards(cards, dstId);\n          success = l('%{0} card(s) copied', cards.length);\n        }\n        else {\n          promise = srcFolder.$moveCards(cards, dstId);\n          success = l('%{0} card(s) moved', cards.length);\n          // Check if currently displayed card will be moved\n          ids = _.map(cards, 'id');\n          clearCardView = (srcFolder.selectedCard && ids.indexOf(srcFolder.selectedCard) >= 0);\n        }\n\n        // Show success toast when action succeeds\n        promise.then(function() {\n          if (clearCardView)\n            $state.go('app.addressbook');\n          $mdToast.show(\n            $mdToast.simple()\n              .content(success)\n              .position('top right')\n              .hideDelay(2000));\n        });\n      }\n    }\n\n    this.copySelectedCards = function(folder) {\n      _selectedCardsOperation('copy', folder);\n    };\n\n    this.moveSelectedCards = function(folder) {\n      _selectedCardsOperation('move', folder);\n    };\n\n    this.selectAll = function() {\n      _.forEach(this.selectedFolder.$cards, function(card) {\n        card.selected = true;\n      });\n      this.mode.multiple = this.selectedFolder.$cards.length;\n    };\n\n    this.sort = function(field) {\n      this.selectedFolder.$filter('', { sort: field });\n    };\n\n    this.sortedBy = function(field) {\n      return AddressBook.$query.sort == field;\n    };\n\n    this.searchMode = function() {\n      vm.mode.search = true;\n      focus('search');\n    };\n\n    this.cancelSearch = function() {\n      this.mode.search = false;\n      this.selectedFolder.$filter('');\n    };\n\n    this.newMessage = function($event, recipients, recipientsField) {\n      Account.$findAll().then(function(accounts) {\n        var account = _.find(accounts, function(o) {\n          if (o.id === 0)\n            return o;\n        });\n\n        // We must initialize the Account with its mailbox\n        // list before proceeding with message's creation\n        account.$getMailboxes().then(function(mailboxes) {\n          account.$newMessage().then(function(message) {\n            message.editable[recipientsField] = recipients;\n            $mdDialog.show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: '../Mail/UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccount: account,\n                stateMessage: message\n              }\n            });\n          });\n        });\n      });\n    };\n\n    this.newMessageWithRecipient = function($event, recipient, fn) {\n      var recipients = [fn + ' <' + recipient + '>'];\n      this.newMessage($event, recipients, 'to');\n      $event.stopPropagation();\n      $event.preventDefault();\n    };\n\n    this.newMessageWithSelectedCards = function($event, recipientsField) {\n      var selectedCards = _.filter(this.selectedFolder.$cards, function(card) { return card.selected; });\n      var promises = [], recipients = [];\n\n      _.forEach(selectedCards, function(card) {\n        if (card.$isList({expandable: true})) {\n          // If the list's members were already fetch, use them\n          if (angular.isDefined(card.refs) && card.refs.length) {\n            _.forEach(card.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          }\n          else {\n            promises.push(card.$reload().then(function(card) {\n              _.forEach(card.refs, function(ref) {\n                if (ref.email.length)\n                  recipients.push(ref.$shortFormat());\n              });\n            }));\n          }\n        }\n        else if (card.c_mail.length) {\n          recipients.push(card.$shortFormat());\n        }\n      });\n\n      $q.all(promises).then(function() {\n        recipients = _.uniq(recipients);\n        if (recipients.length)\n          vm.newMessage($event, recipients, recipientsField);\n      });\n    };\n\n    this.newListWithSelectedCards = function() {\n      var selectedCards = _.filter(this.selectedFolder.$cards, function(card) { return card.selected; });\n      var promises = [], refs = [];\n\n      _.forEach(selectedCards, function(card) {\n        if (card.$isList({expandable: true})) {\n          // If the list's members were already fetch, use them\n          if (angular.isDefined(card.refs) && card.refs.length) {\n            _.forEach(card.refs, function(ref) {\n              if (ref.email.length)\n                refs.push(ref);\n            });\n          }\n          else {\n            promises.push(card.$reload().then(function(card) {\n              _.forEach(card.refs, function(ref) {\n                if (ref.email.length)\n                  refs.push(ref);\n              });\n            }));\n          }\n        }\n        else if (card.$$email && card.$$email.length) {\n          refs.push(card);\n        }\n      });\n\n      $q.all(promises).then(function() {\n        refs = _.uniqBy(_.map(refs, function(o) {\n          return { reference: o.id || o.reference, email: o.$$email || o.email };\n        }), 'reference');\n        if (refs.length)\n          $state.go('app.addressbook.new', { contactType: 'list', refs: refs });\n      });\n    };\n\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('AddressBookController', AddressBookController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBooksController.$inject = ['$q', '$state', '$scope', '$rootScope', '$stateParams', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'FileUploader', 'sgConstant', 'sgHotkeys', 'sgFocus', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'User', 'stateAddressbooks'];\n  function AddressBooksController($q, $state, $scope, $rootScope, $stateParams, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, FileUploader, sgConstant, sgHotkeys, focus, Card, AddressBook, Dialog, Settings, User, stateAddressbooks) {\n    var vm = this, hotkeys = [];\n\n    vm.activeUser = Settings.activeUser;\n    vm.service = AddressBook;\n    vm.select = select;\n    vm.newAddressbook = newAddressbook;\n    vm.edit = edit;\n    vm.revertEditing = revertEditing;\n    vm.save = save;\n    vm.confirmDelete = confirmDelete;\n    vm.importCards = importCards;\n    vm.showLinks = showLinks;\n    vm.showProperties = showProperties;\n    vm.share = share;\n    vm.subscribeToFolder = subscribeToFolder;\n    vm.isDroppableFolder = isDroppableFolder;\n    vm.dragSelectedCards = dragSelectedCards;\n\n\n    _registerHotkeys(hotkeys);\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n\n    function _registerHotkeys(keys) {\n      _.forEach(['backspace', 'delete'], function(hotkey) {\n        keys.push(sgHotkeys.createHotkey({\n          key: hotkey,\n          description: l('Delete selected card or address book'),\n          callback: function() {\n            if (AddressBook.selectedFolder && !AddressBook.selectedFolder.hasSelectedCard())\n              confirmDelete();\n          }\n        }));\n      });\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function select($event, folder) {\n      if ($state.params.addressbookId != folder.id &&\n          vm.editMode != folder.id) {\n        vm.editMode = false;\n        AddressBook.$query.value = '';\n        // Close sidenav on small devices\n        if (!$mdMedia(sgConstant['gt-md']))\n          $mdSidenav('left').close();\n        $state.go('app.addressbook', {addressbookId: folder.id});\n      }\n    }\n\n    function newAddressbook() {\n      Dialog.prompt(l('New Addressbook...'),\n                    l('Name of the Address Book'))\n        .then(function(name) {\n          var addressbook = new AddressBook(\n            {\n              name: name,\n              isEditable: true,\n              isRemote: false,\n              owner: UserLogin\n            }\n          );\n          AddressBook.$add(addressbook);\n        });\n    }\n\n    function edit(folder) {\n      if (!folder.isRemote) {\n        vm.editMode = folder.id;\n        vm.originalAddressbook = folder.$omit();\n        focus('addressBookName_' + folder.id);\n      }\n    }\n\n    function revertEditing(folder) {\n      folder.name = vm.originalAddressbook.name;\n      vm.editMode = false;\n    }\n\n    function save(folder) {\n      var name = folder.name;\n      if (name && name.length > 0) {\n        if (name != vm.originalAddressbook.name) {\n          folder.$rename(name)\n            .then(function(data) {\n              vm.editMode = false;\n            }, function(data, status) {\n              Dialog.alert(l('Warning'), data);\n            });\n        }\n        else {\n          vm.editMode = false;\n        }\n      }\n    }\n\n    function confirmDelete() {\n      if (vm.service.selectedFolder.isSubscription) {\n        // Unsubscribe without confirmation\n        vm.service.selectedFolder.$delete()\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n          }, function(data, status) {\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                         l(data.error));\n          });\n      }\n      else {\n        Dialog.confirm(l('Warning'), l('Are you sure you want to delete the addressbook \"%{0}\"?',\n                                       vm.service.selectedFolder.name),\n                       { ok: l('Delete') })\n          .then(function() {\n            return vm.service.selectedFolder.$delete();\n          })\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n            return true;\n          })\n          .catch(function(response) {\n            if (response) {\n              var message = response.data.message || response.statusText;\n              Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                             vm.service.selectedFolder.name),\n                           message);\n            }\n          });\n      }\n    }\n\n    function importCards($event, folder) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        targetEvent: $event,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        templateUrl: 'UIxContactsImportDialog',\n        controller: CardsImportDialogController,\n        controllerAs: '$CardsImportDialogController',\n        locals: {\n          folder: folder\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      CardsImportDialogController.$inject = ['scope', '$mdDialog', 'folder'];\n      function CardsImportDialogController(scope, $mdDialog, folder) {\n        var vm = this;\n\n        vm.uploader = new FileUploader({\n          url: ApplicationBaseURL + [folder.id, 'import'].join('/'),\n          autoUpload: true,\n          queueLimit: 1,\n          filters: [{ name: filterByExtension, fn: filterByExtension }],\n          onSuccessItem: function(item, response, status, headers) {\n            var msg;\n\n            $mdDialog.hide();\n\n            if (response.imported === 0)\n              msg = l('No card was imported.');\n            else {\n              msg = l('A total of %{0} cards were imported in the addressbook.', response.imported);\n              AddressBook.selectedFolder.$reload();\n            }\n\n            $mdToast.show(\n              $mdToast.simple()\n                .content(msg)\n                .position('top right')\n                .hideDelay(3000));\n          },\n          onErrorItem: function(item, response, status, headers) {\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('An error occured while importing contacts.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n          }\n        });\n\n        vm.close = function() {\n          $mdDialog.hide();\n        };\n\n        function filterByExtension(item) {\n          var isTextFile = item.type.indexOf('text') === 0 ||\n              /\\.(ldif|vcf|vcard)$/.test(item.name);\n\n          if (!isTextFile)\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('Select a vCard or LDIF file.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n\n          return isTextFile;\n        }\n      }\n    }\n\n    function showLinks(addressbook) {\n      var promise;\n      if (addressbook.urls)\n        promise = $q.when();\n      else\n        // Refresh list of addressbooks to fetch links associated to addressbook\n        promise = AddressBook.$reloadAll();\n      promise.then(function() {\n        $mdDialog.show({\n          parent: angular.element(document.body),\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          templateUrl: addressbook.id + '/links',\n          controller: LinksDialogController,\n          controllerAs: 'links',\n          locals: {\n            addressbook: addressbook\n          }\n        });\n      });\n\n      /**\n       * @ngInject\n       */\n      LinksDialogController.$inject = ['$mdDialog', 'addressbook'];\n      function LinksDialogController($mdDialog, addressbook) {\n        var vm = this;\n        this.addressbook = addressbook;\n        this.close = close;\n\n        function close() {\n          $mdDialog.hide();\n        }\n      }\n    }\n\n    function showProperties(addressbook) {\n      $mdDialog.show({\n        templateUrl: addressbook.id + '/properties',\n        controller: PropertiesDialogController,\n        controllerAs: 'properties',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          srcAddressBook: addressbook\n        }\n      }).catch(function() {\n        // Do nothing\n      });\n\n      /**\n       * @ngInject\n       */\n      PropertiesDialogController.$inject = ['$scope', '$mdDialog', 'srcAddressBook'];\n      function PropertiesDialogController($scope, $mdDialog, srcAddressBook) {\n        var vm = this;\n\n        vm.addressbook = new AddressBook(srcAddressBook.$omit());\n        vm.saveProperties = saveProperties;\n        vm.close = close;\n\n        function saveProperties() {\n          vm.addressbook.$save().then(function() {\n            // Refresh list instance\n            srcAddressBook.init(vm.addressbook.$omit());\n            $mdDialog.hide();\n          });\n        }\n\n        function close() {\n          $mdDialog.cancel();\n        }\n      }\n    }\n\n    function share(addressbook) {\n      // Fetch list of ACL users\n      addressbook.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: addressbook.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: addressbook.$acl.users,\n            User: User,\n            folder: addressbook\n          }\n        });\n      });\n    }\n\n    /**\n     * subscribeToFolder - Callback of sgSubscribe directive\n     */\n    function subscribeToFolder(addressbookData) {\n      console.debug('subscribeToFolder ' + addressbookData.owner + addressbookData.name);\n      AddressBook.$subscribe(addressbookData.owner, addressbookData.name).then(function(data) {\n         $mdToast.show(\n           $mdToast.simple()\n             .content(l('Successfully subscribed to address book'))\n             .position('top right')\n             .hideDelay(3000));\n      });\n    }\n\n    function isDroppableFolder(srcFolder, dstFolder) {\n      return (dstFolder.id != srcFolder.id) && (dstFolder.isOwned || dstFolder.acls.objectCreator);\n    }\n\n    /**\n     * @see AddressBookController._selectedCardsOperation\n     */\n    function dragSelectedCards(srcFolder, dstFolder, mode) {\n      var dstId, allCards, cards, ids, clearCardView, promise, success;\n\n      dstId = dstFolder.id;\n      clearCardView = false;\n      allCards = srcFolder.$selectedCards();\n      if (allCards.length === 0)\n        allCards = [srcFolder.$selectedCard()];\n      cards = _.filter(allCards, function(card) {\n        return card.$isCard();\n      });\n\n      if (cards.length != allCards.length)\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l(\"Lists can't be moved or copied.\"))\n            .position('top right')\n            .hideDelay(2000));\n\n      if (cards.length) {\n        if (mode == 'copy') {\n          promise = srcFolder.$copyCards(cards, dstId);\n          success = l('%{0} card(s) copied', cards.length);\n        }\n        else {\n          promise = srcFolder.$moveCards(cards, dstId);\n          success = l('%{0} card(s) moved', cards.length);\n          // Check if currently displayed card will be moved\n          ids = _.map(cards, 'id');\n          clearCardView = (srcFolder.selectedCard && ids.indexOf(srcFolder.selectedCard) >= 0);\n        }\n\n        // Show success toast when action succeeds\n        promise.then(function() {\n          if (clearCardView)\n            $state.go('app.addressbook');\n          $mdToast.show(\n            $mdToast.simple()\n              .content(success)\n              .position('top right')\n              .hideDelay(2000));\n        });\n      }\n    }\n\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('AddressBooksController', AddressBooksController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * Controller to view and edit a card\n   * @ngInject\n   */\n  CardController.$inject = ['$scope', '$timeout', '$window', '$mdDialog', 'sgSettings', 'AddressBook', 'Card', 'Dialog', 'sgHotkeys', 'sgFocus', '$state', '$stateParams', 'stateCard'];\n  function CardController($scope, $timeout, $window, $mdDialog, sgSettings, AddressBook, Card, Dialog, sgHotkeys, focus, $state, $stateParams, stateCard) {\n    var vm = this, hotkeys = [];\n\n    vm.card = stateCard;\n\n    vm.currentFolder = AddressBook.selectedFolder;\n    vm.allEmailTypes = Card.$EMAIL_TYPES;\n    vm.allTelTypes = Card.$TEL_TYPES;\n    vm.allUrlTypes = Card.$URL_TYPES;\n    vm.allAddressTypes = Card.$ADDRESS_TYPES;\n    vm.categories = {};\n    vm.userFilterResults = [];\n    vm.transformCategory = transformCategory;\n    vm.removeAttribute = removeAttribute;\n    vm.addOrg = addOrg;\n    vm.addBirthday = addBirthday;\n    vm.addScreenName = addScreenName;\n    vm.addEmail = addEmail;\n    vm.addPhone = addPhone;\n    vm.addUrl = addUrl;\n    vm.addAddress = addAddress;\n    vm.canAddCustomField = canAddCustomField;\n    vm.addCustomField = addCustomField;\n    vm.deleteCustomField = deleteCustomField;\n    vm.userFilter = userFilter;\n    vm.save = save;\n    vm.close = close;\n    vm.reset = reset;\n    vm.cancel = cancel;\n    vm.confirmDelete = confirmDelete;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n\n\n    _registerHotkeys(hotkeys);\n    _loadCertificate();\n\n    $scope.$on('$destroy', function() {\n      // Deregister hotkeys\n      _.forEach(hotkeys, function(key) {\n        sgHotkeys.deregisterHotkey(key);\n      });\n    });\n\n\n    function _registerHotkeys(keys) {\n      _.forEach(['backspace', 'delete'], function(hotkey) {\n        keys.push(sgHotkeys.createHotkey({\n          key: hotkey,\n          description: l('Delete'),\n          callback: function($event) {\n            if (vm.currentFolder.$selectedCount() === 0)\n              confirmDelete();\n            $event.preventDefault();\n          }\n        }));\n      });\n\n      // Register the hotkeys\n      _.forEach(keys, function(key) {\n        sgHotkeys.registerHotkey(key);\n      });\n    }\n\n    function _loadCertificate() {\n      if (vm.card.hasCertificate)\n        vm.card.$certificate().then(function(crt) {\n          vm.certificate = crt;\n        }, function() {\n          delete vm.card.hasCertificate;\n        });\n    }\n\n    function transformCategory(input) {\n      if (angular.isString(input))\n        return { value: input };\n      else\n        return input;\n    }\n    function removeAttribute(form, attribute, index) {\n      vm.card.$delete(attribute, index);\n      form.$setDirty();\n    }\n    function addOrg() {\n      var i = vm.card.$addOrg({ value: '' });\n      focus('org_' + i);\n    }\n    function addBirthday() {\n      vm.card.birthday = new Date();\n    }\n    function addScreenName() {\n      vm.card.$addScreenName('');\n    }\n    function addEmail() {\n      var i = vm.card.$addEmail('');\n      focus('email_' + i);\n    }\n    function addPhone() {\n      var i = vm.card.$addPhone('');\n      focus('phone_' + i);\n    }\n    function addUrl() {\n      var i = vm.card.$addUrl('', '');\n      focus('url_' + i);\n    }\n    function canAddCustomField() {\n      return _.keys(stateCard.customFields).length < 4;\n    }\n    function addCustomField() {\n      if (!angular.isDefined(vm.card.customFields))\n        vm.card.customFields = {};\n\n      // Find the first 'available' custom field\n      var availableKeys = _.pullAll(['1', '2', '3', '4'], _.keys(stateCard.customFields));\n      vm.card.customFields[availableKeys[0]] = \"\";\n    }\n    function deleteCustomField(key) {\n      delete vm.card.customFields[key];\n    }\n    function addAddress() {\n      var i = vm.card.$addAddress('', '', '', '', '', '', '', '');\n      focus('address_' + i);\n    }\n    function userFilter($query, excludedCards) {\n      if ($query.length < sgSettings.minimumSearchLength())\n        return [];\n\n      return AddressBook.selectedFolder.$filter($query, {dry: true, excludeLists: true}, excludedCards).then(function(cards) {\n        return cards;\n      });\n    }\n    function save(form) {\n      if (form.$valid) {\n        vm.card.$save()\n          .then(function(data) {\n            var i = _.indexOf(_.map(AddressBook.selectedFolder.$cards, 'id'), vm.card.id);\n            if (i < 0) {\n              // New card; reload contacts list and show addressbook in which the card has been created\n              AddressBook.selectedFolder.$reload();\n            }\n            else {\n              // Update contacts list with new version of the Card object\n              AddressBook.selectedFolder.$cards[i] = angular.copy(vm.card);\n            }\n            $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n          });\n      }\n    }\n    function close() {\n      $state.go('app.addressbook').then(function() {\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n      });\n    }\n    function reset(form) {\n      vm.card.$reset();\n      form.$setPristine();\n    }\n    function cancel() {\n      vm.card.$reset();\n      if (vm.card.isNew) {\n        // Cancelling the creation of a card\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n        $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id });\n      }\n      else {\n        // Cancelling the edition of an existing card\n        $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n      }\n    }\n    function confirmDelete() {\n      var card = stateCard;\n\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the card of %{0}?', '<b>' + card.$fullname() + '</b>'),\n                     { ok: l('Delete') })\n        .then(function() {\n          // User confirmed the deletion\n          AddressBook.selectedFolder.$deleteCards([card])\n            .then(function() {\n              close();\n            }, function(data, status) {\n              Dialog.alert(l('Warning'), l('An error occured while deleting the card \"%{0}\".',\n                                           card.$fullname()));\n            });\n        });\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.rawSource) {\n        Card.$$resource.post(vm.currentFolder.id + '/' + vm.card.id, \"raw\").then(function(data) {\n          vm.rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('CardController', CardController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name sgAddress\n   * @memberof ContactsUI\n   * @desc Directive to format a postal address.\n   * @ngInject\n   */\n  function sgAddress() {\n    return {\n      restrict: 'A',\n      scope: { data: '=sgAddress' },\n      controller: ['$scope', function($scope) {\n        $scope.addressLines = function(data) {\n          var lines = [],\n              locality_region = [];\n          if (data.street) lines.push(data.street);\n          if (data.street2) lines.push(data.street2);\n          if (data.locality) locality_region.push(data.locality);\n          if (data.region) locality_region.push(data.region);\n          if (locality_region.length > 0) lines.push(locality_region.join(', '));\n          if (data.country) lines.push(data.country);\n          if (data.postalcode) lines.push(data.postalcode);\n          return lines.join('<br>');\n        };\n      }],\n      template: '<address ng-bind-html=\"addressLines(data)\"></address>'\n    };\n  }\n  \n  angular\n    .module('SOGo.Common')\n    .directive('sgAddress', sgAddress);\n})();\n"]}