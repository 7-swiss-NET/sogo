{"version":3,"sources":["Contacts/Contacts.app.js","Contacts/AddressBookController.js","Contacts/AddressBooksController.js","Contacts/CardController.js","Contacts/sgAddress.directive.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","abstract","views","addressbooks","templateUrl","controller","controllerAs","resolve","stateAddressbooks","addressbook","stateAddressbook","card","stateCard","stateNewCard","template","onEnter","onEnterCard","onExit","onExitCard","card@app.addressbook","otherwise","AddressBook","$findAll","window","contactFolders","$q","$state","$stateParams","_","find","id","addressbookId","selectedCard","$reload","reject","Card","tag","contactType","pid","c_component","$cards","cardObject","cardId","go","stateMailbox","runBlock","$rootScope","$log","$on","event","toState","toParams","fromState","fromParams","error","current","previous","rejection","angular","module","config","run","$inject","AddressBookController","$scope","$window","$timeout","$mdDialog","$mdToast","Account","Dialog","Settings","selectCard","toggleCardSelection","$event","selected","vm","mode","multiple","preventDefault","stopPropagation","newComponent","type","unselectCards","forEach","selectedFolder","confirmDeleteSelectedCards","confirm","l","ok","then","selectedCards","filter","$deleteCards","_selectedCardsOperation","operation","dstId","srcFolder","allCards","cards","ids","clearCardView","promise","success","$selectedCards","$isCard","length","show","simple","content","position","hideDelay","$copyCards","$moveCards","map","indexOf","copySelectedCards","folder","moveSelectedCards","selectAll","sort","field","$filter","sortedBy","$query","cancelSearch","search","newMessage","recipients","accounts","account","o","$getMailboxes","mailboxes","$newMessage","message","extend","editable","to","parent","element","document","body","targetEvent","clickOutsideToClose","escapeToClose","locals","stateAccount","stateMessage","newMessageWithRecipient","recipient","fn","newMessageWithSelectedCards","promises","$isList","expandable","isDefined","refs","ref","email","push","$shortFormat","c_mail","all","uniq","this","service","AddressBooksController","$mdMedia","$mdSidenav","FileUploader","sgConstant","focus","User","select","params","editMode","value","close","newAddressbook","prompt","name","isEditable","isRemote","owner","UserLogin","$add","edit","originalAddressbook","$omit","revertEditing","save","$rename","data","status","alert","confirmDelete","isSubscription","$delete","response","statusText","importCards","CardsImportDialogController","scope","filterByExtension","item","isTextFile","test","join","uploader","ApplicationBaseURL","autoUpload","queueLimit","filters","onSuccessItem","headers","msg","hide","imported","onErrorItem","showLinks","LinksDialogController","showProperties","PropertiesDialogController","srcAddressBook","saveProperties","$save","init","cancel","share","$acl","$users","usersWithACL","users","subscribeToFolder","addressbookData","console","debug","$subscribe","isDroppableFolder","dstFolder","isOwned","acls","objectCreator","dragSelectedCards","$selectedCard","activeUser","CardController","transformCategory","input","isString","addOrgUnit","i","$addOrgUnit","addBirthday","birthday","Date","addScreenName","$addScreenName","addEmail","$addEmail","addPhone","$addPhone","addUrl","$addUrl","addAddress","$addAddress","userFilter","excludedCards","dry","excludeLists","$$cards","form","$valid","copy","reset","$reset","isNew","$fullname","toggleRawSource","showRawSource","rawSource","$$resource","post","currentFolder","allEmailTypes","$EMAIL_TYPES","allTelTypes","$TEL_TYPES","allUrlTypes","$URL_TYPES","allAddressTypes","$ADDRESS_TYPES","categories","userFilterResults","sgAddress","restrict","addressLines","lines","locality_region","street","street2","locality","region","country","postalcode","directive"],"mappings":"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","file":"Contacts.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGoContacts */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.ContactsUI', ['ngCookies', 'ui.router', 'angularFileUpload', 'ck', 'SOGo.Common', 'SOGo.PreferencesUI', 'SOGo.MailerUI'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('app', {\n        url: '/addressbooks',\n        abstract: true,\n        views: {\n          addressbooks: {\n            templateUrl: 'UIxContactFoldersView', // UI/Templates/Contacts/UIxContactFoldersView.wox\n            controller: 'AddressBooksController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          stateAddressbooks: stateAddressbooks\n        }\n      })\n      .state('app.addressbook', {\n        url: '/:addressbookId',\n        views: {\n          addressbook: {\n            templateUrl: 'addressbook',\n            controller: 'AddressBookController',\n            controllerAs: 'addressbook'\n          }\n        },\n        resolve: {\n          stateAddressbook: stateAddressbook\n        }\n      })\n      .state('app.addressbook.new', {\n        url: '/{contactType:(?:card|list)}/new',\n        views: {\n          card: {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        },\n        resolve: {\n          stateCard: stateNewCard\n        }\n      })\n      .state('app.addressbook.card', {\n        url: '/:cardId',\n        abstract: true,\n        views: {\n          card: {\n            template: '<ui-view/>'\n          }\n        },\n        resolve: {\n          stateCard: stateCard\n        },\n        onEnter: onEnterCard,\n        onExit: onExitCard\n      })\n      .state('app.addressbook.card.view', {\n        url: '/view',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactViewTemplate', // UI/Templates/Contacts/UIxContactViewTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      })\n      .state('app.addressbook.card.editor', {\n        url: '/edit',\n        views: {\n          'card@app.addressbook': {\n            templateUrl: 'UIxContactEditorTemplate', // UI/Templates/Contacts/UIxContactEditorTemplate.wox\n            controller: 'CardController',\n            controllerAs: 'editor'\n          }\n        }\n      });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/addressbooks/personal');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbooks.$inject = ['AddressBook'];\n  function stateAddressbooks(AddressBook) {\n    return AddressBook.$findAll(window.contactFolders);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAddressbook.$inject = ['$q', '$state', '$stateParams', 'AddressBook'];\n  function stateAddressbook($q, $state, $stateParams, AddressBook) {\n    var addressbook = _.find(AddressBook.$findAll(), function(addressbook) {\n      return addressbook.id == $stateParams.addressbookId;\n    });\n    if (addressbook) {\n      delete addressbook.selectedCard;\n      addressbook.$reload();\n      return addressbook;\n    }\n    return $q.reject('Addressbook ' + $stateParams.addressbookId + ' not found');\n  }\n\n  /**\n   * @ngInject\n   */\n  stateNewCard.$inject = ['$stateParams', 'stateAddressbook', 'Card'];\n  function stateNewCard($stateParams, stateAddressbook, Card) {\n    var tag = 'v' + $stateParams.contactType,\n        card = new Card({ pid: $stateParams.addressbookId, c_component: tag });\n    stateAddressbook.selectedCard = true;\n    return card;\n  }\n\n  /**\n   * @ngInject\n   */\n  stateCard.$inject = ['$state', '$stateParams', 'stateAddressbook'];\n  function stateCard($state, $stateParams, stateAddressbook) {\n    var card;\n\n    card = _.find(stateAddressbook.$cards, function(cardObject) {\n      return (cardObject.id == $stateParams.cardId);\n    });\n\n    if (card) {\n      return card.$reload();\n    }\n    else {\n      // Card not found\n      $state.go('app.addressbook');\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  onEnterCard.$inject = ['$stateParams', 'stateAddressbook'];\n  function onEnterCard($stateParams, stateAddressbook) {\n    stateAddressbook.selectedCard = $stateParams.cardId;\n  }\n\n  /**\n   * @ngInject\n   */\n  onExitCard.$inject = ['stateAddressbook'];\n  function onExitCard(stateMailbox) {\n    delete stateAddressbook.selectedCard;\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope', '$log', '$state'];\n  function runBlock($rootScope, $log, $state) {\n    $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n      $log.error(error);\n      $state.go('app.addressbook', { addressbookId: 'personal' });\n    });\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      $log.error(event, current, previous, rejection);\n    });\n  }\n\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBookController.$inject = ['$scope', '$q', '$window', '$state', '$timeout', '$mdDialog', '$mdToast', 'Account', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'stateAddressbooks', 'stateAddressbook'];\n  function AddressBookController($scope, $q, $window, $state, $timeout, $mdDialog, $mdToast, Account, Card, AddressBook, Dialog, Settings, stateAddressbooks, stateAddressbook) {\n    var vm = this;\n\n    AddressBook.selectedFolder = stateAddressbook;\n\n    vm.service = AddressBook;\n    vm.selectedFolder = stateAddressbook;\n    vm.selectCard = selectCard;\n    vm.toggleCardSelection = toggleCardSelection;\n    vm.newComponent = newComponent;\n    vm.unselectCards = unselectCards;\n    vm.confirmDeleteSelectedCards = confirmDeleteSelectedCards;\n    vm.copySelectedCards = copySelectedCards;\n    vm.moveSelectedCards = moveSelectedCards;\n    vm.selectAll = selectAll;\n    vm.sort = sort;\n    vm.sortedBy = sortedBy;\n    vm.cancelSearch = cancelSearch;\n    vm.newMessage = newMessage;\n    vm.newMessageWithSelectedCards = newMessageWithSelectedCards;\n    vm.newMessageWithRecipient = newMessageWithRecipient;\n    vm.mode = { search: false, multiple: 0 };\n    \n    function selectCard(card) {\n      $state.go('app.addressbook.card.view', {cardId: card.id});\n    }\n    \n    function toggleCardSelection($event, card) {\n      card.selected = !card.selected;\n      vm.mode.multiple += card.selected? 1 : -1;\n      $event.preventDefault();\n      $event.stopPropagation();\n    }\n\n    function newComponent(type) {\n      $state.go('app.addressbook.new', { contactType: type });\n    }\n\n    function unselectCards() {\n      _.forEach(vm.selectedFolder.$cards, function(card) {\n        card.selected = false;\n      });\n      vm.mode.multiple = 0;\n    }\n    \n    function confirmDeleteSelectedCards() {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the selected contacts?'),\n                     { ok: l('Delete') })\n        .then(function() {\n          // User confirmed the deletion\n          var selectedCards = _.filter(vm.selectedFolder.$cards, function(card) { return card.selected; });\n          vm.selectedFolder.$deleteCards(selectedCards).then(function() {\n            vm.mode.multiple = 0;\n            if (!vm.selectedFolder.selectedCard)\n              $state.go('app.addressbook');\n          });\n        });\n    }\n\n    /**\n     * @see AddressBooksController.dragSelectedCards\n     */\n    function _selectedCardsOperation(operation, dstId) {\n      var srcFolder, allCards, cards, ids, clearCardView, promise, success;\n\n      srcFolder = vm.selectedFolder;\n      clearCardView = false;\n      allCards = srcFolder.$selectedCards();\n      cards = _.filter(allCards, function(card) {\n        return card.$isCard();\n      });\n\n      if (cards.length != allCards.length)\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l(\"Lists can't be moved or copied.\"))\n            .position('top right')\n            .hideDelay(2000));\n\n      if (cards.length) {\n        if (operation == 'copy') {\n          promise = srcFolder.$copyCards(cards, dstId);\n          success = l('%{0} card(s) copied', cards.length);\n        }\n        else {\n          promise = srcFolder.$moveCards(cards, dstId);\n          success = l('%{0} card(s) moved', cards.length);\n          // Check if currently displayed card will be moved\n          ids = _.map(cards, 'id');\n          clearCardView = (srcFolder.selectedCard && ids.indexOf(srcFolder.selectedCard) >= 0);\n        }\n\n        // Show success toast when action succeeds\n        promise.then(function() {\n          if (clearCardView)\n            $state.go('app.addressbook');\n          $mdToast.show(\n            $mdToast.simple()\n              .content(success)\n              .position('top right')\n              .hideDelay(2000));\n        });\n      }\n    }\n\n    function copySelectedCards(folder) {\n      _selectedCardsOperation('copy', folder);\n    }\n\n    function moveSelectedCards(folder) {\n      _selectedCardsOperation('move', folder);\n    }\n\n    function selectAll() {\n      _.forEach(vm.selectedFolder.$cards, function(card) {\n        card.selected = true;\n      });\n      vm.mode.multiple = vm.selectedFolder.$cards.length;\n    }\n\n    function sort(field) {\n      vm.selectedFolder.$filter('', { sort: field });\n    }\n\n    function sortedBy(field) {\n      return AddressBook.$query.sort == field;\n    }\n\n    function cancelSearch() {\n      vm.mode.search = false;\n      vm.selectedFolder.$filter('');\n    }\n\n    function newMessage($event, recipients) {\n      Account.$findAll().then(function(accounts) {\n        var account = _.find(accounts, function(o) {\n          if (o.id === 0)\n            return o;\n        });\n\n        // We must initialize the Account with its mailbox\n        // list before proceeding with message's creation\n        account.$getMailboxes().then(function(mailboxes) {\n          account.$newMessage().then(function(message) {\n            angular.extend(message.editable, { to: recipients });\n            $mdDialog.show({\n              parent: angular.element(document.body),\n              targetEvent: $event,\n              clickOutsideToClose: false,\n              escapeToClose: false,\n              templateUrl: '../Mail/UIxMailEditor',\n              controller: 'MessageEditorController',\n              controllerAs: 'editor',\n              locals: {\n                stateAccount: account,\n                stateMessage: message\n              }\n            });\n          });\n        });\n      });\n    }\n\n    function newMessageWithRecipient($event, recipient, fn) {\n      var recipients = [fn + ' <' + recipient + '>'];\n      vm.newMessage($event, recipients);\n      $event.stopPropagation();\n      $event.preventDefault();\n    }\n\n    function newMessageWithSelectedCards($event) {\n      var selectedCards = _.filter(vm.selectedFolder.$cards, function(card) { return card.selected; });\n      var promises = [], recipients = [];\n\n      _.forEach(selectedCards, function(card) {\n        if (card.$isList({expandable: true})) {\n          // If the list's members were already fetch, use them\n          if (angular.isDefined(card.refs) && card.refs.length) {\n            _.forEach(card.refs, function(ref) {\n              if (ref.email.length)\n                recipients.push(ref.$shortFormat());\n            });\n          }\n          else {\n            promises.push(card.$reload().then(function(card) {\n              _.forEach(card.refs, function(ref) {\n                if (ref.email.length)\n                  recipients.push(ref.$shortFormat());\n              });\n            }));\n          }\n        }\n        else if (card.c_mail.length) {\n          recipients.push(card.$shortFormat());\n        }\n      });\n\n      $q.all(promises).then(function() {\n        recipients = _.uniq(recipients);\n        if (recipients.length)\n          vm.newMessage($event, recipients);\n      });\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')  \n    .controller('AddressBookController', AddressBookController);                                    \n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @ngInject\n   */\n  AddressBooksController.$inject = ['$state', '$scope', '$rootScope', '$stateParams', '$timeout', '$window', '$mdDialog', '$mdToast', '$mdMedia', '$mdSidenav', 'FileUploader', 'sgConstant', 'sgFocus', 'Card', 'AddressBook', 'Dialog', 'sgSettings', 'User', 'stateAddressbooks'];\n  function AddressBooksController($state, $scope, $rootScope, $stateParams, $timeout, $window, $mdDialog, $mdToast, $mdMedia, $mdSidenav, FileUploader, sgConstant, focus, Card, AddressBook, Dialog, Settings, User, stateAddressbooks) {\n    var vm = this;\n\n    vm.activeUser = Settings.activeUser;\n    vm.service = AddressBook;\n    vm.select = select;\n    vm.newAddressbook = newAddressbook;\n    vm.edit = edit;\n    vm.revertEditing = revertEditing;\n    vm.save = save;\n    vm.confirmDelete = confirmDelete;\n    vm.importCards = importCards;\n    vm.showLinks = showLinks;\n    vm.showProperties = showProperties;\n    vm.share = share;\n    vm.subscribeToFolder = subscribeToFolder;\n    vm.isDroppableFolder = isDroppableFolder;\n    vm.dragSelectedCards = dragSelectedCards;\n\n    function select($event, folder) {\n      if ($state.params.addressbookId != folder.id &&\n          vm.editMode != folder.id) {\n        vm.editMode = false;\n        AddressBook.$query.value = '';\n        // Close sidenav on small devices\n        if (!$mdMedia(sgConstant['gt-md']))\n          $mdSidenav('left').close();\n        $state.go('app.addressbook', {addressbookId: folder.id});\n      }\n      else {\n        $event.preventDefault();\n        $event.stopPropagation();\n      }\n    }\n\n    function newAddressbook() {\n      Dialog.prompt(l('New addressbook'),\n                    l('Name of new addressbook'))\n        .then(function(name) {\n          var addressbook = new AddressBook(\n            {\n              name: name,\n              isEditable: true,\n              isRemote: false,\n              owner: UserLogin\n            }\n          );\n          AddressBook.$add(addressbook);\n        });\n    }\n\n    function edit(folder) {\n      if (!folder.isRemote) {\n        vm.editMode = folder.id;\n        vm.originalAddressbook = angular.extend({}, folder.$omit());\n        focus('addressBookName_' + folder.id);\n      }\n    }\n\n    function revertEditing(folder) {\n      folder.name = vm.originalAddressbook.name;\n      vm.editMode = false;\n    }\n\n    function save(folder) {\n      var name = folder.name;\n      if (name && name.length > 0 && name != vm.originalAddressbook.name) {\n        folder.$rename(name)\n          .then(function(data) {\n            vm.editMode = false;\n          }, function(data, status) {\n            Dialog.alert(l('Warning'), data);\n          });\n      }\n    }\n\n    function confirmDelete() {\n      if (vm.service.selectedFolder.isSubscription) {\n        // Unsubscribe without confirmation\n        vm.service.selectedFolder.$delete()\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n          }, function(data, status) {\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                         l(data.error));\n          });\n      }\n      else {\n        Dialog.confirm(l('Warning'), l('Are you sure you want to delete the addressbook \"%{0}\"?',\n                                       vm.service.selectedFolder.name),\n                       { ok: l('Delete') })\n          .then(function() {\n            return vm.service.selectedFolder.$delete();\n          })\n          .then(function() {\n            vm.service.selectedFolder = null;\n            $state.go('app.addressbook', { addressbookId: 'personal' });\n            return true;\n          })\n          .catch(function(response) {\n            var message = response.data.message || response.statusText;\n            Dialog.alert(l('An error occured while deleting the addressbook \"%{0}\".',\n                           vm.service.selectedFolder.name),\n                        message);\n          });\n      }\n    }\n\n    function importCards($event, folder) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        targetEvent: $event,\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        templateUrl: 'UIxContactsImportDialog',\n        controller: CardsImportDialogController,\n        controllerAs: '$CardsImportDialogController',\n        locals: {\n          folder: folder\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      CardsImportDialogController.$inject = ['scope', '$mdDialog', 'folder'];\n      function CardsImportDialogController(scope, $mdDialog, folder) {\n        var vm = this;\n\n        vm.uploader = new FileUploader({\n          url: ApplicationBaseURL + [folder.id, 'import'].join('/'),\n          autoUpload: true,\n          queueLimit: 1,\n          filters: [{ name: filterByExtension, fn: filterByExtension }],\n          onSuccessItem: function(item, response, status, headers) {\n            var msg;\n\n            $mdDialog.hide();\n\n            if (response.imported === 0)\n              msg = l('No card was imported.');\n            else {\n              msg = l('A total of %{0} cards were imported in the addressbook.', response.imported);\n              AddressBook.selectedFolder.$reload();\n            }\n\n            $mdToast.show(\n              $mdToast.simple()\n                .content(msg)\n                .position('top right')\n                .hideDelay(3000));\n          },\n          onErrorItem: function(item, response, status, headers) {\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('An error occured while importing contacts.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n          }\n        });\n\n        vm.close = function() {\n          $mdDialog.hide();\n        };\n\n        function filterByExtension(item) {\n          var isTextFile = item.type.indexOf('text') === 0 ||\n              /\\.(ldif|vcf|vcard)$/.test(item.name);\n\n          if (!isTextFile)\n            $mdToast.show({\n              template: [\n                '<md-toast>',\n                '  <div class=\"md-toast-content\">',\n                '    <md-icon class=\"md-warn md-hue-1\">error_outline</md-icon>',\n                '    <span>' + l('Select a vCard or LDIF file.') + '</span>',\n                '  </div>',\n                '</md-toast>'\n              ].join(''),\n              position: 'top right',\n              hideDelay: 3000\n            });\n\n          return isTextFile;\n        }\n      }\n    }\n\n    function showLinks(addressbook) {\n      $mdDialog.show({\n        parent: angular.element(document.body),\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        templateUrl: addressbook.id + '/links',\n        controller: LinksDialogController,\n        controllerAs: 'links',\n        locals: {\n          addressbook: addressbook\n        }\n      });\n\n      /**\n       * @ngInject\n       */\n      LinksDialogController.$inject = ['$mdDialog', 'addressbook'];\n      function LinksDialogController($mdDialog, addressbook) {\n        var vm = this;\n        this.addressbook = addressbook;\n        this.close = close;\n\n        function close() {\n          $mdDialog.hide();\n        }\n      }\n    }\n\n    function showProperties(addressbook) {\n      $mdDialog.show({\n        templateUrl: addressbook.id + '/properties',\n        controller: PropertiesDialogController,\n        controllerAs: 'properties',\n        clickOutsideToClose: true,\n        escapeToClose: true,\n        locals: {\n          srcAddressBook: addressbook\n        }\n      }).catch(function() {\n        // Do nothing\n      });\n\n      /**\n       * @ngInject\n       */\n      PropertiesDialogController.$inject = ['$scope', '$mdDialog', 'srcAddressBook'];\n      function PropertiesDialogController($scope, $mdDialog, srcAddressBook) {\n        var vm = this;\n\n        vm.addressbook = new AddressBook(srcAddressBook.$omit());\n        vm.saveProperties = saveProperties;\n        vm.close = close;\n\n        function saveProperties() {\n          vm.addressbook.$save().then(function() {\n            // Refresh list instance\n            srcAddressBook.init(vm.addressbook.$omit());\n            $mdDialog.hide();\n          });\n        }\n\n        function close() {\n          $mdDialog.cancel();\n        }\n      }\n    }\n\n    function share(addressbook) {\n      // Fetch list of ACL users\n      addressbook.$acl.$users().then(function() {\n        // Show ACL editor\n        $mdDialog.show({\n          templateUrl: addressbook.id + '/UIxAclEditor', // UI/Templates/UIxAclEditor.wox\n          controller: 'AclController', // from the ng module SOGo.Common\n          controllerAs: 'acl',\n          clickOutsideToClose: true,\n          escapeToClose: true,\n          locals: {\n            usersWithACL: addressbook.$acl.users,\n            User: User,\n            folder: addressbook\n          }\n        });\n      });\n    }\n\n    /**\n     * subscribeToFolder - Callback of sgSubscribe directive\n     */\n    function subscribeToFolder(addressbookData) {\n      console.debug('subscribeToFolder ' + addressbookData.owner + addressbookData.name);\n      AddressBook.$subscribe(addressbookData.owner, addressbookData.name).then(function(data) {\n         $mdToast.show(\n           $mdToast.simple()\n             .content(l('Successfully subscribed to address book'))\n             .position('top right')\n             .hideDelay(3000));\n      });\n    }\n\n    function isDroppableFolder(srcFolder, dstFolder) {\n      return (dstFolder.id != srcFolder.id) && (dstFolder.isOwned || dstFolder.acls.objectCreator);\n    }\n\n    /**\n     * @see AddressBookController._selectedCardsOperation\n     */\n    function dragSelectedCards(srcFolder, dstFolder, mode) {\n      var dstId, allCards, cards, ids, clearCardView, promise, success;\n\n      dstId = dstFolder.id;\n      clearCardView = false;\n      allCards = srcFolder.$selectedCards();\n      if (allCards.length === 0)\n        allCards = [srcFolder.$selectedCard()];\n      cards = _.filter(allCards, function(card) {\n        return card.$isCard();\n      });\n\n      if (cards.length != allCards.length)\n        $mdToast.show(\n          $mdToast.simple()\n            .content(l(\"Lists can't be moved or copied.\"))\n            .position('top right')\n            .hideDelay(2000));\n\n      if (cards.length) {\n        if (mode == 'copy') {\n          promise = srcFolder.$copyCards(cards, dstId);\n          success = l('%{0} card(s) copied', cards.length);\n        }\n        else {\n          promise = srcFolder.$moveCards(cards, dstId);\n          success = l('%{0} card(s) moved', cards.length);\n          // Check if currently displayed card will be moved\n          ids = _.map(cards, 'id');\n          clearCardView = (srcFolder.selectedCard && ids.indexOf(srcFolder.selectedCard) >= 0);\n        }\n\n        // Show success toast when action succeeds\n        promise.then(function() {\n          if (clearCardView)\n            $state.go('app.addressbook');\n          $mdToast.show(\n            $mdToast.simple()\n              .content(success)\n              .position('top right')\n              .hideDelay(2000));\n        });\n      }\n    }\n\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('AddressBooksController', AddressBooksController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * Controller to view and edit a card\n   * @ngInject\n   */\n  CardController.$inject = ['$scope', '$timeout', '$window', '$mdDialog', 'AddressBook', 'Card', 'Dialog', 'sgFocus', '$state', '$stateParams', 'stateCard'];\n  function CardController($scope, $timeout, $window, $mdDialog, AddressBook, Card, Dialog, focus, $state, $stateParams, stateCard) {\n    var vm = this;\n\n    vm.card = stateCard;\n\n    vm.currentFolder = AddressBook.selectedFolder;\n    vm.allEmailTypes = Card.$EMAIL_TYPES;\n    vm.allTelTypes = Card.$TEL_TYPES;\n    vm.allUrlTypes = Card.$URL_TYPES;\n    vm.allAddressTypes = Card.$ADDRESS_TYPES;\n    vm.categories = {};\n    vm.userFilterResults = [];\n    vm.transformCategory = transformCategory;\n    vm.addOrgUnit = addOrgUnit;\n    vm.addBirthday = addBirthday;\n    vm.addScreenName = addScreenName;\n    vm.addEmail = addEmail;\n    vm.addPhone = addPhone;\n    vm.addUrl = addUrl;\n    vm.addAddress = addAddress;\n    vm.userFilter = userFilter;\n    vm.save = save;\n    vm.close = close;\n    vm.reset = reset;\n    vm.cancel = cancel;\n    vm.confirmDelete = confirmDelete;\n    vm.toggleRawSource = toggleRawSource;\n    vm.showRawSource = false;\n\n    function transformCategory(input) {\n      if (angular.isString(input))\n        return { value: input };\n      else\n        return input;\n    }\n    function addOrgUnit() {\n      var i = vm.card.$addOrgUnit('');\n      focus('orgUnit_' + i);\n    }\n    function addBirthday() {\n      vm.card.birthday = new Date();\n    }\n    function addScreenName() {\n      vm.card.$addScreenName('');\n    }\n    function addEmail() {\n      var i = vm.card.$addEmail('');\n      focus('email_' + i);\n    }\n    function addPhone() {\n      var i = vm.card.$addPhone('');\n      focus('phone_' + i);\n    }\n    function addUrl() {\n      var i = vm.card.$addUrl('', '');\n      focus('url_' + i);\n    }\n    function addAddress() {\n      var i = vm.card.$addAddress('', '', '', '', '', '', '', '');\n      focus('address_' + i);\n    }\n    function userFilter($query, excludedCards) {\n      AddressBook.selectedFolder.$filter($query, {dry: true, excludeLists: true}, excludedCards);\n      return AddressBook.selectedFolder.$$cards;\n    }\n    function save(form) {\n      if (form.$valid) {\n        vm.card.$save()\n          .then(function(data) {\n            var i = _.indexOf(_.map(AddressBook.selectedFolder.$cards, 'id'), vm.card.id);\n            if (i < 0) {\n              // New card; reload contacts list and show addressbook in which the card has been created\n              AddressBook.selectedFolder.$reload();\n            }\n            else {\n              // Update contacts list with new version of the Card object\n              AddressBook.selectedFolder.$cards[i] = angular.copy(vm.card);\n            }\n            $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n          });\n      }\n    }\n    function close() {\n      $state.go('app.addressbook').then(function() {\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n      });\n    }\n    function reset() {\n      vm.card.$reset();\n    }\n    function cancel() {\n      vm.card.$reset();\n      if (vm.card.isNew) {\n        // Cancelling the creation of a card\n        vm.card = null;\n        delete AddressBook.selectedFolder.selectedCard;\n        $state.go('app.addressbook', { addressbookId: AddressBook.selectedFolder.id });\n      }\n      else {\n        // Cancelling the edition of an existing card\n        $state.go('app.addressbook.card.view', { cardId: vm.card.id });\n      }\n    }\n    function confirmDelete(card) {\n      Dialog.confirm(l('Warning'),\n                     l('Are you sure you want to delete the card of %{0}?', '<b>' + card.$fullname() + '</b>'),\n                     { ok: l('Delete') })\n        .then(function() {\n          // User confirmed the deletion\n          AddressBook.selectedFolder.$deleteCards([card])\n            .then(function() {\n              close();\n            }, function(data, status) {\n              Dialog.alert(l('Warning'), l('An error occured while deleting the card \"%{0}\".',\n                                           card.$fullname()));\n            });\n        });\n    }\n\n    function toggleRawSource($event) {\n      if (!vm.showRawSource && !vm.rawSource) {\n        Card.$$resource.post(vm.currentFolder.id + '/' + vm.card.id, \"raw\").then(function(data) {\n          vm.rawSource = data;\n          vm.showRawSource = true;\n        });\n      }\n      else {\n        vm.showRawSource = !vm.showRawSource;\n      }\n    }\n  }\n\n  angular\n    .module('SOGo.ContactsUI')\n    .controller('CardController', CardController);\n})();\n","/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n\n(function() {\n  'use strict';\n\n  /**\n   * @name sgAddress\n   * @memberof ContactsUI\n   * @desc Directive to format a postal address.\n   * @ngInject\n   */\n  function sgAddress() {\n    return {\n      restrict: 'A',\n      scope: { data: '=sgAddress' },\n      controller: ['$scope', function($scope) {\n        $scope.addressLines = function(data) {\n          var lines = [],\n              locality_region = [];\n          if (data.street) lines.push(data.street);\n          if (data.street2) lines.push(data.street2);\n          if (data.locality) locality_region.push(data.locality);\n          if (data.region) locality_region.push(data.region);\n          if (locality_region.length > 0) lines.push(locality_region.join(', '));\n          if (data.country) lines.push(data.country);\n          if (data.postalcode) lines.push(data.postalcode);\n          return lines.join('<br>');\n        };\n      }],\n      template: '<address ng-bind-html=\"addressLines(data)\"></address>'\n    };\n  }\n  \n  angular\n    .module('SOGo.Common')\n    .directive('sgAddress', sgAddress);\n})();\n"]}