!function(){"use strict";angular.module("SOGo.MailerUI",["ngCookies","ui.router","ck","angularFileUpload","SOGo.Common","SOGo.ContactsUI","SOGo.SchedulerUI","ngAnimate","SOGo.PreferencesUI"]).config(e).run(i).controller("MessageEditorControllerPopup",l),e.$inject=["$stateProvider","$urlRouterProvider"];function e(e,i){e.state("mail",{url:"/Mail",abstract:!0,views:{message:{template:"<ui-view/>"}},resolve:{stateAccounts:t}}).state("mail.account",{url:"/:accountId",abstract:!0,template:'<ui-view id="account"/>',resolve:{stateAccount:o}}).state("mail.account.mailbox",{url:"/:mailboxId",abstract:!0,template:'<ui-view id="mailbox"/>',resolve:{stateMailbox:n}}).state("mail.account.mailbox.newMessage",{url:"/new",views:{"message@":{template:"<ui-view/>",controller:"MessageEditorControllerPopup"}},resolve:{stateMessage:r}}).state("mail.account.mailbox.message",{url:"/:messageId",views:{"message@":{templateUrl:"UIxMailViewTemplate",controller:"MessageController",controllerAs:"viewer"}},resolve:{stateMessage:a}}).state("mail.account.mailbox.message.edit",{url:"/edit",views:{"message@":{template:"<ui-view/>",controller:"MessageEditorControllerPopup"}},resolve:{stateContent:s}}).state("mail.account.mailbox.message.action",{url:"/{actionName:(?:reply|replyall|forward)}",views:{"message@":{template:"<ui-view/>",controller:"MessageEditorControllerPopup"}}}),i.otherwise("/Mail/0/folderINBOX/new")}t.$inject=["$window","$q","Account"];function t(e,t,o){var n,r=[];return e&&e.opener&&e.opener.$mailboxController?(n=e.opener.$mailboxController.accounts,t.when(n)):o.$findAll().then(function(e){return angular.forEach(e,function(e,t){var o=e.$getMailboxes();0===t?r.push(o.then(function(t){return e})):r.push(e)}),t.all(r)})}o.$inject=["$stateParams","stateAccounts"];function o(e,t){return _.find(t,function(t){return t.id==e.accountId})}n.$inject=["$q","$state","$stateParams","stateAccount","decodeUriFilter","Mailbox"];function n(e,t,o,n,r,a){var s,i,l=r(o.mailboxId);return(s=(i=function(e){var t=_.find(e,function(e){return e.path==l});return t||angular.forEach(e,function(e){!t&&e.children&&e.children.length>0&&(t=i(e.children))}),t})(n.$mailboxes))?(s.$topIndex=0,s.selectFolder(),s):e.reject("Mailbox doesn't exist")}r.$inject=["$urlService","stateAccount"];function r(e,t){var o,n=e.search();return n&&(o=_.find(_.keys(n),function(e){return/^mailto:/i.test(e)})),t.$newMessage({mailto:o})}a.$inject=["encodeUriFilter","$q","$stateParams","$state","stateMailbox","Message"];function a(e,t,o,n,r,a){var s,i;return window&&window.opener&&window.opener.$messageController&&window.opener.$messageController.message.uid==parseInt(o.messageId)?(i=new a(r.$account.id,r,window.opener.$messageController.message.$omit({privateAttributes:!0})),t.when(i)):(s={uid:o.messageId.toString()},(i=new a(r.$account.id,r,s)).$reload())}s.$inject=["stateMessage"];function s(e){return e.$editableContent()}i.$inject=["$window","$rootScope","$log"];function i(e,t,o){t.$on("$stateChangeError",function(t,n,r,a,s,i){o.error(i),e.close()}),t.$on("$routeChangeError",function(e,t,n,r){o.error(e,t,n,r)})}l.$inject=["$window","$mdDialog","stateAccount","stateMessage"];function l(e,t,o,n){t.show({hasBackdrop:!1,disableParentScroll:!1,clickOutsideToClose:!1,escapeToClose:!1,templateUrl:"UIxMailEditor",controller:"MessageEditorController",controllerAs:"editor",locals:{stateAccount:o,stateMessage:n}}).finally(function(){e.close()})}}();
//# sourceMappingURL=Mailer.app.popup.js.map