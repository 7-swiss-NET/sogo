{"version":3,"sources":["Mailer/Mailer.app.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","views","mailboxes","templateUrl","controller","controllerAs","resolve","stateAccounts","abstract","mailbox","template","stateAccount","mailbox@mail","stateMailbox","stateVirtualMailbox","message","stateVirtualMailboxOfMessage","stateMessages","stateMessage","onEnter","onEnterMessage","onExit","onExitMessage","onEnterInbox","otherwise","navigator","registerProtocolHandler","mailtoURL","window","location","origin","ApplicationBaseURL","$window","$q","Account","accounts","$findAll","mailAccounts","promises","angular","forEach","account","i","$getMailboxes","push","then","objects","all","$stateParams","_","find","id","accountId","decodeUriFilter","Mailbox","_find","mailboxId","o","path","children","length","selectedFolder","$virtualMode","$isLoading","$mailboxes","$topIndex","selectFolder","reject","$transition","encodeUriFilter","stateAccountPromise","injector","getAsync","router","stateService","target","$state","promise","$filter","catch","resetSelectedMessage","mailboxObject","$messages","messageObject","uid","parseInt","messageId","$reload","useCache","go","$account","selectedMessage","runBlock","$transitions","$log","DebugEnabled","defaultErrorHandler","onError","to","transition","name","ignored","error","indexOf","module","config","run","$inject"],"mappings":"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","file":"Mailer.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGo.MailerUI module */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.MailerUI', ['ngCookies', 'ui.router', 'ck', 'angularFileUpload', 'SOGo.Common', 'SOGo.ContactsUI', 'SOGo.SchedulerUI', 'ngAnimate', 'SOGo.PreferencesUI'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('mail', {\n        url: '/Mail',\n        views: {\n          mailboxes: {\n            templateUrl: 'UIxMailMainFrame', // UI/Templates/MailerUI/UIxMailMainFrame.wox\n            controller: 'MailboxesController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          stateAccounts: stateAccounts\n        }\n      })\n      .state('mail.account', {\n        url: '/:accountId',\n        abstract: true,\n        views: {\n          mailbox: {\n            template: '<ui-view/>'\n          }\n        },\n        resolve: {\n          stateAccount: stateAccount\n        }\n      })\n      .state('mail.account.virtualMailbox', {\n        url: '/virtual',\n        views: {\n          'mailbox@mail': {\n            templateUrl: 'UIxMailFolderTemplate', // UI/Templates/MailerUI/UIxMailFolderTemplate.wox\n            controller: 'MailboxController',\n            controllerAs: 'mailbox'\n          }\n        },\n        resolve: {\n          stateMailbox: stateVirtualMailbox\n        }\n      })\n      .state('mail.account.virtualMailbox.message', {\n        url: '/:mailboxId/:messageId',\n        views: {\n           message: {\n            templateUrl: 'UIxMailViewTemplate', // UI/Templates/MailerUI/UIxMailViewTemplate.wox\n            controller: 'MessageController',\n            controllerAs: 'viewer'\n          }\n        },\n        resolve: {\n          stateMailbox: stateVirtualMailboxOfMessage,\n          stateMessages: stateMessages,\n          stateMessage: stateMessage\n        },\n        onEnter: onEnterMessage,\n        onExit: onExitMessage\n      })\n      .state('mail.account.inbox', {\n        url: '/inbox',\n        onEnter: onEnterInbox\n      })\n      .state('mail.account.mailbox', {\n        url: '/:mailboxId',\n        views: {\n          'mailbox@mail': {\n            templateUrl: 'UIxMailFolderTemplate', // UI/Templates/MailerUI/UIxMailFolderTemplate.wox\n            controller: 'MailboxController',\n            controllerAs: 'mailbox'\n          }\n        },\n        resolve: {\n          stateMailbox: stateMailbox,\n          stateMessages: stateMessages\n        }\n      })\n      // .state('mail.account.mailbox.newMessage', {\n      //   url: '/new',\n      //   views: {\n      //     'mailbox@mail': {\n      //       templateUrl: 'UIxMailEditor', // UI/Templates/MailerUI/UIxMailEditor.wox\n      //       controller: 'MessageEditorController',\n      //       controllerAs: 'editor'\n      //     }\n      //   },\n      //   resolve: {\n      //     stateMessage: stateNewMessage\n      //   }\n      // })\n      .state('mail.account.mailbox.message', {\n        url: '/:messageId',\n        views: {\n          message: {\n            templateUrl: 'UIxMailViewTemplate', // UI/Templates/MailerUI/UIxMailViewTemplate.wox\n            controller: 'MessageController',\n            controllerAs: 'viewer'\n          }\n        },\n        onEnter: onEnterMessage,\n        onExit: onExitMessage,\n        resolve: {\n          stateMessage: stateMessage\n        }\n      });\n      // .state('mail.account.mailbox.message.edit', {\n      //   url: '/edit',\n      //   views: {\n      //     'mailbox@mail': {\n      //       templateUrl: 'UIxMailEditor', // UI/Templates/MailerUI/UIxMailEditor.wox\n      //       controller: 'MessageEditorController',\n      //       controllerAs: 'editor'\n      //     }\n      //   },\n      //   resolve: {\n      //     stateContent: stateContent\n      //   }\n      // })\n      // .state('mail.account.mailbox.message.action', {\n      //   url: '/{actionName:(?:reply|replyall|forward)}',\n      //   views: {\n      //     'mailbox@mail': {\n      //       templateUrl: 'UIxMailEditor', // UI/Templates/MailerUI/UIxMailEditor.wox\n      //       controller: 'MessageEditorController',\n      //       controllerAs: 'editor'\n      //     }\n      //   }\n      // });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/Mail/0/inbox');\n\n    // Try to register SOGo has an handler for mailto: links\n    if (navigator && navigator.registerProtocolHandler) {\n      var mailtoURL = window.location.origin + window.ApplicationBaseURL + 'UIxMailPopupView#!/Mail/0/INBOX/new?%s';\n      navigator.registerProtocolHandler('mailto', mailtoURL, 'SOGo');\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAccounts.$inject = ['$window', '$q', 'Account'];\n  function stateAccounts($window, $q, Account) {\n    var accounts = Account.$findAll($window.mailAccounts),\n        promises = [];\n    // Fetch list of mailboxes for each account\n    angular.forEach(accounts, function(account, i) {\n      var mailboxes = account.$getMailboxes();\n      if (i === 0)\n        // Make sure we have the list of mailboxes of the first account\n        promises.push(mailboxes.then(function(objects) {\n          return account;\n        }));\n      else\n        // Don't wait for external accounts\n        promises.push(account);\n    });\n    return $q.all(promises);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAccount.$inject = ['$stateParams', 'stateAccounts'];\n  function stateAccount($stateParams, stateAccounts) {\n    return _.find(stateAccounts, function(account) {\n      return account.id == $stateParams.accountId;\n    });\n  }\n\n  /**\n   * @ngInject\n   */\n  stateMailbox.$inject = ['$q', '$stateParams', 'stateAccount', 'decodeUriFilter', 'Mailbox'];\n  function stateMailbox($q, $stateParams, stateAccount, decodeUriFilter, Mailbox) {\n    var mailbox,\n        mailboxId = decodeUriFilter($stateParams.mailboxId),\n        _find;\n\n    // Recursive find function\n    _find = function(mailboxes) {\n      var mailbox = _.find(mailboxes, function(o) {\n        return o.path == mailboxId;\n      });\n      if (!mailbox) {\n        angular.forEach(mailboxes, function(o) {\n          if (!mailbox && o.children && o.children.length > 0) {\n            mailbox = _find(o.children);\n          }\n        });\n      }\n      return mailbox;\n    };\n\n    if (Mailbox.selectedFolder && !Mailbox.$virtualMode)\n      Mailbox.selectedFolder.$isLoading = true;\n\n    mailbox = _find(stateAccount.$mailboxes);\n\n    if (mailbox) {\n      mailbox.$topIndex = 0;\n      mailbox.selectFolder();\n      return mailbox;\n    }\n    else\n      // Mailbox not found\n      return $q.reject(\"Mailbox doesn't exist\");\n  }\n\n  /**\n   * @ngInject\n   */\n  onEnterInbox.$inject = ['$transition$', 'encodeUriFilter', 'Mailbox'];\n  function onEnterInbox($transition, encodeUriFilter, Mailbox) {\n    var stateAccountPromise = $transition.injector().getAsync('stateAccount');\n    return stateAccountPromise.then(function(stateAccount) {\n      if (stateAccount.$mailboxes.length > 0) {\n        return $transition.router.stateService.target('mail.account.mailbox', {\n          accountId: stateAccount.id,\n          mailboxId: encodeUriFilter(stateAccount.$mailboxes[0].path)\n        });\n      }\n      else {\n        Mailbox.selectedFolder = false;\n        return $transition.router.stateService.target('mail');\n      }\n    });\n  }\n\n  /**\n   * @ngInject\n   */\n  stateMessages.$inject = ['$q', '$state', 'Mailbox', 'stateMailbox'];\n  function stateMessages($q, $state, Mailbox, stateMailbox) {\n    var promise;\n\n    if (Mailbox.$virtualMode)\n      return [];\n\n    if (stateMailbox)\n      promise = stateMailbox.$filter().catch(function() {\n        // Mailbox not found\n        return $q.reject('Mailbox not found');\n      });\n    else\n      promise = $q.reject(\"Mailbox doesn't exist\");\n\n    return promise;\n  }\n\n  /**\n   * @ngInject\n   */\n  // stateNewMessage.$inject = ['stateAccount'];\n  // function stateNewMessage(stateAccount) {\n  //   return stateAccount.$newMessage();\n  // }\n\n  /**\n   * Return a VirtualMailbox instance\n   * @ngInject\n   */\n  stateVirtualMailbox.$inject = ['$q', 'Mailbox'];\n  function stateVirtualMailbox($q, Mailbox) {\n    if (Mailbox.$virtualMode)\n      return Mailbox.selectedFolder;\n    else\n      return $q.reject(\"No virtual mailbox defined\");\n  }\n\n  /**\n   * Return a Mailbox instance from a VirtualMailbox instance\n   * @ngInject\n   */\n  stateVirtualMailboxOfMessage.$inject = ['$q', 'Mailbox', 'decodeUriFilter', '$stateParams'];\n  function stateVirtualMailboxOfMessage($q, Mailbox, decodeUriFilter, $stateParams) {\n    var mailboxId = decodeUriFilter($stateParams.mailboxId);\n\n    if (Mailbox.$virtualMode) {\n      Mailbox.selectedFolder.resetSelectedMessage();\n      return _.find(Mailbox.selectedFolder.$mailboxes, function(mailboxObject) {\n        return mailboxObject.path == mailboxId;\n      });\n    }\n    else\n      return $q.reject(\"No virtual mailbox defined for message\");\n  }\n\n  /**\n   * @ngInject\n   */\n  stateMessage.$inject = ['Mailbox', 'encodeUriFilter', '$stateParams', '$state', 'stateMailbox', 'stateMessages'];\n  function stateMessage(Mailbox, encodeUriFilter, $stateParams, $state, stateMailbox, stateMessages) {\n    var message;\n\n    message = _.find(stateMailbox.$messages, function(messageObject) {\n      return messageObject.uid == parseInt($stateParams.messageId);\n    });\n\n    if (message) {\n      return message.$reload({useCache: true});\n    }\n    else {\n      // Message not found\n      $state.go('mail.account.mailbox', { accountId: stateMailbox.$account.id, mailboxId: encodeUriFilter(stateMailbox.path) });\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  onEnterMessage.$inject = ['$stateParams', 'stateMailbox'];\n  function onEnterMessage($stateParams, stateMailbox) {\n    stateMailbox.selectedMessage = parseInt($stateParams.messageId);\n  }\n\n  /**\n   * @ngInject\n   */\n  onExitMessage.$inject = ['stateMailbox'];\n  function onExitMessage(stateMailbox) {\n    delete stateMailbox.selectedMessage;\n  }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$window', '$transitions', '$log', '$state', 'Mailbox'];\n  function runBlock($window, $transitions, $log, $state, Mailbox) {\n    if (!$window.DebugEnabled)\n      $state.defaultErrorHandler(function() {\n        // Don't report any state error\n      });\n    $transitions.onError({ to: 'mail.**' }, function(transition) {\n      if (transition.to().name != 'mail' &&\n          !transition.ignored() &&\n          transition.error().message.indexOf('superseded') < 0) {\n        $log.error('transition error to ' + transition.to().name);\n        // Unselect everything\n        Mailbox.selectedFolder = false;\n        $state.go('mail');\n      }\n    });\n  }\n\n})();\n"]}