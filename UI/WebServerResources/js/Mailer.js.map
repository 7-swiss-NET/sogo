{"version":3,"sources":["Mailer/Mailer.app.js"],"names":["configure","$stateProvider","$urlRouterProvider","state","url","views","mailboxes","templateUrl","controller","controllerAs","resolve","stateAccounts","abstract","mailbox","template","stateAccount","mailbox@mail","stateMailbox","stateVirtualMailbox","message","stateVirtualMailboxOfMessage","stateMessages","stateMessage","otherwise","$q","Account","accounts","$findAll","mailAccounts","promises","angular","forEach","account","i","$getMailboxes","push","then","objects","all","$stateParams","_","find","id","accountId","decodeUriFilter","_find","mailboxId","o","path","children","length","$mailboxes","Mailbox","$virtualMode","$filter","selectedFolder","reject","resetSelectedMessage","mailboxObject","encodeUriFilter","$state","$messages","messageObject","uid","messageId","selectedMessage","$reload","go","$account","runBlock","$rootScope","$log","$on","event","toState","toParams","fromState","fromParams","error","current","previous","rejection","module","config","run","$inject"],"mappings":"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","file":"Mailer.js","sourcesContent":["/* -*- Mode: javascript; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\n/* JavaScript for SOGo.MailerUI module */\n\n(function() {\n  'use strict';\n\n  angular.module('SOGo.MailerUI', ['ngSanitize', 'ui.router', 'ck', 'angularFileUpload', 'SOGo.Common', 'SOGo.ContactsUI', 'ngAnimate', 'SOGo.PreferencesUI'])\n    .config(configure)\n    .run(runBlock);\n\n  /**\n   * @ngInject\n   */\n  configure.$inject = ['$stateProvider', '$urlRouterProvider'];\n  function configure($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('mail', {\n        url: '/Mail',\n        views: {\n          mailboxes: {\n            templateUrl: 'UIxMailMainFrame', // UI/Templates/MailerUI/UIxMailMainFrame.wox\n            controller: 'MailboxesController',\n            controllerAs: 'app'\n          }\n        },\n        resolve: {\n          stateAccounts: stateAccounts\n        }\n      })\n      .state('mail.account', {\n        url: '/:accountId',\n        abstract: true,\n        views: {\n          mailbox: {\n            template: '<ui-view/>'\n          }\n        },\n        resolve: {\n          stateAccount: stateAccount\n        }\n      })\n      .state('mail.account.virtualMailbox', {\n        url: '/virtual',\n        views: {\n          'mailbox@mail': {\n            templateUrl: 'UIxMailFolderTemplate', // UI/Templates/MailerUI/UIxMailFolderTemplate.wox\n            controller: 'MailboxController',\n            controllerAs: 'mailbox'\n          }\n        },\n        resolve: {\n          stateMailbox: stateVirtualMailbox\n        }\n      })\n      .state('mail.account.virtualMailbox.message', {\n        url: '/:mailboxId/:messageId',\n        views: {\n           message: {\n            templateUrl: 'UIxMailViewTemplate', // UI/Templates/MailerUI/UIxMailViewTemplate.wox\n            controller: 'MessageController',\n            controllerAs: 'viewer'\n          }\n        },\n        resolve: {\n          stateMailbox: stateVirtualMailboxOfMessage,\n          stateMessages: stateMessages,\n          stateMessage: stateMessage\n        }\n      })\n      .state('mail.account.mailbox', {\n        url: '/:mailboxId',\n        views: {\n          'mailbox@mail': {\n            templateUrl: 'UIxMailFolderTemplate', // UI/Templates/MailerUI/UIxMailFolderTemplate.wox\n            controller: 'MailboxController',\n            controllerAs: 'mailbox'\n          }\n        },\n        resolve: {\n          stateMailbox: stateMailbox,\n          stateMessages: stateMessages\n        }\n      })\n      // .state('mail.account.mailbox.newMessage', {\n      //   url: '/new',\n      //   views: {\n      //     'mailbox@mail': {\n      //       templateUrl: 'UIxMailEditor', // UI/Templates/MailerUI/UIxMailEditor.wox\n      //       controller: 'MessageEditorController',\n      //       controllerAs: 'editor'\n      //     }\n      //   },\n      //   resolve: {\n      //     stateMessage: stateNewMessage\n      //   }\n      // })\n      .state('mail.account.mailbox.message', {\n        url: '/:messageId',\n        views: {\n          message: {\n            templateUrl: 'UIxMailViewTemplate', // UI/Templates/MailerUI/UIxMailViewTemplate.wox\n            controller: 'MessageController',\n            controllerAs: 'viewer'\n          }\n        },\n        resolve: {\n          stateMessage: stateMessage\n        }\n      });\n      // .state('mail.account.mailbox.message.edit', {\n      //   url: '/edit',\n      //   views: {\n      //     'mailbox@mail': {\n      //       templateUrl: 'UIxMailEditor', // UI/Templates/MailerUI/UIxMailEditor.wox\n      //       controller: 'MessageEditorController',\n      //       controllerAs: 'editor'\n      //     }\n      //   },\n      //   resolve: {\n      //     stateContent: stateContent\n      //   }\n      // })\n      // .state('mail.account.mailbox.message.action', {\n      //   url: '/{actionName:(?:reply|replyall|forward)}',\n      //   views: {\n      //     'mailbox@mail': {\n      //       templateUrl: 'UIxMailEditor', // UI/Templates/MailerUI/UIxMailEditor.wox\n      //       controller: 'MessageEditorController',\n      //       controllerAs: 'editor'\n      //     }\n      //   }\n      // });\n\n    // if none of the above states are matched, use this as the fallback\n    $urlRouterProvider.otherwise('/Mail');\n\n    // Set default configuration for tags input\n    // tagsInputConfigProvider.setDefaults('tagsInput', {\n    //   addOnComma: false,\n    //   replaceSpacesWithDashes: false,\n    //   allowedTagsPattern: /([\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)/i\n    // });\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAccounts.$inject = ['$q', 'Account'];\n  function stateAccounts($q, Account) {\n    var accounts = Account.$findAll(mailAccounts),\n        promises = [];\n    // Fetch list of mailboxes for each account\n    angular.forEach(accounts, function(account, i) {\n      var mailboxes = account.$getMailboxes();\n      promises.push(mailboxes.then(function(objects) {\n        return account;\n      }));\n    });\n    return $q.all(promises);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateAccount.$inject = ['$stateParams', 'stateAccounts'];\n  function stateAccount($stateParams, stateAccounts) {\n    return _.find(stateAccounts, function(account) {\n      return account.id == $stateParams.accountId;\n    });\n  }\n\n  /**\n   * @ngInject\n   */\n  stateMailbox.$inject = ['$stateParams', 'stateAccount', 'decodeUriFilter'];\n  function stateMailbox($stateParams, stateAccount, decodeUriFilter) {\n    var mailboxId = decodeUriFilter($stateParams.mailboxId),\n        _find;\n\n    // Recursive find function\n    _find = function(mailboxes) {\n      var mailbox = _.find(mailboxes, function(o) {\n        return o.path == mailboxId;\n      });\n      if (!mailbox) {\n        angular.forEach(mailboxes, function(o) {\n          if (!mailbox && o.children && o.children.length > 0) {\n            mailbox = _find(o.children);\n          }\n        });\n      }\n      return mailbox;\n    };\n\n    return _find(stateAccount.$mailboxes);\n  }\n\n  /**\n   * @ngInject\n   */\n  stateMessages.$inject = ['Mailbox', 'stateMailbox'];\n  function stateMessages(Mailbox, stateMailbox) {\n    if (Mailbox.$virtualMode)\n      return [];\n\n    return stateMailbox.$filter();\n  }\n\n  /**\n   * @ngInject\n   */\n  // stateNewMessage.$inject = ['stateAccount'];\n  // function stateNewMessage(stateAccount) {\n  //   return stateAccount.$newMessage();\n  // }\n\n  /**\n   * Return a VirtualMailbox instance\n   * @ngInject\n   */\n  stateVirtualMailbox.$inject = ['$q', 'Mailbox'];\n  function stateVirtualMailbox($q, Mailbox) {\n    if (Mailbox.$virtualMode)\n      return Mailbox.selectedFolder;\n    else\n      return $q.reject(\"No virtual mailbox defined\");\n  }\n\n  /**\n   * Return a Mailbox instance from a VirtualMailbox instance\n   * @ngInject\n   */\n  stateVirtualMailboxOfMessage.$inject = ['$q', 'Mailbox', 'decodeUriFilter', '$stateParams'];\n  function stateVirtualMailboxOfMessage($q, Mailbox, decodeUriFilter, $stateParams) {\n    var mailboxId = decodeUriFilter($stateParams.mailboxId);\n\n    if (Mailbox.$virtualMode) {\n      Mailbox.selectedFolder.resetSelectedMessage();\n      return _.find(Mailbox.selectedFolder.$mailboxes, function(mailboxObject) {\n        return mailboxObject.path == mailboxId;\n      });\n    }\n    else\n      return $q.reject(\"No virtual mailbox defined for message\");\n  }\n\n  /**\n   * @ngInject\n   */\n  stateMessage.$inject = ['Mailbox', 'encodeUriFilter', '$stateParams', '$state', 'stateMailbox', 'stateMessages'];\n  function stateMessage(Mailbox, encodeUriFilter, $stateParams, $state, stateMailbox, stateMessages) {\n    var message;\n\n    message = _.find(stateMailbox.$messages, function(messageObject) {\n      return messageObject.uid == $stateParams.messageId;\n    });\n\n    if (message) {\n      stateMailbox.selectedMessage = $stateParams.messageId;\n      return message.$reload();\n    }\n    else {\n      // Message not found\n      $state.go('mail.account.mailbox', { accountId: stateMailbox.$account.id, mailboxId: encodeUriFilter(stateMailbox.path) });\n    }\n  }\n\n  /**\n   * @ngInject\n   */\n  // stateContent.$inject = ['stateMessage'];\n  // function stateContent(stateMessage) {\n  //   return stateMessage.$editableContent();\n  // }\n\n  /**\n   * @ngInject\n   */\n  runBlock.$inject = ['$rootScope', '$log', '$state'];\n  function runBlock($rootScope, $log, $state) {\n    $rootScope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams, error) {\n      $log.error(error);\n      $state.go('mail');\n    });\n    $rootScope.$on('$routeChangeError', function(event, current, previous, rejection) {\n      $log.error(event, current, previous, rejection);\n    });\n  }\n\n})();\n"]}